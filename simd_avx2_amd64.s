//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT 路_uint8_avx2_sum(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB0_1
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0x7ff88349         // cmp    r8, 127
	JA   LBB0_4
	WORD $0xc931             // xor    ecx, ecx
	WORD $0xc031             // xor    eax, eax
	JMP  LBB0_7

LBB0_1:
	WORD $0xc031 // xor    eax, eax
	JMP  LBB0_8

LBB0_4:
	WORD $0xe283; BYTE $0x7f // and    edx, 127
	WORD $0x894c; BYTE $0xc1 // mov    rcx, r8
	WORD $0x2948; BYTE $0xd1 // sub    rcx, rdx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0
	WORD $0xc031             // xor    eax, eax
	LONG $0xc9eff1c5         // vpxor    xmm1, xmm1, xmm1
	LONG $0xd2efe9c5         // vpxor    xmm2, xmm2, xmm2
	LONG $0xdbefe1c5         // vpxor    xmm3, xmm3, xmm3

LBB0_5:
	LONG $0x04fcfdc5; BYTE $0x07   // vpaddb    ymm0, ymm0, yword [rdi + rax]
	LONG $0x4cfcf5c5; WORD $0x2007 // vpaddb    ymm1, ymm1, yword [rdi + rax + 32]
	LONG $0x54fcedc5; WORD $0x4007 // vpaddb    ymm2, ymm2, yword [rdi + rax + 64]
	LONG $0x5cfce5c5; WORD $0x6007 // vpaddb    ymm3, ymm3, yword [rdi + rax + 96]
	LONG $0x80e88348               // sub    rax, -128
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JNE  LBB0_5
	LONG $0xc0fcf5c5               // vpaddb    ymm0, ymm1, ymm0
	LONG $0xc0fcedc5               // vpaddb    ymm0, ymm2, ymm0
	LONG $0xc0fce5c5               // vpaddb    ymm0, ymm3, ymm0
	LONG $0x397de3c4; WORD $0x01c1 // vextracti128    xmm1, ymm0, 1
	LONG $0xc1fcf9c5               // vpaddb    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0x4e   // vpshufd    xmm1, xmm0, 78
	LONG $0xc1fcf9c5               // vpaddb    xmm0, xmm0, xmm1
	LONG $0xc9eff1c5               // vpxor    xmm1, xmm1, xmm1
	LONG $0xc1f6f9c5               // vpsadbw    xmm0, xmm0, xmm1
	LONG $0x1479e3c4; WORD $0x00c0 // vpextrb    eax, xmm0, 0
	WORD $0x8548; BYTE $0xd2       // test    rdx, rdx
	JE   LBB0_8

LBB0_7:
	WORD $0x0402; BYTE $0x0f // add    al, byte [rdi + rcx]
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc8 // cmp    r8, rcx
	JNE  LBB0_7

LBB0_8:
	WORD $0x0688 // mov    byte [rsi], al
	VZEROUPPER
	RET

TEXT 路_uint8_avx2_min(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	WORD $0x078a                 // mov    al, byte [rdi]
	WORD $0xd285                 // test    edx, edx
	JLE  LBB1_12
	WORD $0x8941; BYTE $0xd2     // mov    r10d, edx
	LONG $0x01fa8349             // cmp    r10, 1
	JE   LBB1_12
	LONG $0xff428d4d             // lea    r8, [r10 - 1]
	LONG $0x000001b9; BYTE $0x00 // mov    ecx, 1
	LONG $0x3ff88349             // cmp    r8, 63
	JBE  LBB1_11
	WORD $0x894c; BYTE $0xc1     // mov    rcx, r8
	LONG $0xc0e18348             // and    rcx, -64
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0xc0518d48             // lea    rdx, [rcx - 64]
	WORD $0x8948; BYTE $0xd0     // mov    rax, rdx
	LONG $0x06e8c148             // shr    rax, 6
	LONG $0x01c08348             // add    rax, 1
	WORD $0x8941; BYTE $0xc1     // mov    r9d, eax
	LONG $0x01e18341             // and    r9d, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB1_4
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	WORD $0x2948; BYTE $0xc2     // sub    rdx, rax
	LONG $0x000001b8; BYTE $0x00 // mov    eax, 1
	LONG $0xc86ffdc5             // vmovdqa    ymm1, ymm0

LBB1_6:
	LONG $0x04dafdc5; BYTE $0x07   // vpminub    ymm0, ymm0, yword [rdi + rax]
	LONG $0x4cdaf5c5; WORD $0x2007 // vpminub    ymm1, ymm1, yword [rdi + rax + 32]
	LONG $0x44dafdc5; WORD $0x4007 // vpminub    ymm0, ymm0, yword [rdi + rax + 64]
	LONG $0x4cdaf5c5; WORD $0x6007 // vpminub    ymm1, ymm1, yword [rdi + rax + 96]
	LONG $0x80e88348               // sub    rax, -128
	LONG $0x02c28348               // add    rdx, 2
	JNE  LBB1_6
	WORD $0x854d; BYTE $0xc9       // test    r9, r9
	JE   LBB1_9

LBB1_8:
	LONG $0x4cdaf5c5; WORD $0x2007 // vpminub    ymm1, ymm1, yword [rdi + rax + 32]
	LONG $0x04dafdc5; BYTE $0x07   // vpminub    ymm0, ymm0, yword [rdi + rax]

LBB1_9:
	LONG $0xc1dafdc5               // vpminub    ymm0, ymm0, ymm1
	LONG $0x397de3c4; WORD $0x01c1 // vextracti128    xmm1, ymm0, 1
	LONG $0xc1daf9c5               // vpminub    xmm0, xmm0, xmm1
	LONG $0xd071f1c5; BYTE $0x08   // vpsrlw    xmm1, xmm0, 8
	LONG $0xc1daf9c5               // vpminub    xmm0, xmm0, xmm1
	LONG $0x4179e2c4; BYTE $0xc0   // vphminposuw    xmm0, xmm0
	LONG $0x1479e3c4; WORD $0x00c0 // vpextrb    eax, xmm0, 0
	WORD $0x3949; BYTE $0xc8       // cmp    r8, rcx
	JE   LBB1_12
	LONG $0x01c98348               // or    rcx, 1

LBB1_11:
	LONG $0x0f14b60f         // movzx    edx, byte [rdi + rcx]
	WORD $0xc238             // cmp    dl, al
	WORD $0xb60f; BYTE $0xc0 // movzx    eax, al
	WORD $0x420f; BYTE $0xc2 // cmovb    eax, edx
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xca // cmp    r10, rcx
	JNE  LBB1_11

LBB1_12:
	WORD $0x0688 // mov    byte [rsi], al
	VZEROUPPER
	RET

LBB1_4:
	LONG $0x000001b8; BYTE $0x00 // mov    eax, 1
	LONG $0xc86ffdc5             // vmovdqa    ymm1, ymm0
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JNE  LBB1_8
	JMP  LBB1_9

TEXT 路_uint8_avx2_max(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	WORD $0x078a                 // mov    al, byte [rdi]
	WORD $0xd285                 // test    edx, edx
	JLE  LBB2_12
	WORD $0x8941; BYTE $0xd2     // mov    r10d, edx
	LONG $0x01fa8349             // cmp    r10, 1
	JE   LBB2_12
	LONG $0xff428d4d             // lea    r8, [r10 - 1]
	LONG $0x000001b9; BYTE $0x00 // mov    ecx, 1
	LONG $0x3ff88349             // cmp    r8, 63
	JBE  LBB2_11
	WORD $0x894c; BYTE $0xc1     // mov    rcx, r8
	LONG $0xc0e18348             // and    rcx, -64
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0xc0518d48             // lea    rdx, [rcx - 64]
	WORD $0x8948; BYTE $0xd0     // mov    rax, rdx
	LONG $0x06e8c148             // shr    rax, 6
	LONG $0x01c08348             // add    rax, 1
	WORD $0x8941; BYTE $0xc1     // mov    r9d, eax
	LONG $0x01e18341             // and    r9d, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB2_4
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	WORD $0x2948; BYTE $0xc2     // sub    rdx, rax
	LONG $0x000001b8; BYTE $0x00 // mov    eax, 1
	LONG $0xc86ffdc5             // vmovdqa    ymm1, ymm0

LBB2_6:
	LONG $0x04defdc5; BYTE $0x07   // vpmaxub    ymm0, ymm0, yword [rdi + rax]
	LONG $0x4cdef5c5; WORD $0x2007 // vpmaxub    ymm1, ymm1, yword [rdi + rax + 32]
	LONG $0x44defdc5; WORD $0x4007 // vpmaxub    ymm0, ymm0, yword [rdi + rax + 64]
	LONG $0x4cdef5c5; WORD $0x6007 // vpmaxub    ymm1, ymm1, yword [rdi + rax + 96]
	LONG $0x80e88348               // sub    rax, -128
	LONG $0x02c28348               // add    rdx, 2
	JNE  LBB2_6
	WORD $0x854d; BYTE $0xc9       // test    r9, r9
	JE   LBB2_9

LBB2_8:
	LONG $0x4cdef5c5; WORD $0x2007 // vpmaxub    ymm1, ymm1, yword [rdi + rax + 32]
	LONG $0x04defdc5; BYTE $0x07   // vpmaxub    ymm0, ymm0, yword [rdi + rax]

LBB2_9:
	LONG $0xc1defdc5               // vpmaxub    ymm0, ymm0, ymm1
	LONG $0x397de3c4; WORD $0x01c1 // vextracti128    xmm1, ymm0, 1
	LONG $0xc1def9c5               // vpmaxub    xmm0, xmm0, xmm1
	LONG $0xc976f1c5               // vpcmpeqd    xmm1, xmm1, xmm1
	LONG $0xc1eff9c5               // vpxor    xmm0, xmm0, xmm1
	LONG $0xd071f1c5; BYTE $0x08   // vpsrlw    xmm1, xmm0, 8
	LONG $0xc1daf9c5               // vpminub    xmm0, xmm0, xmm1
	LONG $0x4179e2c4; BYTE $0xc0   // vphminposuw    xmm0, xmm0
	LONG $0x1479e3c4; WORD $0x00c0 // vpextrb    eax, xmm0, 0
	WORD $0xd0f6                   // not    al
	WORD $0x3949; BYTE $0xc8       // cmp    r8, rcx
	JE   LBB2_12
	LONG $0x01c98348               // or    rcx, 1

LBB2_11:
	LONG $0x0f14b60f         // movzx    edx, byte [rdi + rcx]
	WORD $0xc238             // cmp    dl, al
	WORD $0xb60f; BYTE $0xc0 // movzx    eax, al
	WORD $0x470f; BYTE $0xc2 // cmova    eax, edx
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xca // cmp    r10, rcx
	JNE  LBB2_11

LBB2_12:
	WORD $0x0688 // mov    byte [rsi], al
	VZEROUPPER
	RET

LBB2_4:
	LONG $0x000001b8; BYTE $0x00 // mov    eax, 1
	LONG $0xc86ffdc5             // vmovdqa    ymm1, ymm0
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JNE  LBB2_8
	JMP  LBB2_9

TEXT 路_uint8_avx2_add(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB3_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x7ff88349         // cmp    r8, 127
	JA   LBB3_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB3_3

LBB3_7:
	LONG $0x02148d4e         // lea    r10, [rdx + r8]
	LONG $0x07048d4a         // lea    rax, [rdi + r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd6970f41         // seta    r14b
	LONG $0x06048d4a         // lea    rax, [rsi + r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB3_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB3_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x7fe18341         // and    r9d, 127
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x294d; BYTE $0xcb // sub    r11, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB3_10:
	LONG $0x6f7ea1c4; WORD $0x1604             // vmovdqu    ymm0, yword [rsi + r10]
	LONG $0x6f7ea1c4; WORD $0x164c; BYTE $0x20 // vmovdqu    ymm1, yword [rsi + r10 + 32]
	LONG $0x6f7ea1c4; WORD $0x1654; BYTE $0x40 // vmovdqu    ymm2, yword [rsi + r10 + 64]
	LONG $0x6f7ea1c4; WORD $0x165c; BYTE $0x60 // vmovdqu    ymm3, yword [rsi + r10 + 96]
	LONG $0xfc7da1c4; WORD $0x1704             // vpaddb    ymm0, ymm0, yword [rdi + r10]
	LONG $0xfc75a1c4; WORD $0x174c; BYTE $0x20 // vpaddb    ymm1, ymm1, yword [rdi + r10 + 32]
	LONG $0xfc6da1c4; WORD $0x1754; BYTE $0x40 // vpaddb    ymm2, ymm2, yword [rdi + r10 + 64]
	LONG $0xfc65a1c4; WORD $0x175c; BYTE $0x60 // vpaddb    ymm3, ymm3, yword [rdi + r10 + 96]
	LONG $0x7f7ea1c4; WORD $0x1204             // vmovdqu    yword [rdx + r10], ymm0
	LONG $0x7f7ea1c4; WORD $0x124c; BYTE $0x20 // vmovdqu    yword [rdx + r10 + 32], ymm1
	LONG $0x7f7ea1c4; WORD $0x1254; BYTE $0x40 // vmovdqu    yword [rdx + r10 + 64], ymm2
	LONG $0x7f7ea1c4; WORD $0x125c; BYTE $0x60 // vmovdqu    yword [rdx + r10 + 96], ymm3
	LONG $0x80ea8349                           // sub    r10, -128
	WORD $0x394d; BYTE $0xd3                   // cmp    r11, r10
	JNE  LBB3_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB3_12

LBB3_3:
	WORD $0x2944; BYTE $0xd9 // sub    ecx, r11d
	WORD $0x894d; BYTE $0xd9 // mov    r9, r11
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB3_5

LBB3_4:
	LONG $0x04b60f42; BYTE $0x1e // movzx    eax, byte [rsi + r11]
	LONG $0x1f040242             // add    al, byte [rdi + r11]
	LONG $0x1a048842             // mov    byte [rdx + r11], al
	LONG $0x01c38349             // add    r11, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB3_4

LBB3_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB3_12

LBB3_6:
	LONG $0x04b60f42; BYTE $0x1e   // movzx    eax, byte [rsi + r11]
	LONG $0x1f040242               // add    al, byte [rdi + r11]
	LONG $0x1a048842               // mov    byte [rdx + r11], al
	LONG $0x44b60f42; WORD $0x011e // movzx    eax, byte [rsi + r11 + 1]
	LONG $0x1f440242; BYTE $0x01   // add    al, byte [rdi + r11 + 1]
	LONG $0x1a448842; BYTE $0x01   // mov    byte [rdx + r11 + 1], al
	LONG $0x44b60f42; WORD $0x021e // movzx    eax, byte [rsi + r11 + 2]
	LONG $0x1f440242; BYTE $0x02   // add    al, byte [rdi + r11 + 2]
	LONG $0x1a448842; BYTE $0x02   // mov    byte [rdx + r11 + 2], al
	LONG $0x44b60f42; WORD $0x031e // movzx    eax, byte [rsi + r11 + 3]
	LONG $0x1f440242; BYTE $0x03   // add    al, byte [rdi + r11 + 3]
	LONG $0x1a448842; BYTE $0x03   // mov    byte [rdx + r11 + 3], al
	LONG $0x04c38349               // add    r11, 4
	WORD $0x394d; BYTE $0xd8       // cmp    r8, r11
	JNE  LBB3_6

LBB3_12:
	VZEROUPPER
	RET

TEXT 路_uint8_avx2_sub(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB4_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x7ff88349         // cmp    r8, 127
	JA   LBB4_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB4_3

LBB4_7:
	LONG $0x02148d4e         // lea    r10, [rdx + r8]
	LONG $0x07048d4a         // lea    rax, [rdi + r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd6970f41         // seta    r14b
	LONG $0x06048d4a         // lea    rax, [rsi + r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB4_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB4_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x7fe18341         // and    r9d, 127
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x294d; BYTE $0xcb // sub    r11, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB4_10:
	LONG $0x6f7ea1c4; WORD $0x1704             // vmovdqu    ymm0, yword [rdi + r10]
	LONG $0x6f7ea1c4; WORD $0x174c; BYTE $0x20 // vmovdqu    ymm1, yword [rdi + r10 + 32]
	LONG $0x6f7ea1c4; WORD $0x1754; BYTE $0x40 // vmovdqu    ymm2, yword [rdi + r10 + 64]
	LONG $0x6f7ea1c4; WORD $0x175c; BYTE $0x60 // vmovdqu    ymm3, yword [rdi + r10 + 96]
	LONG $0xf87da1c4; WORD $0x1604             // vpsubb    ymm0, ymm0, yword [rsi + r10]
	LONG $0xf875a1c4; WORD $0x164c; BYTE $0x20 // vpsubb    ymm1, ymm1, yword [rsi + r10 + 32]
	LONG $0xf86da1c4; WORD $0x1654; BYTE $0x40 // vpsubb    ymm2, ymm2, yword [rsi + r10 + 64]
	LONG $0xf865a1c4; WORD $0x165c; BYTE $0x60 // vpsubb    ymm3, ymm3, yword [rsi + r10 + 96]
	LONG $0x7f7ea1c4; WORD $0x1204             // vmovdqu    yword [rdx + r10], ymm0
	LONG $0x7f7ea1c4; WORD $0x124c; BYTE $0x20 // vmovdqu    yword [rdx + r10 + 32], ymm1
	LONG $0x7f7ea1c4; WORD $0x1254; BYTE $0x40 // vmovdqu    yword [rdx + r10 + 64], ymm2
	LONG $0x7f7ea1c4; WORD $0x125c; BYTE $0x60 // vmovdqu    yword [rdx + r10 + 96], ymm3
	LONG $0x80ea8349                           // sub    r10, -128
	WORD $0x394d; BYTE $0xd3                   // cmp    r11, r10
	JNE  LBB4_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB4_12

LBB4_3:
	WORD $0x2944; BYTE $0xd9 // sub    ecx, r11d
	WORD $0x894d; BYTE $0xd9 // mov    r9, r11
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB4_5

LBB4_4:
	LONG $0x04b60f42; BYTE $0x1f // movzx    eax, byte [rdi + r11]
	LONG $0x1e042a42             // sub    al, byte [rsi + r11]
	LONG $0x1a048842             // mov    byte [rdx + r11], al
	LONG $0x01c38349             // add    r11, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB4_4

LBB4_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB4_12

LBB4_6:
	LONG $0x04b60f42; BYTE $0x1f   // movzx    eax, byte [rdi + r11]
	LONG $0x1e042a42               // sub    al, byte [rsi + r11]
	LONG $0x1a048842               // mov    byte [rdx + r11], al
	LONG $0x44b60f42; WORD $0x011f // movzx    eax, byte [rdi + r11 + 1]
	LONG $0x1e442a42; BYTE $0x01   // sub    al, byte [rsi + r11 + 1]
	LONG $0x1a448842; BYTE $0x01   // mov    byte [rdx + r11 + 1], al
	LONG $0x44b60f42; WORD $0x021f // movzx    eax, byte [rdi + r11 + 2]
	LONG $0x1e442a42; BYTE $0x02   // sub    al, byte [rsi + r11 + 2]
	LONG $0x1a448842; BYTE $0x02   // mov    byte [rdx + r11 + 2], al
	LONG $0x44b60f42; WORD $0x031f // movzx    eax, byte [rdi + r11 + 3]
	LONG $0x1e442a42; BYTE $0x03   // sub    al, byte [rsi + r11 + 3]
	LONG $0x1a448842; BYTE $0x03   // mov    byte [rdx + r11 + 3], al
	LONG $0x04c38349               // add    r11, 4
	WORD $0x394d; BYTE $0xd8       // cmp    r8, r11
	JNE  LBB4_6

LBB4_12:
	VZEROUPPER
	RET

DATA LCDATA1<>+0x000(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA1<>+0x008(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA1<>+0x010(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA1<>+0x018(SB)/8, $0x00ff00ff00ff00ff
GLOBL LCDATA1<>(SB), 8, $32

TEXT 路_uint8_avx2_mul(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX
	LEAQ LCDATA1<>(SB), BP

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB5_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x1ff88349         // cmp    r8, 31
	JA   LBB5_7
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d
	JMP  LBB5_3

LBB5_7:
	LONG $0x020c8d4e             // lea    r9, [rdx + r8]
	LONG $0x07048d4a             // lea    rax, [rdi + r8]
	WORD $0x3948; BYTE $0xd0     // cmp    rax, rdx
	LONG $0xd6970f41             // seta    r14b
	LONG $0x06048d4a             // lea    rax, [rsi + r8]
	WORD $0x3949; BYTE $0xf9     // cmp    r9, rdi
	WORD $0x970f; BYTE $0xd3     // seta    bl
	WORD $0x3948; BYTE $0xd0     // cmp    rax, rdx
	LONG $0xd3970f41             // seta    r11b
	WORD $0x3949; BYTE $0xf1     // cmp    r9, rsi
	LONG $0xd2970f41             // seta    r10b
	WORD $0x3145; BYTE $0xc9     // xor    r9d, r9d
	WORD $0x8441; BYTE $0xde     // test    r14b, bl
	JNE  LBB5_3
	WORD $0x2045; BYTE $0xd3     // and    r11b, r10b
	JNE  LBB5_3
	WORD $0x8941; BYTE $0xca     // mov    r10d, ecx
	LONG $0x1fe28341             // and    r10d, 31
	WORD $0x894d; BYTE $0xc1     // mov    r9, r8
	WORD $0x294d; BYTE $0xd1     // sub    r9, r10
	WORD $0xc031                 // xor    eax, eax
	LONG $0x456ffdc5; BYTE $0x00 // vmovdqa    ymm0, yword 0[rbp] /* [rip + .LCPI5_0] */

LBB5_10:
	LONG $0x0c6ffec5; BYTE $0x07 // vmovdqu    ymm1, yword [rdi + rax]
	LONG $0x146ffec5; BYTE $0x06 // vmovdqu    ymm2, yword [rsi + rax]
	LONG $0xd868f5c5             // vpunpckhbw    ymm3, ymm1, ymm0
	LONG $0xe068edc5             // vpunpckhbw    ymm4, ymm2, ymm0
	LONG $0xdbd5ddc5             // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5             // vpand    ymm3, ymm3, ymm0
	LONG $0xc860f5c5             // vpunpcklbw    ymm1, ymm1, ymm0
	LONG $0xd060edc5             // vpunpcklbw    ymm2, ymm2, ymm0
	LONG $0xc9d5edc5             // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5             // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5             // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x0c7ffec5; BYTE $0x02 // vmovdqu    yword [rdx + rax], ymm1
	LONG $0x20c08348             // add    rax, 32
	WORD $0x3949; BYTE $0xc1     // cmp    r9, rax
	JNE  LBB5_10
	WORD $0x854d; BYTE $0xd2     // test    r10, r10
	JE   LBB5_12

LBB5_3:
	WORD $0x2944; BYTE $0xc9 // sub    ecx, r9d
	WORD $0x894d; BYTE $0xca // mov    r10, r9
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xc2 // add    r10, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB5_5

LBB5_4:
	LONG $0x04b60f42; BYTE $0x0e // movzx    eax, byte [rsi + r9]
	LONG $0x0f24f642             // mul    byte [rdi + r9]
	LONG $0x0a048842             // mov    byte [rdx + r9], al
	LONG $0x01c18349             // add    r9, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB5_4

LBB5_5:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB5_12

LBB5_6:
	LONG $0x04b60f42; BYTE $0x0e   // movzx    eax, byte [rsi + r9]
	LONG $0x0f24f642               // mul    byte [rdi + r9]
	LONG $0x0a048842               // mov    byte [rdx + r9], al
	LONG $0x44b60f42; WORD $0x010e // movzx    eax, byte [rsi + r9 + 1]
	LONG $0x0f64f642; BYTE $0x01   // mul    byte [rdi + r9 + 1]
	LONG $0x0a448842; BYTE $0x01   // mov    byte [rdx + r9 + 1], al
	LONG $0x44b60f42; WORD $0x020e // movzx    eax, byte [rsi + r9 + 2]
	LONG $0x0f64f642; BYTE $0x02   // mul    byte [rdi + r9 + 2]
	LONG $0x0a448842; BYTE $0x02   // mov    byte [rdx + r9 + 2], al
	LONG $0x44b60f42; WORD $0x030e // movzx    eax, byte [rsi + r9 + 3]
	LONG $0x0f64f642; BYTE $0x03   // mul    byte [rdi + r9 + 3]
	LONG $0x0a448842; BYTE $0x03   // mov    byte [rdx + r9 + 3], al
	LONG $0x04c18349               // add    r9, 4
	WORD $0x394d; BYTE $0xc8       // cmp    r8, r9
	JNE  LBB5_6

LBB5_12:
	VZEROUPPER
	RET

TEXT 路_uint8_avx2_div(SB), $80-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX
	ADDQ $8, SP

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB6_12
	WORD $0x8941; BYTE $0xca // mov    r10d, ecx
	LONG $0x1ffa8349         // cmp    r10, 31
	JA   LBB6_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB6_3

LBB6_7:
	LONG $0x121c8d4a             // lea    rbx, [rdx + r10]
	LONG $0x17048d4a             // lea    rax, [rdi + r10]
	WORD $0x3948; BYTE $0xd0     // cmp    rax, rdx
	LONG $0xd0970f41             // seta    r8b
	LONG $0x16048d4a             // lea    rax, [rsi + r10]
	WORD $0x3948; BYTE $0xfb     // cmp    rbx, rdi
	LONG $0xd1970f41             // seta    r9b
	WORD $0x3948; BYTE $0xd0     // cmp    rax, rdx
	WORD $0x970f; BYTE $0xd0     // seta    al
	WORD $0x3948; BYTE $0xf3     // cmp    rbx, rsi
	WORD $0x970f; BYTE $0xd3     // seta    bl
	WORD $0x3145; BYTE $0xdb     // xor    r11d, r11d
	WORD $0x8445; BYTE $0xc8     // test    r8b, r9b
	JNE  LBB6_3
	WORD $0xd820                 // and    al, bl
	JNE  LBB6_3
	LONG $0x244c8948; BYTE $0x38 // mov    qword [rsp + 56], rcx
	WORD $0xe183; BYTE $0x1f     // and    ecx, 31
	LONG $0x2454894c; BYTE $0x40 // mov    qword [rsp + 64], r10
	LONG $0x244c8948; BYTE $0x30 // mov    qword [rsp + 48], rcx
	WORD $0x2949; BYTE $0xca     // sub    r10, rcx
	LONG $0x2454894c; BYTE $0x28 // mov    qword [rsp + 40], r10
	LONG $0x24548948; BYTE $0x20 // mov    qword [rsp + 32], rdx
	LONG $0x24748948; BYTE $0x18 // mov    qword [rsp + 24], rsi
	LONG $0x247c8948; BYTE $0x10 // mov    qword [rsp + 16], rdi
	WORD $0x3145; BYTE $0xed     // xor    r13d, r13d

LBB6_10:
	LONG $0x24448b48; BYTE $0x18               // mov    rax, qword [rsp + 24]
	LONG $0x6f7aa1c4; WORD $0x2814             // vmovdqu    xmm2, oword [rax + r13]
	LONG $0x6f7aa1c4; WORD $0x2844; BYTE $0x10 // vmovdqu    xmm0, oword [rax + r13 + 16]
	LONG $0x1479e3c4; WORD $0x01d1             // vpextrb    ecx, xmm2, 1
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	LONG $0x6f7aa1c4; WORD $0x281c             // vmovdqu    xmm3, oword [rax + r13]
	LONG $0x6f7aa1c4; WORD $0x284c; BYTE $0x10 // vmovdqu    xmm1, oword [rax + r13 + 16]
	LONG $0x1479e3c4; WORD $0x01d8             // vpextrb    eax, xmm3, 1
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf1f6                               // div    cl
	WORD $0xb60f; BYTE $0xc8                   // movzx    ecx, al
	LONG $0x1479e3c4; WORD $0x00d2             // vpextrb    edx, xmm2, 0
	LONG $0x1479e3c4; WORD $0x00d8             // vpextrb    eax, xmm3, 0
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf2f6                               // div    dl
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0xe06ef9c5                           // vmovd    xmm4, eax
	LONG $0x2059e3c4; WORD $0x01e1             // vpinsrb    xmm4, xmm4, ecx, 1
	LONG $0x1479e3c4; WORD $0x02d1             // vpextrb    ecx, xmm2, 2
	LONG $0x1479e3c4; WORD $0x02d8             // vpextrb    eax, xmm3, 2
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf1f6                               // div    cl
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x2059e3c4; WORD $0x02e0             // vpinsrb    xmm4, xmm4, eax, 2
	LONG $0x1479e3c4; WORD $0x03d1             // vpextrb    ecx, xmm2, 3
	LONG $0x1479e3c4; WORD $0x03d8             // vpextrb    eax, xmm3, 3
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf1f6                               // div    cl
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x2059e3c4; WORD $0x03e0             // vpinsrb    xmm4, xmm4, eax, 3
	LONG $0x1479e3c4; WORD $0x04d1             // vpextrb    ecx, xmm2, 4
	LONG $0x1479e3c4; WORD $0x04d8             // vpextrb    eax, xmm3, 4
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf1f6                               // div    cl
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x2059e3c4; WORD $0x04e0             // vpinsrb    xmm4, xmm4, eax, 4
	LONG $0x1479e3c4; WORD $0x05d1             // vpextrb    ecx, xmm2, 5
	LONG $0x1479e3c4; WORD $0x05d8             // vpextrb    eax, xmm3, 5
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf1f6                               // div    cl
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x2059e3c4; WORD $0x05e0             // vpinsrb    xmm4, xmm4, eax, 5
	LONG $0x1479e3c4; WORD $0x06d1             // vpextrb    ecx, xmm2, 6
	LONG $0x1479e3c4; WORD $0x06d8             // vpextrb    eax, xmm3, 6
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf1f6                               // div    cl
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x2059e3c4; WORD $0x06e0             // vpinsrb    xmm4, xmm4, eax, 6
	LONG $0x1479e3c4; WORD $0x07d1             // vpextrb    ecx, xmm2, 7
	LONG $0x1479e3c4; WORD $0x07d8             // vpextrb    eax, xmm3, 7
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf1f6                               // div    cl
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x2059e3c4; WORD $0x07e0             // vpinsrb    xmm4, xmm4, eax, 7
	LONG $0x1479e3c4; WORD $0x08d1             // vpextrb    ecx, xmm2, 8
	LONG $0x1479e3c4; WORD $0x08d8             // vpextrb    eax, xmm3, 8
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf1f6                               // div    cl
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x2059e3c4; WORD $0x08e0             // vpinsrb    xmm4, xmm4, eax, 8
	LONG $0x1479e3c4; WORD $0x09d1             // vpextrb    ecx, xmm2, 9
	LONG $0x1479e3c4; WORD $0x09d8             // vpextrb    eax, xmm3, 9
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf1f6                               // div    cl
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x2059e3c4; WORD $0x09e0             // vpinsrb    xmm4, xmm4, eax, 9
	LONG $0x1479e3c4; WORD $0x0ad1             // vpextrb    ecx, xmm2, 10
	LONG $0x1479e3c4; WORD $0x0ad8             // vpextrb    eax, xmm3, 10
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf1f6                               // div    cl
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x2059e3c4; WORD $0x0ae0             // vpinsrb    xmm4, xmm4, eax, 10
	LONG $0x1479e3c4; WORD $0x0bd1             // vpextrb    ecx, xmm2, 11
	LONG $0x1479e3c4; WORD $0x0bd8             // vpextrb    eax, xmm3, 11
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf1f6                               // div    cl
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x2059e3c4; WORD $0x0be0             // vpinsrb    xmm4, xmm4, eax, 11
	LONG $0x1479e3c4; WORD $0x0cd1             // vpextrb    ecx, xmm2, 12
	LONG $0x1479e3c4; WORD $0x0cd8             // vpextrb    eax, xmm3, 12
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf1f6                               // div    cl
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x2059e3c4; WORD $0x0ce0             // vpinsrb    xmm4, xmm4, eax, 12
	LONG $0x1479e3c4; WORD $0x0dd1             // vpextrb    ecx, xmm2, 13
	LONG $0x1479e3c4; WORD $0x0dd8             // vpextrb    eax, xmm3, 13
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf1f6                               // div    cl
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x2059e3c4; WORD $0x0de0             // vpinsrb    xmm4, xmm4, eax, 13
	LONG $0x1479e3c4; WORD $0x0ed1             // vpextrb    ecx, xmm2, 14
	LONG $0x1479e3c4; WORD $0x0ed8             // vpextrb    eax, xmm3, 14
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf1f6                               // div    cl
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x2059e3c4; WORD $0x0ee0             // vpinsrb    xmm4, xmm4, eax, 14
	LONG $0x1479e3c4; WORD $0x0fd1             // vpextrb    ecx, xmm2, 15
	LONG $0x1479e3c4; WORD $0x0fd8             // vpextrb    eax, xmm3, 15
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf1f6                               // div    cl
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x2059e3c4; WORD $0x0fd0             // vpinsrb    xmm2, xmm4, eax, 15
	LONG $0x1479e3c4; WORD $0x01c1             // vpextrb    ecx, xmm0, 1
	LONG $0x1479e3c4; WORD $0x01c8             // vpextrb    eax, xmm1, 1
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf1f6                               // div    cl
	LONG $0x1479e3c4; WORD $0x00c1             // vpextrb    ecx, xmm0, 0
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x0c244489                           // mov    dword [rsp + 12], eax
	LONG $0x1479e3c4; WORD $0x00c8             // vpextrb    eax, xmm1, 0
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf1f6                               // div    cl
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x08244489                           // mov    dword [rsp + 8], eax
	LONG $0x1479e3c4; WORD $0x02c1             // vpextrb    ecx, xmm0, 2
	LONG $0x1479e3c4; WORD $0x02c8             // vpextrb    eax, xmm1, 2
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf1f6                               // div    cl
	LONG $0x1479e3c4; WORD $0x03c1             // vpextrb    ecx, xmm0, 3
	LONG $0x1479e3c4; WORD $0x03ca             // vpextrb    edx, xmm1, 3
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x04244489                           // mov    dword [rsp + 4], eax
	WORD $0xb60f; BYTE $0xc2                   // movzx    eax, dl
	WORD $0xf1f6                               // div    cl
	LONG $0xf8b60f44                           // movzx    r15d, al
	LONG $0x1479e3c4; WORD $0x04c1             // vpextrb    ecx, xmm0, 4
	LONG $0x1479e3c4; WORD $0x04c8             // vpextrb    eax, xmm1, 4
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf1f6                               // div    cl
	LONG $0x1479e3c4; WORD $0x05c1             // vpextrb    ecx, xmm0, 5
	LONG $0xf0b60f44                           // movzx    r14d, al
	LONG $0x1479e3c4; WORD $0x05c8             // vpextrb    eax, xmm1, 5
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf1f6                               // div    cl
	LONG $0xd8b60f44                           // movzx    r11d, al
	LONG $0x1479e3c4; WORD $0x06c1             // vpextrb    ecx, xmm0, 6
	LONG $0x1479e3c4; WORD $0x06c8             // vpextrb    eax, xmm1, 6
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf1f6                               // div    cl
	LONG $0x1479e3c4; WORD $0x07c1             // vpextrb    ecx, xmm0, 7
	LONG $0x1479e3c4; WORD $0x07ca             // vpextrb    edx, xmm1, 7
	WORD $0xb60f; BYTE $0xf8                   // movzx    edi, al
	WORD $0xb60f; BYTE $0xc2                   // movzx    eax, dl
	WORD $0xf1f6                               // div    cl
	LONG $0xe0b60f44                           // movzx    r12d, al
	LONG $0x1479e3c4; WORD $0x08c1             // vpextrb    ecx, xmm0, 8
	LONG $0x1479e3c4; WORD $0x08c8             // vpextrb    eax, xmm1, 8
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf1f6                               // div    cl
	LONG $0x1479e3c4; WORD $0x09c1             // vpextrb    ecx, xmm0, 9
	WORD $0xb60f; BYTE $0xf0                   // movzx    esi, al
	LONG $0x1479e3c4; WORD $0x09c8             // vpextrb    eax, xmm1, 9
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf1f6                               // div    cl
	WORD $0xb60f; BYTE $0xd0                   // movzx    edx, al
	LONG $0x1479e3c4; WORD $0x0ac1             // vpextrb    ecx, xmm0, 10
	LONG $0x1479e3c4; WORD $0x0ac8             // vpextrb    eax, xmm1, 10
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf1f6                               // div    cl
	LONG $0x1479c3c4; WORD $0x0bc0             // vpextrb    r8d, xmm0, 11
	LONG $0x1479e3c4; WORD $0x0bcb             // vpextrb    ebx, xmm1, 11
	WORD $0xb60f; BYTE $0xc8                   // movzx    ecx, al
	WORD $0xb60f; BYTE $0xc3                   // movzx    eax, bl
	LONG $0x1479e3c4; WORD $0x0ccb             // vpextrb    ebx, xmm1, 12
	WORD $0xf641; BYTE $0xf0                   // div    r8b
	WORD $0x8941; BYTE $0xc0                   // mov    r8d, eax
	WORD $0xb60f; BYTE $0xc3                   // movzx    eax, bl
	LONG $0x1479e3c4; WORD $0x0cc3             // vpextrb    ebx, xmm0, 12
	WORD $0xf3f6                               // div    bl
	WORD $0x8941; BYTE $0xc1                   // mov    r9d, eax
	LONG $0x1479e3c4; WORD $0x0dc8             // vpextrb    eax, xmm1, 13
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x1479e3c4; WORD $0x0dc3             // vpextrb    ebx, xmm0, 13
	WORD $0xf3f6                               // div    bl
	WORD $0x8941; BYTE $0xc2                   // mov    r10d, eax
	LONG $0x5c6ef9c5; WORD $0x0824             // vmovd    xmm3, dword [rsp + 8]
	LONG $0xc0b60f45                           // movzx    r8d, r8b
	LONG $0x1479e3c4; WORD $0x0ec8             // vpextrb    eax, xmm1, 14
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0xc9b60f45                           // movzx    r9d, r9b
	LONG $0x1479e3c4; WORD $0x0ec3             // vpextrb    ebx, xmm0, 14
	WORD $0xf3f6                               // div    bl
	QUAD $0x010c245c2061e3c4                   // vpinsrb    xmm3, xmm3, byte [rsp + 12], 1
	QUAD $0x0204245c2061e3c4                   // vpinsrb    xmm3, xmm3, byte [rsp + 4], 2
	LONG $0x2061c3c4; WORD $0x03df             // vpinsrb    xmm3, xmm3, r15d, 3
	LONG $0x2061c3c4; WORD $0x04de             // vpinsrb    xmm3, xmm3, r14d, 4
	LONG $0x2061c3c4; WORD $0x05db             // vpinsrb    xmm3, xmm3, r11d, 5
	LONG $0x2061e3c4; WORD $0x06df             // vpinsrb    xmm3, xmm3, edi, 6
	LONG $0x2061c3c4; WORD $0x07dc             // vpinsrb    xmm3, xmm3, r12d, 7
	LONG $0x2061e3c4; WORD $0x08de             // vpinsrb    xmm3, xmm3, esi, 8
	LONG $0x2061e3c4; WORD $0x09da             // vpinsrb    xmm3, xmm3, edx, 9
	LONG $0x2061e3c4; WORD $0x0ad9             // vpinsrb    xmm3, xmm3, ecx, 10
	LONG $0x2061c3c4; WORD $0x0bd8             // vpinsrb    xmm3, xmm3, r8d, 11
	LONG $0x2061c3c4; WORD $0x0cd9             // vpinsrb    xmm3, xmm3, r9d, 12
	LONG $0xcab60f41                           // movzx    ecx, r10b
	LONG $0x2061e3c4; WORD $0x0dd9             // vpinsrb    xmm3, xmm3, ecx, 13
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x2061e3c4; WORD $0x0ed8             // vpinsrb    xmm3, xmm3, eax, 14
	LONG $0x1479e3c4; WORD $0x0fc1             // vpextrb    ecx, xmm0, 15
	LONG $0x1479e3c4; WORD $0x0fc8             // vpextrb    eax, xmm1, 15
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	WORD $0xf1f6                               // div    cl
	WORD $0xb60f; BYTE $0xc0                   // movzx    eax, al
	LONG $0x2061e3c4; WORD $0x0fc0             // vpinsrb    xmm0, xmm3, eax, 15
	LONG $0x24448b48; BYTE $0x20               // mov    rax, qword [rsp + 32]
	LONG $0x7f7aa1c4; WORD $0x2844; BYTE $0x10 // vmovdqu    oword [rax + r13 + 16], xmm0
	LONG $0x7f7aa1c4; WORD $0x2814             // vmovdqu    oword [rax + r13], xmm2
	LONG $0x20c58349                           // add    r13, 32
	LONG $0x246c394c; BYTE $0x28               // cmp    qword [rsp + 40], r13
	JNE  LBB6_10
	LONG $0x247c8348; WORD $0x0030             // cmp    qword [rsp + 48], 0
	LONG $0x24548b48; BYTE $0x20               // mov    rdx, qword [rsp + 32]
	LONG $0x24748b48; BYTE $0x18               // mov    rsi, qword [rsp + 24]
	LONG $0x247c8b48; BYTE $0x10               // mov    rdi, qword [rsp + 16]
	LONG $0x24548b4c; BYTE $0x40               // mov    r10, qword [rsp + 64]
	LONG $0x244c8b48; BYTE $0x38               // mov    rcx, qword [rsp + 56]
	LONG $0x245c8b4c; BYTE $0x28               // mov    r11, qword [rsp + 40]
	JE   LBB6_12

LBB6_3:
	WORD $0x2944; BYTE $0xd9     // sub    ecx, r11d
	WORD $0x894c; BYTE $0xdb     // mov    rbx, r11
	WORD $0xc1f6; BYTE $0x01     // test    cl, 1
	JE   LBB6_5
	LONG $0x04b60f42; BYTE $0x1f // movzx    eax, byte [rdi + r11]
	LONG $0x1e34f642             // div    byte [rsi + r11]
	LONG $0x1a048842             // mov    byte [rdx + r11], al
	LONG $0x015b8d49             // lea    rbx, [r11 + 1]

LBB6_5:
	LONG $0x01c38349         // add    r11, 1
	WORD $0x394d; BYTE $0xda // cmp    r10, r11
	JE   LBB6_12

LBB6_6:
	LONG $0x1f04b60f             // movzx    eax, byte [rdi + rbx]
	WORD $0x34f6; BYTE $0x1e     // div    byte [rsi + rbx]
	WORD $0x0488; BYTE $0x1a     // mov    byte [rdx + rbx], al
	LONG $0x1f44b60f; BYTE $0x01 // movzx    eax, byte [rdi + rbx + 1]
	LONG $0x011e74f6             // div    byte [rsi + rbx + 1]
	LONG $0x011a4488             // mov    byte [rdx + rbx + 1], al
	LONG $0x02c38348             // add    rbx, 2
	WORD $0x3949; BYTE $0xda     // cmp    r10, rbx
	JNE  LBB6_6

LBB6_12:
	SUBQ $8, SP
	RET

TEXT 路_uint16_avx2_sum(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB7_1
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0x3ff88349         // cmp    r8, 63
	JA   LBB7_4
	WORD $0xc931             // xor    ecx, ecx
	WORD $0xc031             // xor    eax, eax
	JMP  LBB7_7

LBB7_1:
	WORD $0xc031 // xor    eax, eax
	JMP  LBB7_8

LBB7_4:
	WORD $0xe283; BYTE $0x3f // and    edx, 63
	WORD $0x894c; BYTE $0xc1 // mov    rcx, r8
	WORD $0x2948; BYTE $0xd1 // sub    rcx, rdx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0
	WORD $0xc031             // xor    eax, eax
	LONG $0xc9eff1c5         // vpxor    xmm1, xmm1, xmm1
	LONG $0xd2efe9c5         // vpxor    xmm2, xmm2, xmm2
	LONG $0xdbefe1c5         // vpxor    xmm3, xmm3, xmm3

LBB7_5:
	LONG $0x04fdfdc5; BYTE $0x47   // vpaddw    ymm0, ymm0, yword [rdi + 2*rax]
	LONG $0x4cfdf5c5; WORD $0x2047 // vpaddw    ymm1, ymm1, yword [rdi + 2*rax + 32]
	LONG $0x54fdedc5; WORD $0x4047 // vpaddw    ymm2, ymm2, yword [rdi + 2*rax + 64]
	LONG $0x5cfde5c5; WORD $0x6047 // vpaddw    ymm3, ymm3, yword [rdi + 2*rax + 96]
	LONG $0x40c08348               // add    rax, 64
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JNE  LBB7_5
	LONG $0xc0fdf5c5               // vpaddw    ymm0, ymm1, ymm0
	LONG $0xc0fdedc5               // vpaddw    ymm0, ymm2, ymm0
	LONG $0xc0fde5c5               // vpaddw    ymm0, ymm3, ymm0
	LONG $0x397de3c4; WORD $0x01c1 // vextracti128    xmm1, ymm0, 1
	LONG $0xc1fdf9c5               // vpaddw    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0x4e   // vpshufd    xmm1, xmm0, 78
	LONG $0xc1fdf9c5               // vpaddw    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0xe5   // vpshufd    xmm1, xmm0, 229
	LONG $0xc1fdf9c5               // vpaddw    xmm0, xmm0, xmm1
	LONG $0xd072f1c5; BYTE $0x10   // vpsrld    xmm1, xmm0, 16
	LONG $0xc1fdf9c5               // vpaddw    xmm0, xmm0, xmm1
	LONG $0xc07ef9c5               // vmovd    eax, xmm0
	WORD $0x8548; BYTE $0xd2       // test    rdx, rdx
	JE   LBB7_8

LBB7_7:
	LONG $0x4f040366         // add    ax, word [rdi + 2*rcx]
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc8 // cmp    r8, rcx
	JNE  LBB7_7

LBB7_8:
	WORD $0x8966; BYTE $0x06 // mov    word [rsi], ax
	VZEROUPPER
	RET

TEXT 路_uint16_avx2_min(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	WORD $0xb70f; BYTE $0x07     // movzx    eax, word [rdi]
	WORD $0xd285                 // test    edx, edx
	JLE  LBB8_7
	WORD $0x8941; BYTE $0xd1     // mov    r9d, edx
	LONG $0x01f98349             // cmp    r9, 1
	JE   LBB8_7
	LONG $0xff418d4d             // lea    r8, [r9 - 1]
	LONG $0x000001b9; BYTE $0x00 // mov    ecx, 1
	LONG $0x3ff88349             // cmp    r8, 63
	JBE  LBB8_6
	WORD $0x894c; BYTE $0xc2     // mov    rdx, r8
	LONG $0xc0e28348             // and    rdx, -64
	LONG $0x014a8d48             // lea    rcx, [rdx + 1]
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	WORD $0xc031                 // xor    eax, eax
	LONG $0xc86ffdc5             // vmovdqa    ymm1, ymm0
	LONG $0xd06ffdc5             // vmovdqa    ymm2, ymm0
	LONG $0xd86ffdc5             // vmovdqa    ymm3, ymm0

LBB8_4:
	LONG $0x3a7de2c4; WORD $0x4744; BYTE $0x02 // vpminuw    ymm0, ymm0, yword [rdi + 2*rax + 2]
	LONG $0x3a75e2c4; WORD $0x474c; BYTE $0x22 // vpminuw    ymm1, ymm1, yword [rdi + 2*rax + 34]
	LONG $0x3a6de2c4; WORD $0x4754; BYTE $0x42 // vpminuw    ymm2, ymm2, yword [rdi + 2*rax + 66]
	LONG $0x3a65e2c4; WORD $0x475c; BYTE $0x62 // vpminuw    ymm3, ymm3, yword [rdi + 2*rax + 98]
	LONG $0x40c08348                           // add    rax, 64
	WORD $0x3948; BYTE $0xc2                   // cmp    rdx, rax
	JNE  LBB8_4
	LONG $0x3a7de2c4; BYTE $0xc1               // vpminuw    ymm0, ymm0, ymm1
	LONG $0x3a7de2c4; BYTE $0xc2               // vpminuw    ymm0, ymm0, ymm2
	LONG $0x3a7de2c4; BYTE $0xc3               // vpminuw    ymm0, ymm0, ymm3
	LONG $0x397de3c4; WORD $0x01c1             // vextracti128    xmm1, ymm0, 1
	LONG $0x3a79e2c4; BYTE $0xc1               // vpminuw    xmm0, xmm0, xmm1
	LONG $0x4179e2c4; BYTE $0xc0               // vphminposuw    xmm0, xmm0
	LONG $0xc07ef9c5                           // vmovd    eax, xmm0
	WORD $0x3949; BYTE $0xd0                   // cmp    r8, rdx
	JE   LBB8_7

LBB8_6:
	LONG $0x4f14b70f         // movzx    edx, word [rdi + 2*rcx]
	WORD $0x3966; BYTE $0xc2 // cmp    dx, ax
	WORD $0x420f; BYTE $0xc2 // cmovb    eax, edx
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB8_6

LBB8_7:
	WORD $0x8966; BYTE $0x06 // mov    word [rsi], ax
	VZEROUPPER
	RET

TEXT 路_uint16_avx2_max(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	WORD $0xb70f; BYTE $0x07     // movzx    eax, word [rdi]
	WORD $0xd285                 // test    edx, edx
	JLE  LBB9_7
	WORD $0x8941; BYTE $0xd1     // mov    r9d, edx
	LONG $0x01f98349             // cmp    r9, 1
	JE   LBB9_7
	LONG $0xff418d4d             // lea    r8, [r9 - 1]
	LONG $0x000001b9; BYTE $0x00 // mov    ecx, 1
	LONG $0x3ff88349             // cmp    r8, 63
	JBE  LBB9_6
	WORD $0x894c; BYTE $0xc2     // mov    rdx, r8
	LONG $0xc0e28348             // and    rdx, -64
	LONG $0x014a8d48             // lea    rcx, [rdx + 1]
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	WORD $0xc031                 // xor    eax, eax
	LONG $0xc86ffdc5             // vmovdqa    ymm1, ymm0
	LONG $0xd06ffdc5             // vmovdqa    ymm2, ymm0
	LONG $0xd86ffdc5             // vmovdqa    ymm3, ymm0

LBB9_4:
	LONG $0x3e7de2c4; WORD $0x4744; BYTE $0x02 // vpmaxuw    ymm0, ymm0, yword [rdi + 2*rax + 2]
	LONG $0x3e75e2c4; WORD $0x474c; BYTE $0x22 // vpmaxuw    ymm1, ymm1, yword [rdi + 2*rax + 34]
	LONG $0x3e6de2c4; WORD $0x4754; BYTE $0x42 // vpmaxuw    ymm2, ymm2, yword [rdi + 2*rax + 66]
	LONG $0x3e65e2c4; WORD $0x475c; BYTE $0x62 // vpmaxuw    ymm3, ymm3, yword [rdi + 2*rax + 98]
	LONG $0x40c08348                           // add    rax, 64
	WORD $0x3948; BYTE $0xc2                   // cmp    rdx, rax
	JNE  LBB9_4
	LONG $0x3e7de2c4; BYTE $0xc1               // vpmaxuw    ymm0, ymm0, ymm1
	LONG $0x3e7de2c4; BYTE $0xc2               // vpmaxuw    ymm0, ymm0, ymm2
	LONG $0x3e7de2c4; BYTE $0xc3               // vpmaxuw    ymm0, ymm0, ymm3
	LONG $0x397de3c4; WORD $0x01c1             // vextracti128    xmm1, ymm0, 1
	LONG $0x3e79e2c4; BYTE $0xc1               // vpmaxuw    xmm0, xmm0, xmm1
	LONG $0xc976f1c5                           // vpcmpeqd    xmm1, xmm1, xmm1
	LONG $0xc1eff9c5                           // vpxor    xmm0, xmm0, xmm1
	LONG $0x4179e2c4; BYTE $0xc0               // vphminposuw    xmm0, xmm0
	LONG $0xc07ef9c5                           // vmovd    eax, xmm0
	WORD $0xd0f7                               // not    eax
	WORD $0x3949; BYTE $0xd0                   // cmp    r8, rdx
	JE   LBB9_7

LBB9_6:
	LONG $0x4f14b70f         // movzx    edx, word [rdi + 2*rcx]
	WORD $0x3966; BYTE $0xc2 // cmp    dx, ax
	WORD $0x470f; BYTE $0xc2 // cmova    eax, edx
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB9_6

LBB9_7:
	WORD $0x8966; BYTE $0x06 // mov    word [rsi], ax
	VZEROUPPER
	RET

TEXT 路_uint16_avx2_add(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB10_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x3ff88349         // cmp    r8, 63
	JA   LBB10_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB10_3

LBB10_7:
	LONG $0x42148d4e         // lea    r10, [rdx + 2*r8]
	LONG $0x47048d4a         // lea    rax, [rdi + 2*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd6970f41         // seta    r14b
	LONG $0x46048d4a         // lea    rax, [rsi + 2*r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB10_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB10_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x3fe18341         // and    r9d, 63
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x294d; BYTE $0xcb // sub    r11, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB10_10:
	LONG $0x6f7ea1c4; WORD $0x5604             // vmovdqu    ymm0, yword [rsi + 2*r10]
	LONG $0x6f7ea1c4; WORD $0x564c; BYTE $0x20 // vmovdqu    ymm1, yword [rsi + 2*r10 + 32]
	LONG $0x6f7ea1c4; WORD $0x5654; BYTE $0x40 // vmovdqu    ymm2, yword [rsi + 2*r10 + 64]
	LONG $0x6f7ea1c4; WORD $0x565c; BYTE $0x60 // vmovdqu    ymm3, yword [rsi + 2*r10 + 96]
	LONG $0xfd7da1c4; WORD $0x5704             // vpaddw    ymm0, ymm0, yword [rdi + 2*r10]
	LONG $0xfd75a1c4; WORD $0x574c; BYTE $0x20 // vpaddw    ymm1, ymm1, yword [rdi + 2*r10 + 32]
	LONG $0xfd6da1c4; WORD $0x5754; BYTE $0x40 // vpaddw    ymm2, ymm2, yword [rdi + 2*r10 + 64]
	LONG $0xfd65a1c4; WORD $0x575c; BYTE $0x60 // vpaddw    ymm3, ymm3, yword [rdi + 2*r10 + 96]
	LONG $0x7f7ea1c4; WORD $0x5204             // vmovdqu    yword [rdx + 2*r10], ymm0
	LONG $0x7f7ea1c4; WORD $0x524c; BYTE $0x20 // vmovdqu    yword [rdx + 2*r10 + 32], ymm1
	LONG $0x7f7ea1c4; WORD $0x5254; BYTE $0x40 // vmovdqu    yword [rdx + 2*r10 + 64], ymm2
	LONG $0x7f7ea1c4; WORD $0x525c; BYTE $0x60 // vmovdqu    yword [rdx + 2*r10 + 96], ymm3
	LONG $0x40c28349                           // add    r10, 64
	WORD $0x394d; BYTE $0xd3                   // cmp    r11, r10
	JNE  LBB10_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB10_12

LBB10_3:
	WORD $0x2944; BYTE $0xd9 // sub    ecx, r11d
	WORD $0x894d; BYTE $0xd9 // mov    r9, r11
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB10_5

LBB10_4:
	LONG $0x04b70f42; BYTE $0x5e // movzx    eax, word [rsi + 2*r11]
	LONG $0x04034266; BYTE $0x5f // add    ax, word [rdi + 2*r11]
	LONG $0x04894266; BYTE $0x5a // mov    word [rdx + 2*r11], ax
	LONG $0x01c38349             // add    r11, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB10_4

LBB10_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB10_12

LBB10_6:
	LONG $0x04b70f42; BYTE $0x5e   // movzx    eax, word [rsi + 2*r11]
	LONG $0x04034266; BYTE $0x5f   // add    ax, word [rdi + 2*r11]
	LONG $0x04894266; BYTE $0x5a   // mov    word [rdx + 2*r11], ax
	LONG $0x44b70f42; WORD $0x025e // movzx    eax, word [rsi + 2*r11 + 2]
	LONG $0x44034266; WORD $0x025f // add    ax, word [rdi + 2*r11 + 2]
	LONG $0x44894266; WORD $0x025a // mov    word [rdx + 2*r11 + 2], ax
	LONG $0x44b70f42; WORD $0x045e // movzx    eax, word [rsi + 2*r11 + 4]
	LONG $0x44034266; WORD $0x045f // add    ax, word [rdi + 2*r11 + 4]
	LONG $0x44894266; WORD $0x045a // mov    word [rdx + 2*r11 + 4], ax
	LONG $0x44b70f42; WORD $0x065e // movzx    eax, word [rsi + 2*r11 + 6]
	LONG $0x44034266; WORD $0x065f // add    ax, word [rdi + 2*r11 + 6]
	LONG $0x44894266; WORD $0x065a // mov    word [rdx + 2*r11 + 6], ax
	LONG $0x04c38349               // add    r11, 4
	WORD $0x394d; BYTE $0xd8       // cmp    r8, r11
	JNE  LBB10_6

LBB10_12:
	VZEROUPPER
	RET

TEXT 路_uint16_avx2_sub(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB11_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x3ff88349         // cmp    r8, 63
	JA   LBB11_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB11_3

LBB11_7:
	LONG $0x42148d4e         // lea    r10, [rdx + 2*r8]
	LONG $0x47048d4a         // lea    rax, [rdi + 2*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd6970f41         // seta    r14b
	LONG $0x46048d4a         // lea    rax, [rsi + 2*r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB11_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB11_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x3fe18341         // and    r9d, 63
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x294d; BYTE $0xcb // sub    r11, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB11_10:
	LONG $0x6f7ea1c4; WORD $0x5704             // vmovdqu    ymm0, yword [rdi + 2*r10]
	LONG $0x6f7ea1c4; WORD $0x574c; BYTE $0x20 // vmovdqu    ymm1, yword [rdi + 2*r10 + 32]
	LONG $0x6f7ea1c4; WORD $0x5754; BYTE $0x40 // vmovdqu    ymm2, yword [rdi + 2*r10 + 64]
	LONG $0x6f7ea1c4; WORD $0x575c; BYTE $0x60 // vmovdqu    ymm3, yword [rdi + 2*r10 + 96]
	LONG $0xf97da1c4; WORD $0x5604             // vpsubw    ymm0, ymm0, yword [rsi + 2*r10]
	LONG $0xf975a1c4; WORD $0x564c; BYTE $0x20 // vpsubw    ymm1, ymm1, yword [rsi + 2*r10 + 32]
	LONG $0xf96da1c4; WORD $0x5654; BYTE $0x40 // vpsubw    ymm2, ymm2, yword [rsi + 2*r10 + 64]
	LONG $0xf965a1c4; WORD $0x565c; BYTE $0x60 // vpsubw    ymm3, ymm3, yword [rsi + 2*r10 + 96]
	LONG $0x7f7ea1c4; WORD $0x5204             // vmovdqu    yword [rdx + 2*r10], ymm0
	LONG $0x7f7ea1c4; WORD $0x524c; BYTE $0x20 // vmovdqu    yword [rdx + 2*r10 + 32], ymm1
	LONG $0x7f7ea1c4; WORD $0x5254; BYTE $0x40 // vmovdqu    yword [rdx + 2*r10 + 64], ymm2
	LONG $0x7f7ea1c4; WORD $0x525c; BYTE $0x60 // vmovdqu    yword [rdx + 2*r10 + 96], ymm3
	LONG $0x40c28349                           // add    r10, 64
	WORD $0x394d; BYTE $0xd3                   // cmp    r11, r10
	JNE  LBB11_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB11_12

LBB11_3:
	WORD $0x2944; BYTE $0xd9 // sub    ecx, r11d
	WORD $0x894d; BYTE $0xd9 // mov    r9, r11
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB11_5

LBB11_4:
	LONG $0x04b70f42; BYTE $0x5f // movzx    eax, word [rdi + 2*r11]
	LONG $0x042b4266; BYTE $0x5e // sub    ax, word [rsi + 2*r11]
	LONG $0x04894266; BYTE $0x5a // mov    word [rdx + 2*r11], ax
	LONG $0x01c38349             // add    r11, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB11_4

LBB11_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB11_12

LBB11_6:
	LONG $0x04b70f42; BYTE $0x5f   // movzx    eax, word [rdi + 2*r11]
	LONG $0x042b4266; BYTE $0x5e   // sub    ax, word [rsi + 2*r11]
	LONG $0x04894266; BYTE $0x5a   // mov    word [rdx + 2*r11], ax
	LONG $0x44b70f42; WORD $0x025f // movzx    eax, word [rdi + 2*r11 + 2]
	LONG $0x442b4266; WORD $0x025e // sub    ax, word [rsi + 2*r11 + 2]
	LONG $0x44894266; WORD $0x025a // mov    word [rdx + 2*r11 + 2], ax
	LONG $0x44b70f42; WORD $0x045f // movzx    eax, word [rdi + 2*r11 + 4]
	LONG $0x442b4266; WORD $0x045e // sub    ax, word [rsi + 2*r11 + 4]
	LONG $0x44894266; WORD $0x045a // mov    word [rdx + 2*r11 + 4], ax
	LONG $0x44b70f42; WORD $0x065f // movzx    eax, word [rdi + 2*r11 + 6]
	LONG $0x442b4266; WORD $0x065e // sub    ax, word [rsi + 2*r11 + 6]
	LONG $0x44894266; WORD $0x065a // mov    word [rdx + 2*r11 + 6], ax
	LONG $0x04c38349               // add    r11, 4
	WORD $0x394d; BYTE $0xd8       // cmp    r8, r11
	JNE  LBB11_6

LBB11_12:
	VZEROUPPER
	RET

TEXT 路_uint16_avx2_mul(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB12_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x3ff88349         // cmp    r8, 63
	JA   LBB12_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB12_3

LBB12_7:
	LONG $0x42148d4e         // lea    r10, [rdx + 2*r8]
	LONG $0x47048d4a         // lea    rax, [rdi + 2*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd6970f41         // seta    r14b
	LONG $0x46048d4a         // lea    rax, [rsi + 2*r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB12_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB12_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x3fe18341         // and    r9d, 63
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x294d; BYTE $0xcb // sub    r11, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB12_10:
	LONG $0x6f7ea1c4; WORD $0x5604             // vmovdqu    ymm0, yword [rsi + 2*r10]
	LONG $0x6f7ea1c4; WORD $0x564c; BYTE $0x20 // vmovdqu    ymm1, yword [rsi + 2*r10 + 32]
	LONG $0x6f7ea1c4; WORD $0x5654; BYTE $0x40 // vmovdqu    ymm2, yword [rsi + 2*r10 + 64]
	LONG $0x6f7ea1c4; WORD $0x565c; BYTE $0x60 // vmovdqu    ymm3, yword [rsi + 2*r10 + 96]
	LONG $0xd57da1c4; WORD $0x5704             // vpmullw    ymm0, ymm0, yword [rdi + 2*r10]
	LONG $0xd575a1c4; WORD $0x574c; BYTE $0x20 // vpmullw    ymm1, ymm1, yword [rdi + 2*r10 + 32]
	LONG $0xd56da1c4; WORD $0x5754; BYTE $0x40 // vpmullw    ymm2, ymm2, yword [rdi + 2*r10 + 64]
	LONG $0xd565a1c4; WORD $0x575c; BYTE $0x60 // vpmullw    ymm3, ymm3, yword [rdi + 2*r10 + 96]
	LONG $0x7f7ea1c4; WORD $0x5204             // vmovdqu    yword [rdx + 2*r10], ymm0
	LONG $0x7f7ea1c4; WORD $0x524c; BYTE $0x20 // vmovdqu    yword [rdx + 2*r10 + 32], ymm1
	LONG $0x7f7ea1c4; WORD $0x5254; BYTE $0x40 // vmovdqu    yword [rdx + 2*r10 + 64], ymm2
	LONG $0x7f7ea1c4; WORD $0x525c; BYTE $0x60 // vmovdqu    yword [rdx + 2*r10 + 96], ymm3
	LONG $0x40c28349                           // add    r10, 64
	WORD $0x394d; BYTE $0xd3                   // cmp    r11, r10
	JNE  LBB12_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB12_12

LBB12_3:
	WORD $0x2944; BYTE $0xd9 // sub    ecx, r11d
	WORD $0x894d; BYTE $0xd9 // mov    r9, r11
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB12_5

LBB12_4:
	LONG $0x04b70f42; BYTE $0x5e   // movzx    eax, word [rsi + 2*r11]
	LONG $0xaf0f4266; WORD $0x5f04 // imul    ax, word [rdi + 2*r11]
	LONG $0x04894266; BYTE $0x5a   // mov    word [rdx + 2*r11], ax
	LONG $0x01c38349               // add    r11, 1
	LONG $0xffc18348               // add    rcx, -1
	JNE  LBB12_4

LBB12_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB12_12

LBB12_6:
	LONG $0x04b70f42; BYTE $0x5e               // movzx    eax, word [rsi + 2*r11]
	LONG $0xaf0f4266; WORD $0x5f04             // imul    ax, word [rdi + 2*r11]
	LONG $0x04894266; BYTE $0x5a               // mov    word [rdx + 2*r11], ax
	LONG $0x44b70f42; WORD $0x025e             // movzx    eax, word [rsi + 2*r11 + 2]
	LONG $0xaf0f4266; WORD $0x5f44; BYTE $0x02 // imul    ax, word [rdi + 2*r11 + 2]
	LONG $0x44894266; WORD $0x025a             // mov    word [rdx + 2*r11 + 2], ax
	LONG $0x44b70f42; WORD $0x045e             // movzx    eax, word [rsi + 2*r11 + 4]
	LONG $0xaf0f4266; WORD $0x5f44; BYTE $0x04 // imul    ax, word [rdi + 2*r11 + 4]
	LONG $0x44894266; WORD $0x045a             // mov    word [rdx + 2*r11 + 4], ax
	LONG $0x44b70f42; WORD $0x065e             // movzx    eax, word [rsi + 2*r11 + 6]
	LONG $0xaf0f4266; WORD $0x5f44; BYTE $0x06 // imul    ax, word [rdi + 2*r11 + 6]
	LONG $0x44894266; WORD $0x065a             // mov    word [rdx + 2*r11 + 6], ax
	LONG $0x04c38349                           // add    r11, 4
	WORD $0x394d; BYTE $0xd8                   // cmp    r8, r11
	JNE  LBB12_6

LBB12_12:
	VZEROUPPER
	RET

TEXT 路_uint16_avx2_div(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB13_12
	WORD $0x8949; BYTE $0xd0 // mov    r8, rdx
	WORD $0x8941; BYTE $0xca // mov    r10d, ecx
	LONG $0x0ffa8349         // cmp    r10, 15
	JA   LBB13_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB13_3

LBB13_7:
	LONG $0x50148d4b         // lea    rdx, [r8 + 2*r10]
	LONG $0x57048d4a         // lea    rax, [rdi + 2*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x56048d4a         // lea    rax, [rsi + 2*r10]
	WORD $0x3948; BYTE $0xfa // cmp    rdx, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xf2 // cmp    rdx, rsi
	WORD $0x970f; BYTE $0xd2 // seta    dl
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	WORD $0x8441; BYTE $0xd9 // test    r9b, bl
	JNE  LBB13_3
	WORD $0xd020             // and    al, dl
	JNE  LBB13_3
	WORD $0x8941; BYTE $0xce // mov    r14d, ecx
	LONG $0x0fe68341         // and    r14d, 15
	WORD $0x894d; BYTE $0xd3 // mov    r11, r10
	WORD $0x294d; BYTE $0xf3 // sub    r11, r14
	WORD $0x3145; BYTE $0xff // xor    r15d, r15d

LBB13_10:
	LONG $0x6f7aa1c4; WORD $0x7f14             // vmovdqu    xmm2, oword [rdi + 2*r15]
	LONG $0xc2c5f9c5; BYTE $0x01               // vpextrw    eax, xmm2, 1
	LONG $0x6f7aa1c4; WORD $0x7f44; BYTE $0x10 // vmovdqu    xmm0, oword [rdi + 2*r15 + 16]
	LONG $0x6f7aa1c4; WORD $0x7e1c             // vmovdqu    xmm3, oword [rsi + 2*r15]
	LONG $0xdbc5f9c5; BYTE $0x01               // vpextrw    ebx, xmm3, 1
	LONG $0x6f7aa1c4; WORD $0x7e4c; BYTE $0x10 // vmovdqu    xmm1, oword [rsi + 2*r15 + 16]
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf766; BYTE $0xf3                   // div    bx
	WORD $0x8941; BYTE $0xc1                   // mov    r9d, eax
	LONG $0xd07ef9c5                           // vmovd    eax, xmm2
	LONG $0xdb7ef9c5                           // vmovd    ebx, xmm3
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf766; BYTE $0xf3                   // div    bx
	LONG $0xe06ef9c5                           // vmovd    xmm4, eax
	LONG $0xc459c1c4; WORD $0x01e1             // vpinsrw    xmm4, xmm4, r9d, 1
	LONG $0xc2c5f9c5; BYTE $0x02               // vpextrw    eax, xmm2, 2
	LONG $0xdbc5f9c5; BYTE $0x02               // vpextrw    ebx, xmm3, 2
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf766; BYTE $0xf3                   // div    bx
	LONG $0xe0c4d9c5; BYTE $0x02               // vpinsrw    xmm4, xmm4, eax, 2
	LONG $0xc2c5f9c5; BYTE $0x03               // vpextrw    eax, xmm2, 3
	LONG $0xdbc5f9c5; BYTE $0x03               // vpextrw    ebx, xmm3, 3
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf766; BYTE $0xf3                   // div    bx
	LONG $0xe0c4d9c5; BYTE $0x03               // vpinsrw    xmm4, xmm4, eax, 3
	LONG $0xc2c5f9c5; BYTE $0x04               // vpextrw    eax, xmm2, 4
	LONG $0xdbc5f9c5; BYTE $0x04               // vpextrw    ebx, xmm3, 4
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf766; BYTE $0xf3                   // div    bx
	LONG $0xe0c4d9c5; BYTE $0x04               // vpinsrw    xmm4, xmm4, eax, 4
	LONG $0xc2c5f9c5; BYTE $0x05               // vpextrw    eax, xmm2, 5
	LONG $0xdbc5f9c5; BYTE $0x05               // vpextrw    ebx, xmm3, 5
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf766; BYTE $0xf3                   // div    bx
	LONG $0xe0c4d9c5; BYTE $0x05               // vpinsrw    xmm4, xmm4, eax, 5
	LONG $0xc2c5f9c5; BYTE $0x06               // vpextrw    eax, xmm2, 6
	LONG $0xdbc5f9c5; BYTE $0x06               // vpextrw    ebx, xmm3, 6
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf766; BYTE $0xf3                   // div    bx
	LONG $0xe0c4d9c5; BYTE $0x06               // vpinsrw    xmm4, xmm4, eax, 6
	LONG $0xc2c5f9c5; BYTE $0x07               // vpextrw    eax, xmm2, 7
	LONG $0xdbc5f9c5; BYTE $0x07               // vpextrw    ebx, xmm3, 7
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf766; BYTE $0xf3                   // div    bx
	LONG $0xd0c4d9c5; BYTE $0x07               // vpinsrw    xmm2, xmm4, eax, 7
	LONG $0xc0c5f9c5; BYTE $0x01               // vpextrw    eax, xmm0, 1
	LONG $0xd9c5f9c5; BYTE $0x01               // vpextrw    ebx, xmm1, 1
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf766; BYTE $0xf3                   // div    bx
	WORD $0x8941; BYTE $0xc1                   // mov    r9d, eax
	LONG $0xc07ef9c5                           // vmovd    eax, xmm0
	LONG $0xcb7ef9c5                           // vmovd    ebx, xmm1
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf766; BYTE $0xf3                   // div    bx
	LONG $0xd86ef9c5                           // vmovd    xmm3, eax
	LONG $0xc461c1c4; WORD $0x01d9             // vpinsrw    xmm3, xmm3, r9d, 1
	LONG $0xc0c5f9c5; BYTE $0x02               // vpextrw    eax, xmm0, 2
	LONG $0xd9c5f9c5; BYTE $0x02               // vpextrw    ebx, xmm1, 2
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf766; BYTE $0xf3                   // div    bx
	LONG $0xd8c4e1c5; BYTE $0x02               // vpinsrw    xmm3, xmm3, eax, 2
	LONG $0xc0c5f9c5; BYTE $0x03               // vpextrw    eax, xmm0, 3
	LONG $0xd9c5f9c5; BYTE $0x03               // vpextrw    ebx, xmm1, 3
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf766; BYTE $0xf3                   // div    bx
	LONG $0xd8c4e1c5; BYTE $0x03               // vpinsrw    xmm3, xmm3, eax, 3
	LONG $0xc0c5f9c5; BYTE $0x04               // vpextrw    eax, xmm0, 4
	LONG $0xd9c5f9c5; BYTE $0x04               // vpextrw    ebx, xmm1, 4
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf766; BYTE $0xf3                   // div    bx
	LONG $0xd8c4e1c5; BYTE $0x04               // vpinsrw    xmm3, xmm3, eax, 4
	LONG $0xc0c5f9c5; BYTE $0x05               // vpextrw    eax, xmm0, 5
	LONG $0xd9c5f9c5; BYTE $0x05               // vpextrw    ebx, xmm1, 5
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf766; BYTE $0xf3                   // div    bx
	LONG $0xd8c4e1c5; BYTE $0x05               // vpinsrw    xmm3, xmm3, eax, 5
	LONG $0xc0c5f9c5; BYTE $0x06               // vpextrw    eax, xmm0, 6
	LONG $0xd9c5f9c5; BYTE $0x06               // vpextrw    ebx, xmm1, 6
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf766; BYTE $0xf3                   // div    bx
	LONG $0xd8c4e1c5; BYTE $0x06               // vpinsrw    xmm3, xmm3, eax, 6
	LONG $0xc0c5f9c5; BYTE $0x07               // vpextrw    eax, xmm0, 7
	LONG $0xd9c5f9c5; BYTE $0x07               // vpextrw    ebx, xmm1, 7
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf766; BYTE $0xf3                   // div    bx
	LONG $0xc0c4e1c5; BYTE $0x07               // vpinsrw    xmm0, xmm3, eax, 7
	LONG $0x7f7a81c4; WORD $0x7844; BYTE $0x10 // vmovdqu    oword [r8 + 2*r15 + 16], xmm0
	LONG $0x7f7a81c4; WORD $0x7814             // vmovdqu    oword [r8 + 2*r15], xmm2
	LONG $0x10c78349                           // add    r15, 16
	WORD $0x394d; BYTE $0xfb                   // cmp    r11, r15
	JNE  LBB13_10
	WORD $0x854d; BYTE $0xf6                   // test    r14, r14
	JE   LBB13_12

LBB13_3:
	WORD $0x2944; BYTE $0xd9     // sub    ecx, r11d
	WORD $0x894c; BYTE $0xdb     // mov    rbx, r11
	WORD $0xc1f6; BYTE $0x01     // test    cl, 1
	JE   LBB13_5
	LONG $0x04b70f42; BYTE $0x5f // movzx    eax, word [rdi + 2*r11]
	WORD $0xd231                 // xor    edx, edx
	LONG $0x34f74266; BYTE $0x5e // div    word [rsi + 2*r11]
	LONG $0x04894366; BYTE $0x58 // mov    word [r8 + 2*r11], ax
	LONG $0x015b8d49             // lea    rbx, [r11 + 1]

LBB13_5:
	LONG $0x01c38349         // add    r11, 1
	WORD $0x394d; BYTE $0xda // cmp    r10, r11
	JE   LBB13_12

LBB13_6:
	LONG $0x5f04b70f               // movzx    eax, word [rdi + 2*rbx]
	WORD $0xd231                   // xor    edx, edx
	LONG $0x5e34f766               // div    word [rsi + 2*rbx]
	LONG $0x04894166; BYTE $0x58   // mov    word [r8 + 2*rbx], ax
	LONG $0x5f44b70f; BYTE $0x02   // movzx    eax, word [rdi + 2*rbx + 2]
	WORD $0xd231                   // xor    edx, edx
	LONG $0x5e74f766; BYTE $0x02   // div    word [rsi + 2*rbx + 2]
	LONG $0x44894166; WORD $0x0258 // mov    word [r8 + 2*rbx + 2], ax
	LONG $0x02c38348               // add    rbx, 2
	WORD $0x3949; BYTE $0xda       // cmp    r10, rbx
	JNE  LBB13_6

LBB13_12:
	RET

TEXT 路_uint32_avx2_sum(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB14_1
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0x1ff88349         // cmp    r8, 31
	JA   LBB14_4
	WORD $0xc931             // xor    ecx, ecx
	WORD $0xc031             // xor    eax, eax
	JMP  LBB14_7

LBB14_1:
	WORD $0xc031 // xor    eax, eax
	JMP  LBB14_8

LBB14_4:
	WORD $0xe283; BYTE $0x1f // and    edx, 31
	WORD $0x894c; BYTE $0xc1 // mov    rcx, r8
	WORD $0x2948; BYTE $0xd1 // sub    rcx, rdx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0
	WORD $0xc031             // xor    eax, eax
	LONG $0xc9eff1c5         // vpxor    xmm1, xmm1, xmm1
	LONG $0xd2efe9c5         // vpxor    xmm2, xmm2, xmm2
	LONG $0xdbefe1c5         // vpxor    xmm3, xmm3, xmm3

LBB14_5:
	LONG $0x04fefdc5; BYTE $0x87   // vpaddd    ymm0, ymm0, yword [rdi + 4*rax]
	LONG $0x4cfef5c5; WORD $0x2087 // vpaddd    ymm1, ymm1, yword [rdi + 4*rax + 32]
	LONG $0x54feedc5; WORD $0x4087 // vpaddd    ymm2, ymm2, yword [rdi + 4*rax + 64]
	LONG $0x5cfee5c5; WORD $0x6087 // vpaddd    ymm3, ymm3, yword [rdi + 4*rax + 96]
	LONG $0x20c08348               // add    rax, 32
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JNE  LBB14_5
	LONG $0xc0fef5c5               // vpaddd    ymm0, ymm1, ymm0
	LONG $0xc0feedc5               // vpaddd    ymm0, ymm2, ymm0
	LONG $0xc0fee5c5               // vpaddd    ymm0, ymm3, ymm0
	LONG $0x397de3c4; WORD $0x01c1 // vextracti128    xmm1, ymm0, 1
	LONG $0xc1fef9c5               // vpaddd    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0x4e   // vpshufd    xmm1, xmm0, 78
	LONG $0xc1fef9c5               // vpaddd    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0xe5   // vpshufd    xmm1, xmm0, 229
	LONG $0xc1fef9c5               // vpaddd    xmm0, xmm0, xmm1
	LONG $0xc07ef9c5               // vmovd    eax, xmm0
	WORD $0x8548; BYTE $0xd2       // test    rdx, rdx
	JE   LBB14_8

LBB14_7:
	WORD $0x0403; BYTE $0x8f // add    eax, dword [rdi + 4*rcx]
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc8 // cmp    r8, rcx
	JNE  LBB14_7

LBB14_8:
	WORD $0x0689 // mov    dword [rsi], eax
	VZEROUPPER
	RET

TEXT 路_uint32_avx2_min(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	WORD $0x078b                 // mov    eax, dword [rdi]
	WORD $0xd285                 // test    edx, edx
	JLE  LBB15_7
	WORD $0x8941; BYTE $0xd1     // mov    r9d, edx
	LONG $0x01f98349             // cmp    r9, 1
	JE   LBB15_7
	LONG $0xff418d4d             // lea    r8, [r9 - 1]
	LONG $0x000001b9; BYTE $0x00 // mov    ecx, 1
	LONG $0x1ff88349             // cmp    r8, 31
	JBE  LBB15_6
	WORD $0x894c; BYTE $0xc2     // mov    rdx, r8
	LONG $0xe0e28348             // and    rdx, -32
	LONG $0x014a8d48             // lea    rcx, [rdx + 1]
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	WORD $0xc031                 // xor    eax, eax
	LONG $0xc86ffdc5             // vmovdqa    ymm1, ymm0
	LONG $0xd06ffdc5             // vmovdqa    ymm2, ymm0
	LONG $0xd86ffdc5             // vmovdqa    ymm3, ymm0

LBB15_4:
	LONG $0x3b7de2c4; WORD $0x8744; BYTE $0x04 // vpminud    ymm0, ymm0, yword [rdi + 4*rax + 4]
	LONG $0x3b75e2c4; WORD $0x874c; BYTE $0x24 // vpminud    ymm1, ymm1, yword [rdi + 4*rax + 36]
	LONG $0x3b6de2c4; WORD $0x8754; BYTE $0x44 // vpminud    ymm2, ymm2, yword [rdi + 4*rax + 68]
	LONG $0x3b65e2c4; WORD $0x875c; BYTE $0x64 // vpminud    ymm3, ymm3, yword [rdi + 4*rax + 100]
	LONG $0x20c08348                           // add    rax, 32
	WORD $0x3948; BYTE $0xc2                   // cmp    rdx, rax
	JNE  LBB15_4
	LONG $0x3b7de2c4; BYTE $0xc1               // vpminud    ymm0, ymm0, ymm1
	LONG $0x3b7de2c4; BYTE $0xc2               // vpminud    ymm0, ymm0, ymm2
	LONG $0x3b7de2c4; BYTE $0xc3               // vpminud    ymm0, ymm0, ymm3
	LONG $0x397de3c4; WORD $0x01c1             // vextracti128    xmm1, ymm0, 1
	LONG $0x3b79e2c4; BYTE $0xc1               // vpminud    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0x4e               // vpshufd    xmm1, xmm0, 78
	LONG $0x3b79e2c4; BYTE $0xc1               // vpminud    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0xe5               // vpshufd    xmm1, xmm0, 229
	LONG $0x3b79e2c4; BYTE $0xc1               // vpminud    xmm0, xmm0, xmm1
	LONG $0xc07ef9c5                           // vmovd    eax, xmm0
	WORD $0x3949; BYTE $0xd0                   // cmp    r8, rdx
	JE   LBB15_7

LBB15_6:
	WORD $0x148b; BYTE $0x8f // mov    edx, dword [rdi + 4*rcx]
	WORD $0xc239             // cmp    edx, eax
	WORD $0x420f; BYTE $0xc2 // cmovb    eax, edx
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB15_6

LBB15_7:
	WORD $0x0689 // mov    dword [rsi], eax
	VZEROUPPER
	RET

TEXT 路_uint32_avx2_max(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	WORD $0x078b                 // mov    eax, dword [rdi]
	WORD $0xd285                 // test    edx, edx
	JLE  LBB16_7
	WORD $0x8941; BYTE $0xd1     // mov    r9d, edx
	LONG $0x01f98349             // cmp    r9, 1
	JE   LBB16_7
	LONG $0xff418d4d             // lea    r8, [r9 - 1]
	LONG $0x000001b9; BYTE $0x00 // mov    ecx, 1
	LONG $0x1ff88349             // cmp    r8, 31
	JBE  LBB16_6
	WORD $0x894c; BYTE $0xc2     // mov    rdx, r8
	LONG $0xe0e28348             // and    rdx, -32
	LONG $0x014a8d48             // lea    rcx, [rdx + 1]
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	WORD $0xc031                 // xor    eax, eax
	LONG $0xc86ffdc5             // vmovdqa    ymm1, ymm0
	LONG $0xd06ffdc5             // vmovdqa    ymm2, ymm0
	LONG $0xd86ffdc5             // vmovdqa    ymm3, ymm0

LBB16_4:
	LONG $0x3f7de2c4; WORD $0x8744; BYTE $0x04 // vpmaxud    ymm0, ymm0, yword [rdi + 4*rax + 4]
	LONG $0x3f75e2c4; WORD $0x874c; BYTE $0x24 // vpmaxud    ymm1, ymm1, yword [rdi + 4*rax + 36]
	LONG $0x3f6de2c4; WORD $0x8754; BYTE $0x44 // vpmaxud    ymm2, ymm2, yword [rdi + 4*rax + 68]
	LONG $0x3f65e2c4; WORD $0x875c; BYTE $0x64 // vpmaxud    ymm3, ymm3, yword [rdi + 4*rax + 100]
	LONG $0x20c08348                           // add    rax, 32
	WORD $0x3948; BYTE $0xc2                   // cmp    rdx, rax
	JNE  LBB16_4
	LONG $0x3f7de2c4; BYTE $0xc1               // vpmaxud    ymm0, ymm0, ymm1
	LONG $0x3f7de2c4; BYTE $0xc2               // vpmaxud    ymm0, ymm0, ymm2
	LONG $0x3f7de2c4; BYTE $0xc3               // vpmaxud    ymm0, ymm0, ymm3
	LONG $0x397de3c4; WORD $0x01c1             // vextracti128    xmm1, ymm0, 1
	LONG $0x3f79e2c4; BYTE $0xc1               // vpmaxud    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0x4e               // vpshufd    xmm1, xmm0, 78
	LONG $0x3f79e2c4; BYTE $0xc1               // vpmaxud    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0xe5               // vpshufd    xmm1, xmm0, 229
	LONG $0x3f79e2c4; BYTE $0xc1               // vpmaxud    xmm0, xmm0, xmm1
	LONG $0xc07ef9c5                           // vmovd    eax, xmm0
	WORD $0x3949; BYTE $0xd0                   // cmp    r8, rdx
	JE   LBB16_7

LBB16_6:
	WORD $0x148b; BYTE $0x8f // mov    edx, dword [rdi + 4*rcx]
	WORD $0xc239             // cmp    edx, eax
	WORD $0x470f; BYTE $0xc2 // cmova    eax, edx
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB16_6

LBB16_7:
	WORD $0x0689 // mov    dword [rsi], eax
	VZEROUPPER
	RET

TEXT 路_uint32_avx2_add(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB17_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x1ff88349         // cmp    r8, 31
	JA   LBB17_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB17_3

LBB17_7:
	LONG $0x82148d4e         // lea    r10, [rdx + 4*r8]
	LONG $0x87048d4a         // lea    rax, [rdi + 4*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd6970f41         // seta    r14b
	LONG $0x86048d4a         // lea    rax, [rsi + 4*r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB17_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB17_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x1fe18341         // and    r9d, 31
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x294d; BYTE $0xcb // sub    r11, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB17_10:
	LONG $0x6f7ea1c4; WORD $0x9604             // vmovdqu    ymm0, yword [rsi + 4*r10]
	LONG $0x6f7ea1c4; WORD $0x964c; BYTE $0x20 // vmovdqu    ymm1, yword [rsi + 4*r10 + 32]
	LONG $0x6f7ea1c4; WORD $0x9654; BYTE $0x40 // vmovdqu    ymm2, yword [rsi + 4*r10 + 64]
	LONG $0x6f7ea1c4; WORD $0x965c; BYTE $0x60 // vmovdqu    ymm3, yword [rsi + 4*r10 + 96]
	LONG $0xfe7da1c4; WORD $0x9704             // vpaddd    ymm0, ymm0, yword [rdi + 4*r10]
	LONG $0xfe75a1c4; WORD $0x974c; BYTE $0x20 // vpaddd    ymm1, ymm1, yword [rdi + 4*r10 + 32]
	LONG $0xfe6da1c4; WORD $0x9754; BYTE $0x40 // vpaddd    ymm2, ymm2, yword [rdi + 4*r10 + 64]
	LONG $0xfe65a1c4; WORD $0x975c; BYTE $0x60 // vpaddd    ymm3, ymm3, yword [rdi + 4*r10 + 96]
	LONG $0x7f7ea1c4; WORD $0x9204             // vmovdqu    yword [rdx + 4*r10], ymm0
	LONG $0x7f7ea1c4; WORD $0x924c; BYTE $0x20 // vmovdqu    yword [rdx + 4*r10 + 32], ymm1
	LONG $0x7f7ea1c4; WORD $0x9254; BYTE $0x40 // vmovdqu    yword [rdx + 4*r10 + 64], ymm2
	LONG $0x7f7ea1c4; WORD $0x925c; BYTE $0x60 // vmovdqu    yword [rdx + 4*r10 + 96], ymm3
	LONG $0x20c28349                           // add    r10, 32
	WORD $0x394d; BYTE $0xd3                   // cmp    r11, r10
	JNE  LBB17_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB17_12

LBB17_3:
	WORD $0x2944; BYTE $0xd9 // sub    ecx, r11d
	WORD $0x894d; BYTE $0xd9 // mov    r9, r11
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB17_5

LBB17_4:
	LONG $0x9e048b42 // mov    eax, dword [rsi + 4*r11]
	LONG $0x9f040342 // add    eax, dword [rdi + 4*r11]
	LONG $0x9a048942 // mov    dword [rdx + 4*r11], eax
	LONG $0x01c38349 // add    r11, 1
	LONG $0xffc18348 // add    rcx, -1
	JNE  LBB17_4

LBB17_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB17_12

LBB17_6:
	LONG $0x9e048b42             // mov    eax, dword [rsi + 4*r11]
	LONG $0x9f040342             // add    eax, dword [rdi + 4*r11]
	LONG $0x9a048942             // mov    dword [rdx + 4*r11], eax
	LONG $0x9e448b42; BYTE $0x04 // mov    eax, dword [rsi + 4*r11 + 4]
	LONG $0x9f440342; BYTE $0x04 // add    eax, dword [rdi + 4*r11 + 4]
	LONG $0x9a448942; BYTE $0x04 // mov    dword [rdx + 4*r11 + 4], eax
	LONG $0x9e448b42; BYTE $0x08 // mov    eax, dword [rsi + 4*r11 + 8]
	LONG $0x9f440342; BYTE $0x08 // add    eax, dword [rdi + 4*r11 + 8]
	LONG $0x9a448942; BYTE $0x08 // mov    dword [rdx + 4*r11 + 8], eax
	LONG $0x9e448b42; BYTE $0x0c // mov    eax, dword [rsi + 4*r11 + 12]
	LONG $0x9f440342; BYTE $0x0c // add    eax, dword [rdi + 4*r11 + 12]
	LONG $0x9a448942; BYTE $0x0c // mov    dword [rdx + 4*r11 + 12], eax
	LONG $0x04c38349             // add    r11, 4
	WORD $0x394d; BYTE $0xd8     // cmp    r8, r11
	JNE  LBB17_6

LBB17_12:
	VZEROUPPER
	RET

TEXT 路_uint32_avx2_sub(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB18_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x1ff88349         // cmp    r8, 31
	JA   LBB18_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB18_3

LBB18_7:
	LONG $0x82148d4e         // lea    r10, [rdx + 4*r8]
	LONG $0x87048d4a         // lea    rax, [rdi + 4*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd6970f41         // seta    r14b
	LONG $0x86048d4a         // lea    rax, [rsi + 4*r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB18_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB18_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x1fe18341         // and    r9d, 31
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x294d; BYTE $0xcb // sub    r11, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB18_10:
	LONG $0x6f7ea1c4; WORD $0x9704             // vmovdqu    ymm0, yword [rdi + 4*r10]
	LONG $0x6f7ea1c4; WORD $0x974c; BYTE $0x20 // vmovdqu    ymm1, yword [rdi + 4*r10 + 32]
	LONG $0x6f7ea1c4; WORD $0x9754; BYTE $0x40 // vmovdqu    ymm2, yword [rdi + 4*r10 + 64]
	LONG $0x6f7ea1c4; WORD $0x975c; BYTE $0x60 // vmovdqu    ymm3, yword [rdi + 4*r10 + 96]
	LONG $0xfa7da1c4; WORD $0x9604             // vpsubd    ymm0, ymm0, yword [rsi + 4*r10]
	LONG $0xfa75a1c4; WORD $0x964c; BYTE $0x20 // vpsubd    ymm1, ymm1, yword [rsi + 4*r10 + 32]
	LONG $0xfa6da1c4; WORD $0x9654; BYTE $0x40 // vpsubd    ymm2, ymm2, yword [rsi + 4*r10 + 64]
	LONG $0xfa65a1c4; WORD $0x965c; BYTE $0x60 // vpsubd    ymm3, ymm3, yword [rsi + 4*r10 + 96]
	LONG $0x7f7ea1c4; WORD $0x9204             // vmovdqu    yword [rdx + 4*r10], ymm0
	LONG $0x7f7ea1c4; WORD $0x924c; BYTE $0x20 // vmovdqu    yword [rdx + 4*r10 + 32], ymm1
	LONG $0x7f7ea1c4; WORD $0x9254; BYTE $0x40 // vmovdqu    yword [rdx + 4*r10 + 64], ymm2
	LONG $0x7f7ea1c4; WORD $0x925c; BYTE $0x60 // vmovdqu    yword [rdx + 4*r10 + 96], ymm3
	LONG $0x20c28349                           // add    r10, 32
	WORD $0x394d; BYTE $0xd3                   // cmp    r11, r10
	JNE  LBB18_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB18_12

LBB18_3:
	WORD $0x2944; BYTE $0xd9 // sub    ecx, r11d
	WORD $0x894d; BYTE $0xd9 // mov    r9, r11
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB18_5

LBB18_4:
	LONG $0x9f048b42 // mov    eax, dword [rdi + 4*r11]
	LONG $0x9e042b42 // sub    eax, dword [rsi + 4*r11]
	LONG $0x9a048942 // mov    dword [rdx + 4*r11], eax
	LONG $0x01c38349 // add    r11, 1
	LONG $0xffc18348 // add    rcx, -1
	JNE  LBB18_4

LBB18_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB18_12

LBB18_6:
	LONG $0x9f048b42             // mov    eax, dword [rdi + 4*r11]
	LONG $0x9e042b42             // sub    eax, dword [rsi + 4*r11]
	LONG $0x9a048942             // mov    dword [rdx + 4*r11], eax
	LONG $0x9f448b42; BYTE $0x04 // mov    eax, dword [rdi + 4*r11 + 4]
	LONG $0x9e442b42; BYTE $0x04 // sub    eax, dword [rsi + 4*r11 + 4]
	LONG $0x9a448942; BYTE $0x04 // mov    dword [rdx + 4*r11 + 4], eax
	LONG $0x9f448b42; BYTE $0x08 // mov    eax, dword [rdi + 4*r11 + 8]
	LONG $0x9e442b42; BYTE $0x08 // sub    eax, dword [rsi + 4*r11 + 8]
	LONG $0x9a448942; BYTE $0x08 // mov    dword [rdx + 4*r11 + 8], eax
	LONG $0x9f448b42; BYTE $0x0c // mov    eax, dword [rdi + 4*r11 + 12]
	LONG $0x9e442b42; BYTE $0x0c // sub    eax, dword [rsi + 4*r11 + 12]
	LONG $0x9a448942; BYTE $0x0c // mov    dword [rdx + 4*r11 + 12], eax
	LONG $0x04c38349             // add    r11, 4
	WORD $0x394d; BYTE $0xd8     // cmp    r8, r11
	JNE  LBB18_6

LBB18_12:
	VZEROUPPER
	RET

TEXT 路_uint32_avx2_mul(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB19_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x1ff88349         // cmp    r8, 31
	JA   LBB19_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB19_3

LBB19_7:
	LONG $0x82148d4e         // lea    r10, [rdx + 4*r8]
	LONG $0x87048d4a         // lea    rax, [rdi + 4*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd6970f41         // seta    r14b
	LONG $0x86048d4a         // lea    rax, [rsi + 4*r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB19_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB19_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x1fe18341         // and    r9d, 31
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x294d; BYTE $0xcb // sub    r11, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB19_10:
	LONG $0x6f7ea1c4; WORD $0x9604             // vmovdqu    ymm0, yword [rsi + 4*r10]
	LONG $0x6f7ea1c4; WORD $0x964c; BYTE $0x20 // vmovdqu    ymm1, yword [rsi + 4*r10 + 32]
	LONG $0x6f7ea1c4; WORD $0x9654; BYTE $0x40 // vmovdqu    ymm2, yword [rsi + 4*r10 + 64]
	LONG $0x6f7ea1c4; WORD $0x965c; BYTE $0x60 // vmovdqu    ymm3, yword [rsi + 4*r10 + 96]
	LONG $0x407da2c4; WORD $0x9704             // vpmulld    ymm0, ymm0, yword [rdi + 4*r10]
	LONG $0x4075a2c4; WORD $0x974c; BYTE $0x20 // vpmulld    ymm1, ymm1, yword [rdi + 4*r10 + 32]
	LONG $0x406da2c4; WORD $0x9754; BYTE $0x40 // vpmulld    ymm2, ymm2, yword [rdi + 4*r10 + 64]
	LONG $0x4065a2c4; WORD $0x975c; BYTE $0x60 // vpmulld    ymm3, ymm3, yword [rdi + 4*r10 + 96]
	LONG $0x7f7ea1c4; WORD $0x9204             // vmovdqu    yword [rdx + 4*r10], ymm0
	LONG $0x7f7ea1c4; WORD $0x924c; BYTE $0x20 // vmovdqu    yword [rdx + 4*r10 + 32], ymm1
	LONG $0x7f7ea1c4; WORD $0x9254; BYTE $0x40 // vmovdqu    yword [rdx + 4*r10 + 64], ymm2
	LONG $0x7f7ea1c4; WORD $0x925c; BYTE $0x60 // vmovdqu    yword [rdx + 4*r10 + 96], ymm3
	LONG $0x20c28349                           // add    r10, 32
	WORD $0x394d; BYTE $0xd3                   // cmp    r11, r10
	JNE  LBB19_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB19_12

LBB19_3:
	WORD $0x2944; BYTE $0xd9 // sub    ecx, r11d
	WORD $0x894d; BYTE $0xd9 // mov    r9, r11
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB19_5

LBB19_4:
	LONG $0x9e048b42             // mov    eax, dword [rsi + 4*r11]
	LONG $0x04af0f42; BYTE $0x9f // imul    eax, dword [rdi + 4*r11]
	LONG $0x9a048942             // mov    dword [rdx + 4*r11], eax
	LONG $0x01c38349             // add    r11, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB19_4

LBB19_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB19_12

LBB19_6:
	LONG $0x9e048b42               // mov    eax, dword [rsi + 4*r11]
	LONG $0x04af0f42; BYTE $0x9f   // imul    eax, dword [rdi + 4*r11]
	LONG $0x9a048942               // mov    dword [rdx + 4*r11], eax
	LONG $0x9e448b42; BYTE $0x04   // mov    eax, dword [rsi + 4*r11 + 4]
	LONG $0x44af0f42; WORD $0x049f // imul    eax, dword [rdi + 4*r11 + 4]
	LONG $0x9a448942; BYTE $0x04   // mov    dword [rdx + 4*r11 + 4], eax
	LONG $0x9e448b42; BYTE $0x08   // mov    eax, dword [rsi + 4*r11 + 8]
	LONG $0x44af0f42; WORD $0x089f // imul    eax, dword [rdi + 4*r11 + 8]
	LONG $0x9a448942; BYTE $0x08   // mov    dword [rdx + 4*r11 + 8], eax
	LONG $0x9e448b42; BYTE $0x0c   // mov    eax, dword [rsi + 4*r11 + 12]
	LONG $0x44af0f42; WORD $0x0c9f // imul    eax, dword [rdi + 4*r11 + 12]
	LONG $0x9a448942; BYTE $0x0c   // mov    dword [rdx + 4*r11 + 12], eax
	LONG $0x04c38349               // add    r11, 4
	WORD $0x394d; BYTE $0xd8       // cmp    r8, r11
	JNE  LBB19_6

LBB19_12:
	VZEROUPPER
	RET

TEXT 路_uint32_avx2_div(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB20_12
	WORD $0x8949; BYTE $0xd0 // mov    r8, rdx
	WORD $0x8941; BYTE $0xca // mov    r10d, ecx
	LONG $0x07fa8349         // cmp    r10, 7
	JA   LBB20_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB20_3

LBB20_7:
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	LONG $0x97048d4a         // lea    rax, [rdi + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x96048d4a         // lea    rax, [rsi + 4*r10]
	WORD $0x3948; BYTE $0xfa // cmp    rdx, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xf2 // cmp    rdx, rsi
	WORD $0x970f; BYTE $0xd2 // seta    dl
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	WORD $0x8441; BYTE $0xd9 // test    r9b, bl
	JNE  LBB20_3
	WORD $0xd020             // and    al, dl
	JNE  LBB20_3
	WORD $0x8941; BYTE $0xce // mov    r14d, ecx
	LONG $0x07e68341         // and    r14d, 7
	WORD $0x894d; BYTE $0xd3 // mov    r11, r10
	WORD $0x294d; BYTE $0xf3 // sub    r11, r14
	WORD $0xdb31             // xor    ebx, ebx

LBB20_10:
	LONG $0x146ffac5; BYTE $0x9f               // vmovdqu    xmm2, oword [rdi + 4*rbx]
	LONG $0x1679e3c4; WORD $0x01d0             // vpextrd    eax, xmm2, 1
	LONG $0x446ffac5; WORD $0x109f             // vmovdqu    xmm0, oword [rdi + 4*rbx + 16]
	LONG $0x1c6ffac5; BYTE $0x9e               // vmovdqu    xmm3, oword [rsi + 4*rbx]
	LONG $0x1679c3c4; WORD $0x01d9             // vpextrd    r9d, xmm3, 1
	LONG $0x4c6ffac5; WORD $0x109e             // vmovdqu    xmm1, oword [rsi + 4*rbx + 16]
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf741; BYTE $0xf1                   // div    r9d
	WORD $0x8941; BYTE $0xc1                   // mov    r9d, eax
	LONG $0xd07ef9c5                           // vmovd    eax, xmm2
	LONG $0x7e79c1c4; BYTE $0xdf               // vmovd    r15d, xmm3
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf741; BYTE $0xf7                   // div    r15d
	LONG $0xe06ef9c5                           // vmovd    xmm4, eax
	LONG $0x2259c3c4; WORD $0x01e1             // vpinsrd    xmm4, xmm4, r9d, 1
	LONG $0x1679e3c4; WORD $0x02d0             // vpextrd    eax, xmm2, 2
	LONG $0x1679c3c4; WORD $0x02d9             // vpextrd    r9d, xmm3, 2
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf741; BYTE $0xf1                   // div    r9d
	LONG $0x2259e3c4; WORD $0x02e0             // vpinsrd    xmm4, xmm4, eax, 2
	LONG $0x1679e3c4; WORD $0x03d0             // vpextrd    eax, xmm2, 3
	LONG $0x1679c3c4; WORD $0x03d9             // vpextrd    r9d, xmm3, 3
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf741; BYTE $0xf1                   // div    r9d
	LONG $0x2259e3c4; WORD $0x03d0             // vpinsrd    xmm2, xmm4, eax, 3
	LONG $0x1679e3c4; WORD $0x01c0             // vpextrd    eax, xmm0, 1
	LONG $0x1679c3c4; WORD $0x01c9             // vpextrd    r9d, xmm1, 1
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf741; BYTE $0xf1                   // div    r9d
	WORD $0x8941; BYTE $0xc1                   // mov    r9d, eax
	LONG $0xc07ef9c5                           // vmovd    eax, xmm0
	LONG $0x7e79c1c4; BYTE $0xcf               // vmovd    r15d, xmm1
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf741; BYTE $0xf7                   // div    r15d
	LONG $0xd86ef9c5                           // vmovd    xmm3, eax
	LONG $0x2261c3c4; WORD $0x01d9             // vpinsrd    xmm3, xmm3, r9d, 1
	LONG $0x1679e3c4; WORD $0x02c0             // vpextrd    eax, xmm0, 2
	LONG $0x1679c3c4; WORD $0x02c9             // vpextrd    r9d, xmm1, 2
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf741; BYTE $0xf1                   // div    r9d
	LONG $0x2261e3c4; WORD $0x02d8             // vpinsrd    xmm3, xmm3, eax, 2
	LONG $0x1679e3c4; WORD $0x03c0             // vpextrd    eax, xmm0, 3
	LONG $0x1679c3c4; WORD $0x03c9             // vpextrd    r9d, xmm1, 3
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf741; BYTE $0xf1                   // div    r9d
	LONG $0x2261e3c4; WORD $0x03c0             // vpinsrd    xmm0, xmm3, eax, 3
	LONG $0x7f7ac1c4; WORD $0x9844; BYTE $0x10 // vmovdqu    oword [r8 + 4*rbx + 16], xmm0
	LONG $0x7f7ac1c4; WORD $0x9814             // vmovdqu    oword [r8 + 4*rbx], xmm2
	LONG $0x08c38348                           // add    rbx, 8
	WORD $0x3949; BYTE $0xdb                   // cmp    r11, rbx
	JNE  LBB20_10
	WORD $0x854d; BYTE $0xf6                   // test    r14, r14
	JE   LBB20_12

LBB20_3:
	WORD $0x2944; BYTE $0xd9 // sub    ecx, r11d
	WORD $0x894c; BYTE $0xdb // mov    rbx, r11
	WORD $0xc1f6; BYTE $0x01 // test    cl, 1
	JE   LBB20_5
	LONG $0x9f048b42         // mov    eax, dword [rdi + 4*r11]
	WORD $0xd231             // xor    edx, edx
	LONG $0x9e34f742         // div    dword [rsi + 4*r11]
	LONG $0x98048943         // mov    dword [r8 + 4*r11], eax
	LONG $0x015b8d49         // lea    rbx, [r11 + 1]

LBB20_5:
	LONG $0x01c38349         // add    r11, 1
	WORD $0x394d; BYTE $0xda // cmp    r10, r11
	JE   LBB20_12

LBB20_6:
	WORD $0x048b; BYTE $0x9f     // mov    eax, dword [rdi + 4*rbx]
	WORD $0xd231                 // xor    edx, edx
	WORD $0x34f7; BYTE $0x9e     // div    dword [rsi + 4*rbx]
	LONG $0x98048941             // mov    dword [r8 + 4*rbx], eax
	LONG $0x049f448b             // mov    eax, dword [rdi + 4*rbx + 4]
	WORD $0xd231                 // xor    edx, edx
	LONG $0x049e74f7             // div    dword [rsi + 4*rbx + 4]
	LONG $0x98448941; BYTE $0x04 // mov    dword [r8 + 4*rbx + 4], eax
	LONG $0x02c38348             // add    rbx, 2
	WORD $0x3949; BYTE $0xda     // cmp    r10, rbx
	JNE  LBB20_6

LBB20_12:
	RET

TEXT 路_uint64_avx2_sum(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB21_1
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0x0ff88349         // cmp    r8, 15
	JA   LBB21_4
	WORD $0xc931             // xor    ecx, ecx
	WORD $0xc031             // xor    eax, eax
	JMP  LBB21_7

LBB21_1:
	WORD $0xc031 // xor    eax, eax
	JMP  LBB21_8

LBB21_4:
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x894c; BYTE $0xc1 // mov    rcx, r8
	WORD $0x2948; BYTE $0xd1 // sub    rcx, rdx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0
	WORD $0xc031             // xor    eax, eax
	LONG $0xc9eff1c5         // vpxor    xmm1, xmm1, xmm1
	LONG $0xd2efe9c5         // vpxor    xmm2, xmm2, xmm2
	LONG $0xdbefe1c5         // vpxor    xmm3, xmm3, xmm3

LBB21_5:
	LONG $0x04d4fdc5; BYTE $0xc7   // vpaddq    ymm0, ymm0, yword [rdi + 8*rax]
	LONG $0x4cd4f5c5; WORD $0x20c7 // vpaddq    ymm1, ymm1, yword [rdi + 8*rax + 32]
	LONG $0x54d4edc5; WORD $0x40c7 // vpaddq    ymm2, ymm2, yword [rdi + 8*rax + 64]
	LONG $0x5cd4e5c5; WORD $0x60c7 // vpaddq    ymm3, ymm3, yword [rdi + 8*rax + 96]
	LONG $0x10c08348               // add    rax, 16
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JNE  LBB21_5
	LONG $0xc0d4f5c5               // vpaddq    ymm0, ymm1, ymm0
	LONG $0xc0d4edc5               // vpaddq    ymm0, ymm2, ymm0
	LONG $0xc0d4e5c5               // vpaddq    ymm0, ymm3, ymm0
	LONG $0x397de3c4; WORD $0x01c1 // vextracti128    xmm1, ymm0, 1
	LONG $0xc1d4f9c5               // vpaddq    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0x4e   // vpshufd    xmm1, xmm0, 78
	LONG $0xc1d4f9c5               // vpaddq    xmm0, xmm0, xmm1
	LONG $0x7ef9e1c4; BYTE $0xc0   // vmovq    rax, xmm0
	WORD $0x8548; BYTE $0xd2       // test    rdx, rdx
	JE   LBB21_8

LBB21_7:
	LONG $0xcf040348         // add    rax, qword [rdi + 8*rcx]
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc8 // cmp    r8, rcx
	JNE  LBB21_7

LBB21_8:
	WORD $0x8948; BYTE $0x06 // mov    qword [rsi], rax
	VZEROUPPER
	RET

DATA LCDATA2<>+0x000(SB)/8, $0x8000000000000000
GLOBL LCDATA2<>(SB), 8, $8

TEXT 路_uint64_avx2_min(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX
	LEAQ LCDATA2<>(SB), BP

	WORD $0x8b48; BYTE $0x07       // mov    rax, qword [rdi]
	WORD $0xd285                   // test    edx, edx
	JLE  LBB22_7
	WORD $0x8941; BYTE $0xd2       // mov    r10d, edx
	LONG $0x01fa8349               // cmp    r10, 1
	JE   LBB22_7
	LONG $0xff428d4d               // lea    r8, [r10 - 1]
	LONG $0x000001b9; BYTE $0x00   // mov    ecx, 1
	LONG $0x0ff88349               // cmp    r8, 15
	JBE  LBB22_6
	WORD $0x894d; BYTE $0xc1       // mov    r9, r8
	LONG $0xf0e18349               // and    r9, -16
	LONG $0x01498d49               // lea    rcx, [r9 + 1]
	LONG $0x6ef9e1c4; BYTE $0xc0   // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc8   // vpbroadcastq    ymm1, xmm0
	WORD $0xc031                   // xor    eax, eax
	LONG $0x597de2c4; WORD $0x0045 // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI22_0] */
	LONG $0xe16ffdc5               // vmovdqa    ymm4, ymm1
	LONG $0xd96ffdc5               // vmovdqa    ymm3, ymm1
	LONG $0xd16ffdc5               // vmovdqa    ymm2, ymm1

LBB22_4:
	LONG $0x6c6ffec5; WORD $0x08c7 // vmovdqu    ymm5, yword [rdi + 8*rax + 8]
	LONG $0x746ffec5; WORD $0x28c7 // vmovdqu    ymm6, yword [rdi + 8*rax + 40]
	LONG $0x7c6ffec5; WORD $0x48c7 // vmovdqu    ymm7, yword [rdi + 8*rax + 72]
	LONG $0xc0ef75c5               // vpxor    ymm8, ymm1, ymm0
	LONG $0xc8ef55c5               // vpxor    ymm9, ymm5, ymm0
	LONG $0x373d42c4; BYTE $0xc1   // vpcmpgtq    ymm8, ymm8, ymm9
	LONG $0x4b75e3c4; WORD $0x80cd // vblendvpd    ymm1, ymm1, ymm5, ymm8
	LONG $0xe8efddc5               // vpxor    ymm5, ymm4, ymm0
	LONG $0xc0ef4dc5               // vpxor    ymm8, ymm6, ymm0
	LONG $0x3755c2c4; BYTE $0xe8   // vpcmpgtq    ymm5, ymm5, ymm8
	LONG $0x4b5de3c4; WORD $0x50e6 // vblendvpd    ymm4, ymm4, ymm6, ymm5
	LONG $0xe8efe5c5               // vpxor    ymm5, ymm3, ymm0
	LONG $0xf0efc5c5               // vpxor    ymm6, ymm7, ymm0
	LONG $0x3755e2c4; BYTE $0xee   // vpcmpgtq    ymm5, ymm5, ymm6
	LONG $0x4b65e3c4; WORD $0x50df // vblendvpd    ymm3, ymm3, ymm7, ymm5
	LONG $0x6c6ffec5; WORD $0x68c7 // vmovdqu    ymm5, yword [rdi + 8*rax + 104]
	LONG $0xf0efedc5               // vpxor    ymm6, ymm2, ymm0
	LONG $0xf8efd5c5               // vpxor    ymm7, ymm5, ymm0
	LONG $0x374de2c4; BYTE $0xf7   // vpcmpgtq    ymm6, ymm6, ymm7
	LONG $0x4b6de3c4; WORD $0x60d5 // vblendvpd    ymm2, ymm2, ymm5, ymm6
	LONG $0x10c08348               // add    rax, 16
	WORD $0x3949; BYTE $0xc1       // cmp    r9, rax
	JNE  LBB22_4
	LONG $0xe8eff5c5               // vpxor    ymm5, ymm1, ymm0
	LONG $0xf0efddc5               // vpxor    ymm6, ymm4, ymm0
	LONG $0x374de2c4; BYTE $0xed   // vpcmpgtq    ymm5, ymm6, ymm5
	LONG $0x4b5de3c4; WORD $0x50c9 // vblendvpd    ymm1, ymm4, ymm1, ymm5
	LONG $0xe057f5c5               // vxorpd    ymm4, ymm1, ymm0
	LONG $0xe8efe5c5               // vpxor    ymm5, ymm3, ymm0
	LONG $0x3755e2c4; BYTE $0xe4   // vpcmpgtq    ymm4, ymm5, ymm4
	LONG $0x4b65e3c4; WORD $0x40c9 // vblendvpd    ymm1, ymm3, ymm1, ymm4
	LONG $0xd857f5c5               // vxorpd    ymm3, ymm1, ymm0
	LONG $0xe0efedc5               // vpxor    ymm4, ymm2, ymm0
	LONG $0x375de2c4; BYTE $0xdb   // vpcmpgtq    ymm3, ymm4, ymm3
	LONG $0x4b6de3c4; WORD $0x30c9 // vblendvpd    ymm1, ymm2, ymm1, ymm3
	LONG $0x197de3c4; WORD $0x01ca // vextractf128    xmm2, ymm1, 1
	LONG $0xd857f1c5               // vxorpd    xmm3, xmm1, xmm0
	LONG $0xe057e9c5               // vxorpd    xmm4, xmm2, xmm0
	LONG $0x3759e2c4; BYTE $0xdb   // vpcmpgtq    xmm3, xmm4, xmm3
	LONG $0x4b69e3c4; WORD $0x30c9 // vblendvpd    xmm1, xmm2, xmm1, xmm3
	LONG $0x0479e3c4; WORD $0x4ed1 // vpermilps    xmm2, xmm1, 78
	LONG $0xd857f1c5               // vxorpd    xmm3, xmm1, xmm0
	LONG $0xc057e9c5               // vxorpd    xmm0, xmm2, xmm0
	LONG $0x3779e2c4; BYTE $0xc3   // vpcmpgtq    xmm0, xmm0, xmm3
	LONG $0x4b69e3c4; WORD $0x00c1 // vblendvpd    xmm0, xmm2, xmm1, xmm0
	LONG $0x7ef9e1c4; BYTE $0xc0   // vmovq    rax, xmm0
	WORD $0x394d; BYTE $0xc8       // cmp    r8, r9
	JE   LBB22_7

LBB22_6:
	LONG $0xcf148b48         // mov    rdx, qword [rdi + 8*rcx]
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	LONG $0xc2420f48         // cmovb    rax, rdx
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xca // cmp    r10, rcx
	JNE  LBB22_6

LBB22_7:
	WORD $0x8948; BYTE $0x06 // mov    qword [rsi], rax
	VZEROUPPER
	RET

DATA LCDATA3<>+0x000(SB)/8, $0x8000000000000000
GLOBL LCDATA3<>(SB), 8, $8

TEXT 路_uint64_avx2_max(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX
	LEAQ LCDATA3<>(SB), BP

	WORD $0x8b48; BYTE $0x07       // mov    rax, qword [rdi]
	WORD $0xd285                   // test    edx, edx
	JLE  LBB23_7
	WORD $0x8941; BYTE $0xd2       // mov    r10d, edx
	LONG $0x01fa8349               // cmp    r10, 1
	JE   LBB23_7
	LONG $0xff428d4d               // lea    r8, [r10 - 1]
	LONG $0x000001b9; BYTE $0x00   // mov    ecx, 1
	LONG $0x0ff88349               // cmp    r8, 15
	JBE  LBB23_6
	WORD $0x894d; BYTE $0xc1       // mov    r9, r8
	LONG $0xf0e18349               // and    r9, -16
	LONG $0x01498d49               // lea    rcx, [r9 + 1]
	LONG $0x6ef9e1c4; BYTE $0xc0   // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc8   // vpbroadcastq    ymm1, xmm0
	WORD $0xc031                   // xor    eax, eax
	LONG $0x597de2c4; WORD $0x0045 // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI23_0] */
	LONG $0xe16ffdc5               // vmovdqa    ymm4, ymm1
	LONG $0xd96ffdc5               // vmovdqa    ymm3, ymm1
	LONG $0xd16ffdc5               // vmovdqa    ymm2, ymm1

LBB23_4:
	LONG $0x6c6ffec5; WORD $0x08c7 // vmovdqu    ymm5, yword [rdi + 8*rax + 8]
	LONG $0x746ffec5; WORD $0x28c7 // vmovdqu    ymm6, yword [rdi + 8*rax + 40]
	LONG $0x7c6ffec5; WORD $0x48c7 // vmovdqu    ymm7, yword [rdi + 8*rax + 72]
	LONG $0xc0ef75c5               // vpxor    ymm8, ymm1, ymm0
	LONG $0xc8ef55c5               // vpxor    ymm9, ymm5, ymm0
	LONG $0x373542c4; BYTE $0xc0   // vpcmpgtq    ymm8, ymm9, ymm8
	LONG $0x4b75e3c4; WORD $0x80cd // vblendvpd    ymm1, ymm1, ymm5, ymm8
	LONG $0xe8efddc5               // vpxor    ymm5, ymm4, ymm0
	LONG $0xc0ef4dc5               // vpxor    ymm8, ymm6, ymm0
	LONG $0x373de2c4; BYTE $0xed   // vpcmpgtq    ymm5, ymm8, ymm5
	LONG $0x4b5de3c4; WORD $0x50e6 // vblendvpd    ymm4, ymm4, ymm6, ymm5
	LONG $0xe8efe5c5               // vpxor    ymm5, ymm3, ymm0
	LONG $0xf0efc5c5               // vpxor    ymm6, ymm7, ymm0
	LONG $0x374de2c4; BYTE $0xed   // vpcmpgtq    ymm5, ymm6, ymm5
	LONG $0x4b65e3c4; WORD $0x50df // vblendvpd    ymm3, ymm3, ymm7, ymm5
	LONG $0x6c6ffec5; WORD $0x68c7 // vmovdqu    ymm5, yword [rdi + 8*rax + 104]
	LONG $0xf0efedc5               // vpxor    ymm6, ymm2, ymm0
	LONG $0xf8efd5c5               // vpxor    ymm7, ymm5, ymm0
	LONG $0x3745e2c4; BYTE $0xf6   // vpcmpgtq    ymm6, ymm7, ymm6
	LONG $0x4b6de3c4; WORD $0x60d5 // vblendvpd    ymm2, ymm2, ymm5, ymm6
	LONG $0x10c08348               // add    rax, 16
	WORD $0x3949; BYTE $0xc1       // cmp    r9, rax
	JNE  LBB23_4
	LONG $0xe8efddc5               // vpxor    ymm5, ymm4, ymm0
	LONG $0xf0eff5c5               // vpxor    ymm6, ymm1, ymm0
	LONG $0x374de2c4; BYTE $0xed   // vpcmpgtq    ymm5, ymm6, ymm5
	LONG $0x4b5de3c4; WORD $0x50c9 // vblendvpd    ymm1, ymm4, ymm1, ymm5
	LONG $0xe057f5c5               // vxorpd    ymm4, ymm1, ymm0
	LONG $0xe8efe5c5               // vpxor    ymm5, ymm3, ymm0
	LONG $0x375de2c4; BYTE $0xe5   // vpcmpgtq    ymm4, ymm4, ymm5
	LONG $0x4b65e3c4; WORD $0x40c9 // vblendvpd    ymm1, ymm3, ymm1, ymm4
	LONG $0xd857f5c5               // vxorpd    ymm3, ymm1, ymm0
	LONG $0xe0efedc5               // vpxor    ymm4, ymm2, ymm0
	LONG $0x3765e2c4; BYTE $0xdc   // vpcmpgtq    ymm3, ymm3, ymm4
	LONG $0x4b6de3c4; WORD $0x30c9 // vblendvpd    ymm1, ymm2, ymm1, ymm3
	LONG $0x197de3c4; WORD $0x01ca // vextractf128    xmm2, ymm1, 1
	LONG $0xd857e9c5               // vxorpd    xmm3, xmm2, xmm0
	LONG $0xe057f1c5               // vxorpd    xmm4, xmm1, xmm0
	LONG $0x3759e2c4; BYTE $0xdb   // vpcmpgtq    xmm3, xmm4, xmm3
	LONG $0x4b69e3c4; WORD $0x30c9 // vblendvpd    xmm1, xmm2, xmm1, xmm3
	LONG $0x0479e3c4; WORD $0x4ed1 // vpermilps    xmm2, xmm1, 78
	LONG $0xd857f1c5               // vxorpd    xmm3, xmm1, xmm0
	LONG $0xc057e9c5               // vxorpd    xmm0, xmm2, xmm0
	LONG $0x3761e2c4; BYTE $0xc0   // vpcmpgtq    xmm0, xmm3, xmm0
	LONG $0x4b69e3c4; WORD $0x00c1 // vblendvpd    xmm0, xmm2, xmm1, xmm0
	LONG $0x7ef9e1c4; BYTE $0xc0   // vmovq    rax, xmm0
	WORD $0x394d; BYTE $0xc8       // cmp    r8, r9
	JE   LBB23_7

LBB23_6:
	LONG $0xcf148b48         // mov    rdx, qword [rdi + 8*rcx]
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	LONG $0xc2470f48         // cmova    rax, rdx
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xca // cmp    r10, rcx
	JNE  LBB23_6

LBB23_7:
	WORD $0x8948; BYTE $0x06 // mov    qword [rsi], rax
	VZEROUPPER
	RET

TEXT 路_uint64_avx2_add(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB24_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x0ff88349         // cmp    r8, 15
	JA   LBB24_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB24_3

LBB24_7:
	LONG $0xc2148d4e         // lea    r10, [rdx + 8*r8]
	LONG $0xc7048d4a         // lea    rax, [rdi + 8*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd6970f41         // seta    r14b
	LONG $0xc6048d4a         // lea    rax, [rsi + 8*r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB24_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB24_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x0fe18341         // and    r9d, 15
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x294d; BYTE $0xcb // sub    r11, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB24_10:
	LONG $0x6f7ea1c4; WORD $0xd604             // vmovdqu    ymm0, yword [rsi + 8*r10]
	LONG $0x6f7ea1c4; WORD $0xd64c; BYTE $0x20 // vmovdqu    ymm1, yword [rsi + 8*r10 + 32]
	LONG $0x6f7ea1c4; WORD $0xd654; BYTE $0x40 // vmovdqu    ymm2, yword [rsi + 8*r10 + 64]
	LONG $0x6f7ea1c4; WORD $0xd65c; BYTE $0x60 // vmovdqu    ymm3, yword [rsi + 8*r10 + 96]
	LONG $0xd47da1c4; WORD $0xd704             // vpaddq    ymm0, ymm0, yword [rdi + 8*r10]
	LONG $0xd475a1c4; WORD $0xd74c; BYTE $0x20 // vpaddq    ymm1, ymm1, yword [rdi + 8*r10 + 32]
	LONG $0xd46da1c4; WORD $0xd754; BYTE $0x40 // vpaddq    ymm2, ymm2, yword [rdi + 8*r10 + 64]
	LONG $0xd465a1c4; WORD $0xd75c; BYTE $0x60 // vpaddq    ymm3, ymm3, yword [rdi + 8*r10 + 96]
	LONG $0x7f7ea1c4; WORD $0xd204             // vmovdqu    yword [rdx + 8*r10], ymm0
	LONG $0x7f7ea1c4; WORD $0xd24c; BYTE $0x20 // vmovdqu    yword [rdx + 8*r10 + 32], ymm1
	LONG $0x7f7ea1c4; WORD $0xd254; BYTE $0x40 // vmovdqu    yword [rdx + 8*r10 + 64], ymm2
	LONG $0x7f7ea1c4; WORD $0xd25c; BYTE $0x60 // vmovdqu    yword [rdx + 8*r10 + 96], ymm3
	LONG $0x10c28349                           // add    r10, 16
	WORD $0x394d; BYTE $0xd3                   // cmp    r11, r10
	JNE  LBB24_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB24_12

LBB24_3:
	WORD $0x2944; BYTE $0xd9 // sub    ecx, r11d
	WORD $0x894d; BYTE $0xd9 // mov    r9, r11
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB24_5

LBB24_4:
	LONG $0xde048b4a // mov    rax, qword [rsi + 8*r11]
	LONG $0xdf04034a // add    rax, qword [rdi + 8*r11]
	LONG $0xda04894a // mov    qword [rdx + 8*r11], rax
	LONG $0x01c38349 // add    r11, 1
	LONG $0xffc18348 // add    rcx, -1
	JNE  LBB24_4

LBB24_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB24_12

LBB24_6:
	LONG $0xde048b4a             // mov    rax, qword [rsi + 8*r11]
	LONG $0xdf04034a             // add    rax, qword [rdi + 8*r11]
	LONG $0xda04894a             // mov    qword [rdx + 8*r11], rax
	LONG $0xde448b4a; BYTE $0x08 // mov    rax, qword [rsi + 8*r11 + 8]
	LONG $0xdf44034a; BYTE $0x08 // add    rax, qword [rdi + 8*r11 + 8]
	LONG $0xda44894a; BYTE $0x08 // mov    qword [rdx + 8*r11 + 8], rax
	LONG $0xde448b4a; BYTE $0x10 // mov    rax, qword [rsi + 8*r11 + 16]
	LONG $0xdf44034a; BYTE $0x10 // add    rax, qword [rdi + 8*r11 + 16]
	LONG $0xda44894a; BYTE $0x10 // mov    qword [rdx + 8*r11 + 16], rax
	LONG $0xde448b4a; BYTE $0x18 // mov    rax, qword [rsi + 8*r11 + 24]
	LONG $0xdf44034a; BYTE $0x18 // add    rax, qword [rdi + 8*r11 + 24]
	LONG $0xda44894a; BYTE $0x18 // mov    qword [rdx + 8*r11 + 24], rax
	LONG $0x04c38349             // add    r11, 4
	WORD $0x394d; BYTE $0xd8     // cmp    r8, r11
	JNE  LBB24_6

LBB24_12:
	VZEROUPPER
	RET

TEXT 路_uint64_avx2_sub(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB25_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x0ff88349         // cmp    r8, 15
	JA   LBB25_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB25_3

LBB25_7:
	LONG $0xc2148d4e         // lea    r10, [rdx + 8*r8]
	LONG $0xc7048d4a         // lea    rax, [rdi + 8*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd6970f41         // seta    r14b
	LONG $0xc6048d4a         // lea    rax, [rsi + 8*r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB25_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB25_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x0fe18341         // and    r9d, 15
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x294d; BYTE $0xcb // sub    r11, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB25_10:
	LONG $0x6f7ea1c4; WORD $0xd704             // vmovdqu    ymm0, yword [rdi + 8*r10]
	LONG $0x6f7ea1c4; WORD $0xd74c; BYTE $0x20 // vmovdqu    ymm1, yword [rdi + 8*r10 + 32]
	LONG $0x6f7ea1c4; WORD $0xd754; BYTE $0x40 // vmovdqu    ymm2, yword [rdi + 8*r10 + 64]
	LONG $0x6f7ea1c4; WORD $0xd75c; BYTE $0x60 // vmovdqu    ymm3, yword [rdi + 8*r10 + 96]
	LONG $0xfb7da1c4; WORD $0xd604             // vpsubq    ymm0, ymm0, yword [rsi + 8*r10]
	LONG $0xfb75a1c4; WORD $0xd64c; BYTE $0x20 // vpsubq    ymm1, ymm1, yword [rsi + 8*r10 + 32]
	LONG $0xfb6da1c4; WORD $0xd654; BYTE $0x40 // vpsubq    ymm2, ymm2, yword [rsi + 8*r10 + 64]
	LONG $0xfb65a1c4; WORD $0xd65c; BYTE $0x60 // vpsubq    ymm3, ymm3, yword [rsi + 8*r10 + 96]
	LONG $0x7f7ea1c4; WORD $0xd204             // vmovdqu    yword [rdx + 8*r10], ymm0
	LONG $0x7f7ea1c4; WORD $0xd24c; BYTE $0x20 // vmovdqu    yword [rdx + 8*r10 + 32], ymm1
	LONG $0x7f7ea1c4; WORD $0xd254; BYTE $0x40 // vmovdqu    yword [rdx + 8*r10 + 64], ymm2
	LONG $0x7f7ea1c4; WORD $0xd25c; BYTE $0x60 // vmovdqu    yword [rdx + 8*r10 + 96], ymm3
	LONG $0x10c28349                           // add    r10, 16
	WORD $0x394d; BYTE $0xd3                   // cmp    r11, r10
	JNE  LBB25_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB25_12

LBB25_3:
	WORD $0x2944; BYTE $0xd9 // sub    ecx, r11d
	WORD $0x894d; BYTE $0xd9 // mov    r9, r11
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB25_5

LBB25_4:
	LONG $0xdf048b4a // mov    rax, qword [rdi + 8*r11]
	LONG $0xde042b4a // sub    rax, qword [rsi + 8*r11]
	LONG $0xda04894a // mov    qword [rdx + 8*r11], rax
	LONG $0x01c38349 // add    r11, 1
	LONG $0xffc18348 // add    rcx, -1
	JNE  LBB25_4

LBB25_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB25_12

LBB25_6:
	LONG $0xdf048b4a             // mov    rax, qword [rdi + 8*r11]
	LONG $0xde042b4a             // sub    rax, qword [rsi + 8*r11]
	LONG $0xda04894a             // mov    qword [rdx + 8*r11], rax
	LONG $0xdf448b4a; BYTE $0x08 // mov    rax, qword [rdi + 8*r11 + 8]
	LONG $0xde442b4a; BYTE $0x08 // sub    rax, qword [rsi + 8*r11 + 8]
	LONG $0xda44894a; BYTE $0x08 // mov    qword [rdx + 8*r11 + 8], rax
	LONG $0xdf448b4a; BYTE $0x10 // mov    rax, qword [rdi + 8*r11 + 16]
	LONG $0xde442b4a; BYTE $0x10 // sub    rax, qword [rsi + 8*r11 + 16]
	LONG $0xda44894a; BYTE $0x10 // mov    qword [rdx + 8*r11 + 16], rax
	LONG $0xdf448b4a; BYTE $0x18 // mov    rax, qword [rdi + 8*r11 + 24]
	LONG $0xde442b4a; BYTE $0x18 // sub    rax, qword [rsi + 8*r11 + 24]
	LONG $0xda44894a; BYTE $0x18 // mov    qword [rdx + 8*r11 + 24], rax
	LONG $0x04c38349             // add    r11, 4
	WORD $0x394d; BYTE $0xd8     // cmp    r8, r11
	JNE  LBB25_6

LBB25_12:
	VZEROUPPER
	RET

TEXT 路_uint64_avx2_mul(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB26_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x0ff88349         // cmp    r8, 15
	JA   LBB26_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB26_3

LBB26_7:
	LONG $0xc2148d4e         // lea    r10, [rdx + 8*r8]
	LONG $0xc7048d4a         // lea    rax, [rdi + 8*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd6970f41         // seta    r14b
	LONG $0xc6048d4a         // lea    rax, [rsi + 8*r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB26_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB26_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x0fe18341         // and    r9d, 15
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x294d; BYTE $0xcb // sub    r11, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB26_10:
	LONG $0x6f7ea1c4; WORD $0xd70c             // vmovdqu    ymm1, yword [rdi + 8*r10]
	LONG $0x6f7ea1c4; WORD $0xd754; BYTE $0x20 // vmovdqu    ymm2, yword [rdi + 8*r10 + 32]
	LONG $0x6f7ea1c4; WORD $0xd75c; BYTE $0x40 // vmovdqu    ymm3, yword [rdi + 8*r10 + 64]
	LONG $0x6f7ea1c4; WORD $0xd744; BYTE $0x60 // vmovdqu    ymm0, yword [rdi + 8*r10 + 96]
	LONG $0x6f7ea1c4; WORD $0xd624             // vmovdqu    ymm4, yword [rsi + 8*r10]
	LONG $0x6f7ea1c4; WORD $0xd66c; BYTE $0x20 // vmovdqu    ymm5, yword [rsi + 8*r10 + 32]
	LONG $0x6f7ea1c4; WORD $0xd674; BYTE $0x40 // vmovdqu    ymm6, yword [rsi + 8*r10 + 64]
	LONG $0x6f7ea1c4; WORD $0xd67c; BYTE $0x60 // vmovdqu    ymm7, yword [rsi + 8*r10 + 96]
	LONG $0xd473bdc5; BYTE $0x20               // vpsrlq    ymm8, ymm4, 32
	LONG $0xc1f43dc5                           // vpmuludq    ymm8, ymm8, ymm1
	LONG $0xd173b5c5; BYTE $0x20               // vpsrlq    ymm9, ymm1, 32
	LONG $0xccf435c5                           // vpmuludq    ymm9, ymm9, ymm4
	LONG $0xd43541c4; BYTE $0xc0               // vpaddq    ymm8, ymm9, ymm8
	LONG $0x733dc1c4; WORD $0x20f0             // vpsllq    ymm8, ymm8, 32
	LONG $0xc9f4ddc5                           // vpmuludq    ymm1, ymm4, ymm1
	LONG $0xc9d4bdc5                           // vpaddq    ymm1, ymm8, ymm1
	LONG $0xd573ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm5, 32
	LONG $0xe2f4ddc5                           // vpmuludq    ymm4, ymm4, ymm2
	LONG $0xd273bdc5; BYTE $0x20               // vpsrlq    ymm8, ymm2, 32
	LONG $0xc5f43dc5                           // vpmuludq    ymm8, ymm8, ymm5
	LONG $0xe4d4bdc5                           // vpaddq    ymm4, ymm8, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xd2f4d5c5                           // vpmuludq    ymm2, ymm5, ymm2
	LONG $0xd4d4edc5                           // vpaddq    ymm2, ymm2, ymm4
	LONG $0xd673ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm6, 32
	LONG $0xe3f4ddc5                           // vpmuludq    ymm4, ymm4, ymm3
	LONG $0xd373d5c5; BYTE $0x20               // vpsrlq    ymm5, ymm3, 32
	LONG $0xedf4cdc5                           // vpmuludq    ymm5, ymm6, ymm5
	LONG $0xe4d4d5c5                           // vpaddq    ymm4, ymm5, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xdbf4cdc5                           // vpmuludq    ymm3, ymm6, ymm3
	LONG $0xdcd4e5c5                           // vpaddq    ymm3, ymm3, ymm4
	LONG $0xd773ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm7, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xd073d5c5; BYTE $0x20               // vpsrlq    ymm5, ymm0, 32
	LONG $0xedf4c5c5                           // vpmuludq    ymm5, ymm7, ymm5
	LONG $0xe4d4d5c5                           // vpaddq    ymm4, ymm5, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xc0f4c5c5                           // vpmuludq    ymm0, ymm7, ymm0
	LONG $0xc4d4fdc5                           // vpaddq    ymm0, ymm0, ymm4
	LONG $0x7f7ea1c4; WORD $0xd20c             // vmovdqu    yword [rdx + 8*r10], ymm1
	LONG $0x7f7ea1c4; WORD $0xd254; BYTE $0x20 // vmovdqu    yword [rdx + 8*r10 + 32], ymm2
	LONG $0x7f7ea1c4; WORD $0xd25c; BYTE $0x40 // vmovdqu    yword [rdx + 8*r10 + 64], ymm3
	LONG $0x7f7ea1c4; WORD $0xd244; BYTE $0x60 // vmovdqu    yword [rdx + 8*r10 + 96], ymm0
	LONG $0x10c28349                           // add    r10, 16
	WORD $0x394d; BYTE $0xd3                   // cmp    r11, r10
	JNE  LBB26_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB26_12

LBB26_3:
	WORD $0x2944; BYTE $0xd9 // sub    ecx, r11d
	WORD $0x894d; BYTE $0xd9 // mov    r9, r11
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB26_5

LBB26_4:
	LONG $0xde048b4a             // mov    rax, qword [rsi + 8*r11]
	LONG $0x04af0f4a; BYTE $0xdf // imul    rax, qword [rdi + 8*r11]
	LONG $0xda04894a             // mov    qword [rdx + 8*r11], rax
	LONG $0x01c38349             // add    r11, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB26_4

LBB26_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB26_12

LBB26_6:
	LONG $0xde048b4a               // mov    rax, qword [rsi + 8*r11]
	LONG $0x04af0f4a; BYTE $0xdf   // imul    rax, qword [rdi + 8*r11]
	LONG $0xda04894a               // mov    qword [rdx + 8*r11], rax
	LONG $0xde448b4a; BYTE $0x08   // mov    rax, qword [rsi + 8*r11 + 8]
	LONG $0x44af0f4a; WORD $0x08df // imul    rax, qword [rdi + 8*r11 + 8]
	LONG $0xda44894a; BYTE $0x08   // mov    qword [rdx + 8*r11 + 8], rax
	LONG $0xde448b4a; BYTE $0x10   // mov    rax, qword [rsi + 8*r11 + 16]
	LONG $0x44af0f4a; WORD $0x10df // imul    rax, qword [rdi + 8*r11 + 16]
	LONG $0xda44894a; BYTE $0x10   // mov    qword [rdx + 8*r11 + 16], rax
	LONG $0xde448b4a; BYTE $0x18   // mov    rax, qword [rsi + 8*r11 + 24]
	LONG $0x44af0f4a; WORD $0x18df // imul    rax, qword [rdi + 8*r11 + 24]
	LONG $0xda44894a; BYTE $0x18   // mov    qword [rdx + 8*r11 + 24], rax
	LONG $0x04c38349               // add    r11, 4
	WORD $0x394d; BYTE $0xd8       // cmp    r8, r11
	JNE  LBB26_6

LBB26_12:
	VZEROUPPER
	RET

TEXT 路_uint64_avx2_div(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB27_12
	WORD $0x8949; BYTE $0xd0 // mov    r8, rdx
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x03f98349         // cmp    r9, 3
	JA   LBB27_7
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d
	JMP  LBB27_3

LBB27_7:
	LONG $0xc8148d4b         // lea    rdx, [r8 + 8*r9]
	LONG $0xcf048d4a         // lea    rax, [rdi + 8*r9]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd3970f41         // seta    r11b
	LONG $0xce048d4a         // lea    rax, [rsi + 8*r9]
	WORD $0x3948; BYTE $0xfa // cmp    rdx, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xf2 // cmp    rdx, rsi
	WORD $0x970f; BYTE $0xd2 // seta    dl
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d
	WORD $0x8441; BYTE $0xdb // test    r11b, bl
	JNE  LBB27_3
	WORD $0xd020             // and    al, dl
	JNE  LBB27_3
	WORD $0x8941; BYTE $0xcb // mov    r11d, ecx
	LONG $0x03e38341         // and    r11d, 3
	WORD $0x894d; BYTE $0xca // mov    r10, r9
	WORD $0x294d; BYTE $0xda // sub    r10, r11
	WORD $0xdb31             // xor    ebx, ebx

LBB27_10:
	LONG $0x046ffac5; BYTE $0xdf               // vmovdqu    xmm0, oword [rdi + 8*rbx]
	LONG $0x4c6ffac5; WORD $0x10df             // vmovdqu    xmm1, oword [rdi + 8*rbx + 16]
	LONG $0x16f9e3c4; WORD $0x01c0             // vpextrq    rax, xmm0, 1
	LONG $0x146ffac5; BYTE $0xde               // vmovdqu    xmm2, oword [rsi + 8*rbx]
	LONG $0x5c6ffac5; WORD $0x10de             // vmovdqu    xmm3, oword [rsi + 8*rbx + 16]
	LONG $0x16f9c3c4; WORD $0x01d6             // vpextrq    r14, xmm2, 1
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf749; BYTE $0xf6                   // div    r14
	LONG $0x6ef9e1c4; BYTE $0xe0               // vmovq    xmm4, rax
	LONG $0x7ef9e1c4; BYTE $0xc0               // vmovq    rax, xmm0
	LONG $0x7ef9c1c4; BYTE $0xd6               // vmovq    r14, xmm2
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf749; BYTE $0xf6                   // div    r14
	LONG $0x6ef9e1c4; BYTE $0xc0               // vmovq    xmm0, rax
	LONG $0x16f9e3c4; WORD $0x01c8             // vpextrq    rax, xmm1, 1
	LONG $0xc46cf9c5                           // vpunpcklqdq    xmm0, xmm0, xmm4
	LONG $0x16f9c3c4; WORD $0x01de             // vpextrq    r14, xmm3, 1
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf749; BYTE $0xf6                   // div    r14
	LONG $0x6ef9e1c4; BYTE $0xd0               // vmovq    xmm2, rax
	LONG $0x7ef9e1c4; BYTE $0xc8               // vmovq    rax, xmm1
	LONG $0x7ef9c1c4; BYTE $0xde               // vmovq    r14, xmm3
	WORD $0xd231                               // xor    edx, edx
	WORD $0xf749; BYTE $0xf6                   // div    r14
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xca6cf1c5                           // vpunpcklqdq    xmm1, xmm1, xmm2
	LONG $0x7f7ac1c4; WORD $0xd84c; BYTE $0x10 // vmovdqu    oword [r8 + 8*rbx + 16], xmm1
	LONG $0x7f7ac1c4; WORD $0xd804             // vmovdqu    oword [r8 + 8*rbx], xmm0
	LONG $0x04c38348                           // add    rbx, 4
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	JNE  LBB27_10
	WORD $0x854d; BYTE $0xdb                   // test    r11, r11
	JE   LBB27_12

LBB27_3:
	WORD $0x2944; BYTE $0xd1 // sub    ecx, r10d
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	WORD $0xc1f6; BYTE $0x01 // test    cl, 1
	JE   LBB27_5
	LONG $0xd7048b4a         // mov    rax, qword [rdi + 8*r10]
	WORD $0xd231             // xor    edx, edx
	LONG $0xd634f74a         // div    qword [rsi + 8*r10]
	LONG $0xd004894b         // mov    qword [r8 + 8*r10], rax
	LONG $0x015a8d49         // lea    rbx, [r10 + 1]

LBB27_5:
	LONG $0x01c28349         // add    r10, 1
	WORD $0x394d; BYTE $0xd1 // cmp    r9, r10
	JE   LBB27_12

LBB27_6:
	LONG $0xdf048b48             // mov    rax, qword [rdi + 8*rbx]
	WORD $0xd231                 // xor    edx, edx
	LONG $0xde34f748             // div    qword [rsi + 8*rbx]
	LONG $0xd8048949             // mov    qword [r8 + 8*rbx], rax
	LONG $0xdf448b48; BYTE $0x08 // mov    rax, qword [rdi + 8*rbx + 8]
	WORD $0xd231                 // xor    edx, edx
	LONG $0xde74f748; BYTE $0x08 // div    qword [rsi + 8*rbx + 8]
	LONG $0xd8448949; BYTE $0x08 // mov    qword [r8 + 8*rbx + 8], rax
	LONG $0x02c38348             // add    rbx, 2
	WORD $0x3949; BYTE $0xd9     // cmp    r9, rbx
	JNE  LBB27_6

LBB27_12:
	RET

TEXT 路_int8_avx2_sum(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB28_1
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0x7ff88349         // cmp    r8, 127
	JA   LBB28_4
	WORD $0xc931             // xor    ecx, ecx
	WORD $0xc031             // xor    eax, eax
	JMP  LBB28_7

LBB28_1:
	WORD $0xc031 // xor    eax, eax
	JMP  LBB28_8

LBB28_4:
	WORD $0xe283; BYTE $0x7f // and    edx, 127
	WORD $0x894c; BYTE $0xc1 // mov    rcx, r8
	WORD $0x2948; BYTE $0xd1 // sub    rcx, rdx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0
	WORD $0xc031             // xor    eax, eax
	LONG $0xc9eff1c5         // vpxor    xmm1, xmm1, xmm1
	LONG $0xd2efe9c5         // vpxor    xmm2, xmm2, xmm2
	LONG $0xdbefe1c5         // vpxor    xmm3, xmm3, xmm3

LBB28_5:
	LONG $0x04fcfdc5; BYTE $0x07   // vpaddb    ymm0, ymm0, yword [rdi + rax]
	LONG $0x4cfcf5c5; WORD $0x2007 // vpaddb    ymm1, ymm1, yword [rdi + rax + 32]
	LONG $0x54fcedc5; WORD $0x4007 // vpaddb    ymm2, ymm2, yword [rdi + rax + 64]
	LONG $0x5cfce5c5; WORD $0x6007 // vpaddb    ymm3, ymm3, yword [rdi + rax + 96]
	LONG $0x80e88348               // sub    rax, -128
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JNE  LBB28_5
	LONG $0xc0fcf5c5               // vpaddb    ymm0, ymm1, ymm0
	LONG $0xc0fcedc5               // vpaddb    ymm0, ymm2, ymm0
	LONG $0xc0fce5c5               // vpaddb    ymm0, ymm3, ymm0
	LONG $0x397de3c4; WORD $0x01c1 // vextracti128    xmm1, ymm0, 1
	LONG $0xc1fcf9c5               // vpaddb    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0x4e   // vpshufd    xmm1, xmm0, 78
	LONG $0xc1fcf9c5               // vpaddb    xmm0, xmm0, xmm1
	LONG $0xc9eff1c5               // vpxor    xmm1, xmm1, xmm1
	LONG $0xc1f6f9c5               // vpsadbw    xmm0, xmm0, xmm1
	LONG $0x1479e3c4; WORD $0x00c0 // vpextrb    eax, xmm0, 0
	WORD $0x8548; BYTE $0xd2       // test    rdx, rdx
	JE   LBB28_8

LBB28_7:
	WORD $0x0402; BYTE $0x0f // add    al, byte [rdi + rcx]
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc8 // cmp    r8, rcx
	JNE  LBB28_7

LBB28_8:
	WORD $0x0688 // mov    byte [rsi], al
	VZEROUPPER
	RET

DATA LCDATA4<>+0x000(SB)/8, $0x8080808080808080
DATA LCDATA4<>+0x008(SB)/8, $0x8080808080808080
GLOBL LCDATA4<>(SB), 8, $16

TEXT 路_int8_avx2_min(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX
	LEAQ LCDATA4<>(SB), BP

	WORD $0x078a                 // mov    al, byte [rdi]
	WORD $0xd285                 // test    edx, edx
	JLE  LBB29_12
	WORD $0x8941; BYTE $0xd2     // mov    r10d, edx
	LONG $0x01fa8349             // cmp    r10, 1
	JE   LBB29_12
	LONG $0xff428d4d             // lea    r8, [r10 - 1]
	LONG $0x000001b9; BYTE $0x00 // mov    ecx, 1
	LONG $0x3ff88349             // cmp    r8, 63
	JBE  LBB29_11
	WORD $0x894c; BYTE $0xc1     // mov    rcx, r8
	LONG $0xc0e18348             // and    rcx, -64
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0xc0518d48             // lea    rdx, [rcx - 64]
	WORD $0x8948; BYTE $0xd0     // mov    rax, rdx
	LONG $0x06e8c148             // shr    rax, 6
	LONG $0x01c08348             // add    rax, 1
	WORD $0x8941; BYTE $0xc1     // mov    r9d, eax
	LONG $0x01e18341             // and    r9d, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB29_4
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	WORD $0x2948; BYTE $0xc2     // sub    rdx, rax
	LONG $0x000001b8; BYTE $0x00 // mov    eax, 1
	LONG $0xc86ffdc5             // vmovdqa    ymm1, ymm0

LBB29_6:
	LONG $0x387de2c4; WORD $0x0704             // vpminsb    ymm0, ymm0, yword [rdi + rax]
	LONG $0x3875e2c4; WORD $0x074c; BYTE $0x20 // vpminsb    ymm1, ymm1, yword [rdi + rax + 32]
	LONG $0x387de2c4; WORD $0x0744; BYTE $0x40 // vpminsb    ymm0, ymm0, yword [rdi + rax + 64]
	LONG $0x3875e2c4; WORD $0x074c; BYTE $0x60 // vpminsb    ymm1, ymm1, yword [rdi + rax + 96]
	LONG $0x80e88348                           // sub    rax, -128
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB29_6
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB29_9

LBB29_8:
	LONG $0x3875e2c4; WORD $0x074c; BYTE $0x20 // vpminsb    ymm1, ymm1, yword [rdi + rax + 32]
	LONG $0x387de2c4; WORD $0x0704             // vpminsb    ymm0, ymm0, yword [rdi + rax]

LBB29_9:
	LONG $0x387de2c4; BYTE $0xc1   // vpminsb    ymm0, ymm0, ymm1
	LONG $0x397de3c4; WORD $0x01c1 // vextracti128    xmm1, ymm0, 1
	LONG $0x3879e2c4; BYTE $0xc1   // vpminsb    xmm0, xmm0, xmm1
	LONG $0x45eff9c5; BYTE $0x00   // vpxor    xmm0, xmm0, oword 0[rbp] /* [rip + .LCPI29_0] */
	LONG $0xd071f1c5; BYTE $0x08   // vpsrlw    xmm1, xmm0, 8
	LONG $0xc1daf9c5               // vpminub    xmm0, xmm0, xmm1
	LONG $0x4179e2c4; BYTE $0xc0   // vphminposuw    xmm0, xmm0
	LONG $0x1479e3c4; WORD $0x00c0 // vpextrb    eax, xmm0, 0
	WORD $0x8034                   // xor    al, -128
	WORD $0x3949; BYTE $0xc8       // cmp    r8, rcx
	JE   LBB29_12
	LONG $0x01c98348               // or    rcx, 1

LBB29_11:
	LONG $0x0f14b60f         // movzx    edx, byte [rdi + rcx]
	WORD $0xc238             // cmp    dl, al
	WORD $0xb60f; BYTE $0xc0 // movzx    eax, al
	WORD $0x4e0f; BYTE $0xc2 // cmovle    eax, edx
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xca // cmp    r10, rcx
	JNE  LBB29_11

LBB29_12:
	WORD $0x0688 // mov    byte [rsi], al
	VZEROUPPER
	RET

LBB29_4:
	LONG $0x000001b8; BYTE $0x00 // mov    eax, 1
	LONG $0xc86ffdc5             // vmovdqa    ymm1, ymm0
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JNE  LBB29_8
	JMP  LBB29_9

DATA LCDATA5<>+0x000(SB)/8, $0x7f7f7f7f7f7f7f7f
DATA LCDATA5<>+0x008(SB)/8, $0x7f7f7f7f7f7f7f7f
GLOBL LCDATA5<>(SB), 8, $16

TEXT 路_int8_avx2_max(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX
	LEAQ LCDATA5<>(SB), BP

	WORD $0x078a                 // mov    al, byte [rdi]
	WORD $0xd285                 // test    edx, edx
	JLE  LBB30_12
	WORD $0x8941; BYTE $0xd2     // mov    r10d, edx
	LONG $0x01fa8349             // cmp    r10, 1
	JE   LBB30_12
	LONG $0xff428d4d             // lea    r8, [r10 - 1]
	LONG $0x000001b9; BYTE $0x00 // mov    ecx, 1
	LONG $0x3ff88349             // cmp    r8, 63
	JBE  LBB30_11
	WORD $0x894c; BYTE $0xc1     // mov    rcx, r8
	LONG $0xc0e18348             // and    rcx, -64
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb    ymm0, xmm0
	LONG $0xc0518d48             // lea    rdx, [rcx - 64]
	WORD $0x8948; BYTE $0xd0     // mov    rax, rdx
	LONG $0x06e8c148             // shr    rax, 6
	LONG $0x01c08348             // add    rax, 1
	WORD $0x8941; BYTE $0xc1     // mov    r9d, eax
	LONG $0x01e18341             // and    r9d, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE   LBB30_4
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	WORD $0x2948; BYTE $0xc2     // sub    rdx, rax
	LONG $0x000001b8; BYTE $0x00 // mov    eax, 1
	LONG $0xc86ffdc5             // vmovdqa    ymm1, ymm0

LBB30_6:
	LONG $0x3c7de2c4; WORD $0x0704             // vpmaxsb    ymm0, ymm0, yword [rdi + rax]
	LONG $0x3c75e2c4; WORD $0x074c; BYTE $0x20 // vpmaxsb    ymm1, ymm1, yword [rdi + rax + 32]
	LONG $0x3c7de2c4; WORD $0x0744; BYTE $0x40 // vpmaxsb    ymm0, ymm0, yword [rdi + rax + 64]
	LONG $0x3c75e2c4; WORD $0x074c; BYTE $0x60 // vpmaxsb    ymm1, ymm1, yword [rdi + rax + 96]
	LONG $0x80e88348                           // sub    rax, -128
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB30_6
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB30_9

LBB30_8:
	LONG $0x3c75e2c4; WORD $0x074c; BYTE $0x20 // vpmaxsb    ymm1, ymm1, yword [rdi + rax + 32]
	LONG $0x3c7de2c4; WORD $0x0704             // vpmaxsb    ymm0, ymm0, yword [rdi + rax]

LBB30_9:
	LONG $0x3c7de2c4; BYTE $0xc1   // vpmaxsb    ymm0, ymm0, ymm1
	LONG $0x397de3c4; WORD $0x01c1 // vextracti128    xmm1, ymm0, 1
	LONG $0x3c79e2c4; BYTE $0xc1   // vpmaxsb    xmm0, xmm0, xmm1
	LONG $0x45eff9c5; BYTE $0x00   // vpxor    xmm0, xmm0, oword 0[rbp] /* [rip + .LCPI30_0] */
	LONG $0xd071f1c5; BYTE $0x08   // vpsrlw    xmm1, xmm0, 8
	LONG $0xc1daf9c5               // vpminub    xmm0, xmm0, xmm1
	LONG $0x4179e2c4; BYTE $0xc0   // vphminposuw    xmm0, xmm0
	LONG $0x1479e3c4; WORD $0x00c0 // vpextrb    eax, xmm0, 0
	WORD $0x7f34                   // xor    al, 127
	WORD $0x3949; BYTE $0xc8       // cmp    r8, rcx
	JE   LBB30_12
	LONG $0x01c98348               // or    rcx, 1

LBB30_11:
	LONG $0x0f14b60f         // movzx    edx, byte [rdi + rcx]
	WORD $0xc238             // cmp    dl, al
	WORD $0xb60f; BYTE $0xc0 // movzx    eax, al
	WORD $0x4d0f; BYTE $0xc2 // cmovge    eax, edx
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xca // cmp    r10, rcx
	JNE  LBB30_11

LBB30_12:
	WORD $0x0688 // mov    byte [rsi], al
	VZEROUPPER
	RET

LBB30_4:
	LONG $0x000001b8; BYTE $0x00 // mov    eax, 1
	LONG $0xc86ffdc5             // vmovdqa    ymm1, ymm0
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JNE  LBB30_8
	JMP  LBB30_9

TEXT 路_int8_avx2_add(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB31_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x7ff88349         // cmp    r8, 127
	JA   LBB31_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB31_3

LBB31_7:
	LONG $0x02148d4e         // lea    r10, [rdx + r8]
	LONG $0x07048d4a         // lea    rax, [rdi + r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd6970f41         // seta    r14b
	LONG $0x06048d4a         // lea    rax, [rsi + r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB31_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB31_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x7fe18341         // and    r9d, 127
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x294d; BYTE $0xcb // sub    r11, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB31_10:
	LONG $0x6f7ea1c4; WORD $0x1604             // vmovdqu    ymm0, yword [rsi + r10]
	LONG $0x6f7ea1c4; WORD $0x164c; BYTE $0x20 // vmovdqu    ymm1, yword [rsi + r10 + 32]
	LONG $0x6f7ea1c4; WORD $0x1654; BYTE $0x40 // vmovdqu    ymm2, yword [rsi + r10 + 64]
	LONG $0x6f7ea1c4; WORD $0x165c; BYTE $0x60 // vmovdqu    ymm3, yword [rsi + r10 + 96]
	LONG $0xfc7da1c4; WORD $0x1704             // vpaddb    ymm0, ymm0, yword [rdi + r10]
	LONG $0xfc75a1c4; WORD $0x174c; BYTE $0x20 // vpaddb    ymm1, ymm1, yword [rdi + r10 + 32]
	LONG $0xfc6da1c4; WORD $0x1754; BYTE $0x40 // vpaddb    ymm2, ymm2, yword [rdi + r10 + 64]
	LONG $0xfc65a1c4; WORD $0x175c; BYTE $0x60 // vpaddb    ymm3, ymm3, yword [rdi + r10 + 96]
	LONG $0x7f7ea1c4; WORD $0x1204             // vmovdqu    yword [rdx + r10], ymm0
	LONG $0x7f7ea1c4; WORD $0x124c; BYTE $0x20 // vmovdqu    yword [rdx + r10 + 32], ymm1
	LONG $0x7f7ea1c4; WORD $0x1254; BYTE $0x40 // vmovdqu    yword [rdx + r10 + 64], ymm2
	LONG $0x7f7ea1c4; WORD $0x125c; BYTE $0x60 // vmovdqu    yword [rdx + r10 + 96], ymm3
	LONG $0x80ea8349                           // sub    r10, -128
	WORD $0x394d; BYTE $0xd3                   // cmp    r11, r10
	JNE  LBB31_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB31_12

LBB31_3:
	WORD $0x2944; BYTE $0xd9 // sub    ecx, r11d
	WORD $0x894d; BYTE $0xd9 // mov    r9, r11
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB31_5

LBB31_4:
	LONG $0x04b60f42; BYTE $0x1e // movzx    eax, byte [rsi + r11]
	LONG $0x1f040242             // add    al, byte [rdi + r11]
	LONG $0x1a048842             // mov    byte [rdx + r11], al
	LONG $0x01c38349             // add    r11, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB31_4

LBB31_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB31_12

LBB31_6:
	LONG $0x04b60f42; BYTE $0x1e   // movzx    eax, byte [rsi + r11]
	LONG $0x1f040242               // add    al, byte [rdi + r11]
	LONG $0x1a048842               // mov    byte [rdx + r11], al
	LONG $0x44b60f42; WORD $0x011e // movzx    eax, byte [rsi + r11 + 1]
	LONG $0x1f440242; BYTE $0x01   // add    al, byte [rdi + r11 + 1]
	LONG $0x1a448842; BYTE $0x01   // mov    byte [rdx + r11 + 1], al
	LONG $0x44b60f42; WORD $0x021e // movzx    eax, byte [rsi + r11 + 2]
	LONG $0x1f440242; BYTE $0x02   // add    al, byte [rdi + r11 + 2]
	LONG $0x1a448842; BYTE $0x02   // mov    byte [rdx + r11 + 2], al
	LONG $0x44b60f42; WORD $0x031e // movzx    eax, byte [rsi + r11 + 3]
	LONG $0x1f440242; BYTE $0x03   // add    al, byte [rdi + r11 + 3]
	LONG $0x1a448842; BYTE $0x03   // mov    byte [rdx + r11 + 3], al
	LONG $0x04c38349               // add    r11, 4
	WORD $0x394d; BYTE $0xd8       // cmp    r8, r11
	JNE  LBB31_6

LBB31_12:
	VZEROUPPER
	RET

TEXT 路_int8_avx2_sub(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB32_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x7ff88349         // cmp    r8, 127
	JA   LBB32_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB32_3

LBB32_7:
	LONG $0x02148d4e         // lea    r10, [rdx + r8]
	LONG $0x07048d4a         // lea    rax, [rdi + r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd6970f41         // seta    r14b
	LONG $0x06048d4a         // lea    rax, [rsi + r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB32_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB32_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x7fe18341         // and    r9d, 127
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x294d; BYTE $0xcb // sub    r11, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB32_10:
	LONG $0x6f7ea1c4; WORD $0x1704             // vmovdqu    ymm0, yword [rdi + r10]
	LONG $0x6f7ea1c4; WORD $0x174c; BYTE $0x20 // vmovdqu    ymm1, yword [rdi + r10 + 32]
	LONG $0x6f7ea1c4; WORD $0x1754; BYTE $0x40 // vmovdqu    ymm2, yword [rdi + r10 + 64]
	LONG $0x6f7ea1c4; WORD $0x175c; BYTE $0x60 // vmovdqu    ymm3, yword [rdi + r10 + 96]
	LONG $0xf87da1c4; WORD $0x1604             // vpsubb    ymm0, ymm0, yword [rsi + r10]
	LONG $0xf875a1c4; WORD $0x164c; BYTE $0x20 // vpsubb    ymm1, ymm1, yword [rsi + r10 + 32]
	LONG $0xf86da1c4; WORD $0x1654; BYTE $0x40 // vpsubb    ymm2, ymm2, yword [rsi + r10 + 64]
	LONG $0xf865a1c4; WORD $0x165c; BYTE $0x60 // vpsubb    ymm3, ymm3, yword [rsi + r10 + 96]
	LONG $0x7f7ea1c4; WORD $0x1204             // vmovdqu    yword [rdx + r10], ymm0
	LONG $0x7f7ea1c4; WORD $0x124c; BYTE $0x20 // vmovdqu    yword [rdx + r10 + 32], ymm1
	LONG $0x7f7ea1c4; WORD $0x1254; BYTE $0x40 // vmovdqu    yword [rdx + r10 + 64], ymm2
	LONG $0x7f7ea1c4; WORD $0x125c; BYTE $0x60 // vmovdqu    yword [rdx + r10 + 96], ymm3
	LONG $0x80ea8349                           // sub    r10, -128
	WORD $0x394d; BYTE $0xd3                   // cmp    r11, r10
	JNE  LBB32_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB32_12

LBB32_3:
	WORD $0x2944; BYTE $0xd9 // sub    ecx, r11d
	WORD $0x894d; BYTE $0xd9 // mov    r9, r11
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB32_5

LBB32_4:
	LONG $0x04b60f42; BYTE $0x1f // movzx    eax, byte [rdi + r11]
	LONG $0x1e042a42             // sub    al, byte [rsi + r11]
	LONG $0x1a048842             // mov    byte [rdx + r11], al
	LONG $0x01c38349             // add    r11, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB32_4

LBB32_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB32_12

LBB32_6:
	LONG $0x04b60f42; BYTE $0x1f   // movzx    eax, byte [rdi + r11]
	LONG $0x1e042a42               // sub    al, byte [rsi + r11]
	LONG $0x1a048842               // mov    byte [rdx + r11], al
	LONG $0x44b60f42; WORD $0x011f // movzx    eax, byte [rdi + r11 + 1]
	LONG $0x1e442a42; BYTE $0x01   // sub    al, byte [rsi + r11 + 1]
	LONG $0x1a448842; BYTE $0x01   // mov    byte [rdx + r11 + 1], al
	LONG $0x44b60f42; WORD $0x021f // movzx    eax, byte [rdi + r11 + 2]
	LONG $0x1e442a42; BYTE $0x02   // sub    al, byte [rsi + r11 + 2]
	LONG $0x1a448842; BYTE $0x02   // mov    byte [rdx + r11 + 2], al
	LONG $0x44b60f42; WORD $0x031f // movzx    eax, byte [rdi + r11 + 3]
	LONG $0x1e442a42; BYTE $0x03   // sub    al, byte [rsi + r11 + 3]
	LONG $0x1a448842; BYTE $0x03   // mov    byte [rdx + r11 + 3], al
	LONG $0x04c38349               // add    r11, 4
	WORD $0x394d; BYTE $0xd8       // cmp    r8, r11
	JNE  LBB32_6

LBB32_12:
	VZEROUPPER
	RET

DATA LCDATA6<>+0x000(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA6<>+0x008(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA6<>+0x010(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA6<>+0x018(SB)/8, $0x00ff00ff00ff00ff
GLOBL LCDATA6<>(SB), 8, $32

TEXT 路_int8_avx2_mul(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX
	LEAQ LCDATA6<>(SB), BP

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB33_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x1ff88349         // cmp    r8, 31
	JA   LBB33_7
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d
	JMP  LBB33_3

LBB33_7:
	LONG $0x020c8d4e             // lea    r9, [rdx + r8]
	LONG $0x07048d4a             // lea    rax, [rdi + r8]
	WORD $0x3948; BYTE $0xd0     // cmp    rax, rdx
	LONG $0xd6970f41             // seta    r14b
	LONG $0x06048d4a             // lea    rax, [rsi + r8]
	WORD $0x3949; BYTE $0xf9     // cmp    r9, rdi
	WORD $0x970f; BYTE $0xd3     // seta    bl
	WORD $0x3948; BYTE $0xd0     // cmp    rax, rdx
	LONG $0xd3970f41             // seta    r11b
	WORD $0x3949; BYTE $0xf1     // cmp    r9, rsi
	LONG $0xd2970f41             // seta    r10b
	WORD $0x3145; BYTE $0xc9     // xor    r9d, r9d
	WORD $0x8441; BYTE $0xde     // test    r14b, bl
	JNE  LBB33_3
	WORD $0x2045; BYTE $0xd3     // and    r11b, r10b
	JNE  LBB33_3
	WORD $0x8941; BYTE $0xca     // mov    r10d, ecx
	LONG $0x1fe28341             // and    r10d, 31
	WORD $0x894d; BYTE $0xc1     // mov    r9, r8
	WORD $0x294d; BYTE $0xd1     // sub    r9, r10
	WORD $0xc031                 // xor    eax, eax
	LONG $0x456ffdc5; BYTE $0x00 // vmovdqa    ymm0, yword 0[rbp] /* [rip + .LCPI33_0] */

LBB33_10:
	LONG $0x0c6ffec5; BYTE $0x07 // vmovdqu    ymm1, yword [rdi + rax]
	LONG $0x146ffec5; BYTE $0x06 // vmovdqu    ymm2, yword [rsi + rax]
	LONG $0xd868f5c5             // vpunpckhbw    ymm3, ymm1, ymm0
	LONG $0xe068edc5             // vpunpckhbw    ymm4, ymm2, ymm0
	LONG $0xdbd5ddc5             // vpmullw    ymm3, ymm4, ymm3
	LONG $0xd8dbe5c5             // vpand    ymm3, ymm3, ymm0
	LONG $0xc860f5c5             // vpunpcklbw    ymm1, ymm1, ymm0
	LONG $0xd060edc5             // vpunpcklbw    ymm2, ymm2, ymm0
	LONG $0xc9d5edc5             // vpmullw    ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5             // vpand    ymm1, ymm1, ymm0
	LONG $0xcb67f5c5             // vpackuswb    ymm1, ymm1, ymm3
	LONG $0x0c7ffec5; BYTE $0x02 // vmovdqu    yword [rdx + rax], ymm1
	LONG $0x20c08348             // add    rax, 32
	WORD $0x3949; BYTE $0xc1     // cmp    r9, rax
	JNE  LBB33_10
	WORD $0x854d; BYTE $0xd2     // test    r10, r10
	JE   LBB33_12

LBB33_3:
	WORD $0x2944; BYTE $0xc9 // sub    ecx, r9d
	WORD $0x894d; BYTE $0xca // mov    r10, r9
	WORD $0xf749; BYTE $0xd2 // not    r10
	WORD $0x014d; BYTE $0xc2 // add    r10, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB33_5

LBB33_4:
	LONG $0x04b60f42; BYTE $0x0e // movzx    eax, byte [rsi + r9]
	LONG $0x0f24f642             // mul    byte [rdi + r9]
	LONG $0x0a048842             // mov    byte [rdx + r9], al
	LONG $0x01c18349             // add    r9, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB33_4

LBB33_5:
	LONG $0x03fa8349 // cmp    r10, 3
	JB   LBB33_12

LBB33_6:
	LONG $0x04b60f42; BYTE $0x0e   // movzx    eax, byte [rsi + r9]
	LONG $0x0f24f642               // mul    byte [rdi + r9]
	LONG $0x0a048842               // mov    byte [rdx + r9], al
	LONG $0x44b60f42; WORD $0x010e // movzx    eax, byte [rsi + r9 + 1]
	LONG $0x0f64f642; BYTE $0x01   // mul    byte [rdi + r9 + 1]
	LONG $0x0a448842; BYTE $0x01   // mov    byte [rdx + r9 + 1], al
	LONG $0x44b60f42; WORD $0x020e // movzx    eax, byte [rsi + r9 + 2]
	LONG $0x0f64f642; BYTE $0x02   // mul    byte [rdi + r9 + 2]
	LONG $0x0a448842; BYTE $0x02   // mov    byte [rdx + r9 + 2], al
	LONG $0x44b60f42; WORD $0x030e // movzx    eax, byte [rsi + r9 + 3]
	LONG $0x0f64f642; BYTE $0x03   // mul    byte [rdi + r9 + 3]
	LONG $0x0a448842; BYTE $0x03   // mov    byte [rdx + r9 + 3], al
	LONG $0x04c18349               // add    r9, 4
	WORD $0x394d; BYTE $0xc8       // cmp    r8, r9
	JNE  LBB33_6

LBB33_12:
	VZEROUPPER
	RET

DATA LCDATA7<>+0x000(SB)/8, $0x000000000c080400
DATA LCDATA7<>+0x008(SB)/8, $0x0000000000000000
GLOBL LCDATA7<>(SB), 8, $16

TEXT 路_int8_avx2_div(SB), $48-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX
	ADDQ $8, SP
	LEAQ LCDATA7<>(SB), BP

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB34_12
	WORD $0x8949; BYTE $0xd0 // mov    r8, rdx
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x07f98349         // cmp    r9, 7
	JA   LBB34_7
	WORD $0x3145; BYTE $0xf6 // xor    r14d, r14d
	JMP  LBB34_3

LBB34_7:
	LONG $0x08148d4b             // lea    rdx, [r8 + r9]
	LONG $0x0f048d4a             // lea    rax, [rdi + r9]
	WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	LONG $0xd3970f41             // seta    r11b
	LONG $0x0e048d4a             // lea    rax, [rsi + r9]
	WORD $0x3948; BYTE $0xfa     // cmp    rdx, rdi
	WORD $0x970f; BYTE $0xd3     // seta    bl
	WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0     // seta    al
	WORD $0x3948; BYTE $0xf2     // cmp    rdx, rsi
	LONG $0xd2970f41             // seta    r10b
	WORD $0x3145; BYTE $0xf6     // xor    r14d, r14d
	WORD $0x8441; BYTE $0xdb     // test    r11b, bl
	JNE  LBB34_3
	WORD $0x2044; BYTE $0xd0     // and    al, r10b
	JNE  LBB34_3
	LONG $0x244c8948; BYTE $0x10 // mov    qword [rsp + 16], rcx
	WORD $0xe183; BYTE $0x07     // and    ecx, 7
	LONG $0x244c894c; BYTE $0x18 // mov    qword [rsp + 24], r9
	WORD $0x894d; BYTE $0xce     // mov    r14, r9
	LONG $0x244c8948; BYTE $0x08 // mov    qword [rsp + 8], rcx
	WORD $0x2949; BYTE $0xce     // sub    r14, rcx
	WORD $0xc931                 // xor    ecx, ecx
	LONG $0x456ff9c5; BYTE $0x00 // vmovdqa    xmm0, oword 0[rbp] /* [rip + .LCPI34_0] */
	LONG $0x247c8948; BYTE $0x20 // mov    qword [rsp + 32], rdi

LBB34_10:
	LONG $0x217de2c4; WORD $0x0f0c // vpmovsxbd    ymm1, qword [rdi + rcx]
	LONG $0x217de2c4; WORD $0x0e14 // vpmovsxbd    ymm2, qword [rsi + rcx]
	LONG $0x1679e3c4; WORD $0x03c8 // vpextrd    eax, xmm1, 3
	LONG $0x1679e3c4; WORD $0x03d3 // vpextrd    ebx, xmm2, 3
	BYTE $0x99                     // cdq
	LONG $0x1679c3c4; WORD $0x02ca // vpextrd    r10d, xmm1, 2
	WORD $0xfbf7                   // idiv    ebx
	WORD $0x8948; BYTE $0xf7       // mov    rdi, rsi
	WORD $0xc689                   // mov    esi, eax
	WORD $0x894d; BYTE $0xc1       // mov    r9, r8
	WORD $0x894d; BYTE $0xf0       // mov    r8, r14
	LONG $0x1679c3c4; WORD $0x02d6 // vpextrd    r14d, xmm2, 2
	WORD $0x8944; BYTE $0xd0       // mov    eax, r10d
	BYTE $0x99                     // cdq
	LONG $0x1679c3c4; WORD $0x01cb // vpextrd    r11d, xmm1, 1
	LONG $0x1679e3c4; WORD $0x01d3 // vpextrd    ebx, xmm2, 1
	WORD $0xf741; BYTE $0xfe       // idiv    r14d
	WORD $0x8941; BYTE $0xc2       // mov    r10d, eax
	WORD $0x8944; BYTE $0xd8       // mov    eax, r11d
	BYTE $0x99                     // cdq
	WORD $0xfbf7                   // idiv    ebx
	WORD $0x8941; BYTE $0xc3       // mov    r11d, eax
	LONG $0xc87ef9c5               // vmovd    eax, xmm1
	LONG $0x7e79c1c4; BYTE $0xd6   // vmovd    r14d, xmm2
	LONG $0x397de3c4; WORD $0x01c9 // vextracti128    xmm1, ymm1, 1
	LONG $0x1679e3c4; WORD $0x03cb // vpextrd    ebx, xmm1, 3
	BYTE $0x99                     // cdq
	LONG $0x397de3c4; WORD $0x01d2 // vextracti128    xmm2, ymm2, 1
	LONG $0x1679c3c4; WORD $0x03d7 // vpextrd    r15d, xmm2, 3
	WORD $0xf741; BYTE $0xfe       // idiv    r14d
	WORD $0x8941; BYTE $0xc6       // mov    r14d, eax
	WORD $0xd889                   // mov    eax, ebx
	BYTE $0x99                     // cdq
	LONG $0x1679e3c4; WORD $0x02cb // vpextrd    ebx, xmm1, 2
	WORD $0xf741; BYTE $0xff       // idiv    r15d
	WORD $0x8941; BYTE $0xc7       // mov    r15d, eax
	LONG $0x1679c3c4; WORD $0x02d4 // vpextrd    r12d, xmm2, 2
	WORD $0xd889                   // mov    eax, ebx
	BYTE $0x99                     // cdq
	LONG $0x1679e3c4; WORD $0x01cb // vpextrd    ebx, xmm1, 1
	LONG $0x1679c3c4; WORD $0x01d5 // vpextrd    r13d, xmm2, 1
	WORD $0xf741; BYTE $0xfc       // idiv    r12d
	WORD $0x8941; BYTE $0xc4       // mov    r12d, eax
	WORD $0xd889                   // mov    eax, ebx
	BYTE $0x99                     // cdq
	WORD $0xf741; BYTE $0xfd       // idiv    r13d
	WORD $0x8941; BYTE $0xc5       // mov    r13d, eax
	LONG $0xc87ef9c5               // vmovd    eax, xmm1
	LONG $0xd37ef9c5               // vmovd    ebx, xmm2
	BYTE $0x99                     // cdq
	WORD $0xfbf7                   // idiv    ebx
	LONG $0xc86ef9c5               // vmovd    xmm1, eax
	LONG $0x2271c3c4; WORD $0x01cd // vpinsrd    xmm1, xmm1, r13d, 1
	LONG $0x2271c3c4; WORD $0x02cc // vpinsrd    xmm1, xmm1, r12d, 2
	LONG $0x2271c3c4; WORD $0x03cf // vpinsrd    xmm1, xmm1, r15d, 3
	LONG $0x6e79c1c4; BYTE $0xd6   // vmovd    xmm2, r14d
	WORD $0x894d; BYTE $0xc6       // mov    r14, r8
	WORD $0x894d; BYTE $0xc8       // mov    r8, r9
	LONG $0x2269c3c4; WORD $0x01d3 // vpinsrd    xmm2, xmm2, r11d, 1
	LONG $0x2269c3c4; WORD $0x02d2 // vpinsrd    xmm2, xmm2, r10d, 2
	LONG $0x2269e3c4; WORD $0x03d6 // vpinsrd    xmm2, xmm2, esi, 3
	WORD $0x8948; BYTE $0xfe       // mov    rsi, rdi
	LONG $0x247c8b48; BYTE $0x20   // mov    rdi, qword [rsp + 32]
	LONG $0x0071e2c4; BYTE $0xc8   // vpshufb    xmm1, xmm1, xmm0
	LONG $0x0069e2c4; BYTE $0xd0   // vpshufb    xmm2, xmm2, xmm0
	LONG $0xc962e9c5               // vpunpckldq    xmm1, xmm2, xmm1
	LONG $0xd679c1c4; WORD $0x090c // vmovq    qword [r9 + rcx], xmm1
	LONG $0x08c18348               // add    rcx, 8
	WORD $0x3949; BYTE $0xce       // cmp    r14, rcx
	JNE  LBB34_10
	LONG $0x247c8348; WORD $0x0008 // cmp    qword [rsp + 8], 0
	LONG $0x244c8b4c; BYTE $0x18   // mov    r9, qword [rsp + 24]
	LONG $0x244c8b48; BYTE $0x10   // mov    rcx, qword [rsp + 16]
	JE   LBB34_12

LBB34_3:
	WORD $0x2944; BYTE $0xf1     // sub    ecx, r14d
	WORD $0x894c; BYTE $0xf3     // mov    rbx, r14
	WORD $0xc1f6; BYTE $0x01     // test    cl, 1
	JE   LBB34_5
	LONG $0x04be0f42; BYTE $0x37 // movsx    eax, byte [rdi + r14]
	LONG $0x0cbe0f42; BYTE $0x36 // movsx    ecx, byte [rsi + r14]
	BYTE $0x99                   // cdq
	WORD $0xf9f7                 // idiv    ecx
	LONG $0x30048843             // mov    byte [r8 + r14], al
	LONG $0x015e8d49             // lea    rbx, [r14 + 1]

LBB34_5:
	LONG $0x01c68349         // add    r14, 1
	WORD $0x394d; BYTE $0xf1 // cmp    r9, r14
	JE   LBB34_12

LBB34_6:
	LONG $0x1f04be0f             // movsx    eax, byte [rdi + rbx]
	LONG $0x1e0cbe0f             // movsx    ecx, byte [rsi + rbx]
	BYTE $0x99                   // cdq
	WORD $0xf9f7                 // idiv    ecx
	LONG $0x18048841             // mov    byte [r8 + rbx], al
	LONG $0x1f44be0f; BYTE $0x01 // movsx    eax, byte [rdi + rbx + 1]
	LONG $0x1e4cbe0f; BYTE $0x01 // movsx    ecx, byte [rsi + rbx + 1]
	BYTE $0x99                   // cdq
	WORD $0xf9f7                 // idiv    ecx
	LONG $0x18448841; BYTE $0x01 // mov    byte [r8 + rbx + 1], al
	LONG $0x02c38348             // add    rbx, 2
	WORD $0x3949; BYTE $0xd9     // cmp    r9, rbx
	JNE  LBB34_6

LBB34_12:
	SUBQ $8, SP
	VZEROUPPER
	RET

TEXT 路_int16_avx2_sum(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB35_1
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0x3ff88349         // cmp    r8, 63
	JA   LBB35_4
	WORD $0xc931             // xor    ecx, ecx
	WORD $0xc031             // xor    eax, eax
	JMP  LBB35_7

LBB35_1:
	WORD $0xc031 // xor    eax, eax
	JMP  LBB35_8

LBB35_4:
	WORD $0xe283; BYTE $0x3f // and    edx, 63
	WORD $0x894c; BYTE $0xc1 // mov    rcx, r8
	WORD $0x2948; BYTE $0xd1 // sub    rcx, rdx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0
	WORD $0xc031             // xor    eax, eax
	LONG $0xc9eff1c5         // vpxor    xmm1, xmm1, xmm1
	LONG $0xd2efe9c5         // vpxor    xmm2, xmm2, xmm2
	LONG $0xdbefe1c5         // vpxor    xmm3, xmm3, xmm3

LBB35_5:
	LONG $0x04fdfdc5; BYTE $0x47   // vpaddw    ymm0, ymm0, yword [rdi + 2*rax]
	LONG $0x4cfdf5c5; WORD $0x2047 // vpaddw    ymm1, ymm1, yword [rdi + 2*rax + 32]
	LONG $0x54fdedc5; WORD $0x4047 // vpaddw    ymm2, ymm2, yword [rdi + 2*rax + 64]
	LONG $0x5cfde5c5; WORD $0x6047 // vpaddw    ymm3, ymm3, yword [rdi + 2*rax + 96]
	LONG $0x40c08348               // add    rax, 64
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JNE  LBB35_5
	LONG $0xc0fdf5c5               // vpaddw    ymm0, ymm1, ymm0
	LONG $0xc0fdedc5               // vpaddw    ymm0, ymm2, ymm0
	LONG $0xc0fde5c5               // vpaddw    ymm0, ymm3, ymm0
	LONG $0x397de3c4; WORD $0x01c1 // vextracti128    xmm1, ymm0, 1
	LONG $0xc1fdf9c5               // vpaddw    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0x4e   // vpshufd    xmm1, xmm0, 78
	LONG $0xc1fdf9c5               // vpaddw    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0xe5   // vpshufd    xmm1, xmm0, 229
	LONG $0xc1fdf9c5               // vpaddw    xmm0, xmm0, xmm1
	LONG $0xd072f1c5; BYTE $0x10   // vpsrld    xmm1, xmm0, 16
	LONG $0xc1fdf9c5               // vpaddw    xmm0, xmm0, xmm1
	LONG $0xc07ef9c5               // vmovd    eax, xmm0
	WORD $0x8548; BYTE $0xd2       // test    rdx, rdx
	JE   LBB35_8

LBB35_7:
	LONG $0x4f040366         // add    ax, word [rdi + 2*rcx]
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc8 // cmp    r8, rcx
	JNE  LBB35_7

LBB35_8:
	WORD $0x8966; BYTE $0x06 // mov    word [rsi], ax
	VZEROUPPER
	RET

DATA LCDATA8<>+0x000(SB)/8, $0x8000800080008000
DATA LCDATA8<>+0x008(SB)/8, $0x8000800080008000
GLOBL LCDATA8<>(SB), 8, $16

TEXT 路_int16_avx2_min(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX
	LEAQ LCDATA8<>(SB), BP

	WORD $0xb70f; BYTE $0x07     // movzx    eax, word [rdi]
	WORD $0xd285                 // test    edx, edx
	JLE  LBB36_7
	WORD $0x8941; BYTE $0xd1     // mov    r9d, edx
	LONG $0x01f98349             // cmp    r9, 1
	JE   LBB36_7
	LONG $0xff418d4d             // lea    r8, [r9 - 1]
	LONG $0x000001b9; BYTE $0x00 // mov    ecx, 1
	LONG $0x3ff88349             // cmp    r8, 63
	JBE  LBB36_6
	WORD $0x894c; BYTE $0xc2     // mov    rdx, r8
	LONG $0xc0e28348             // and    rdx, -64
	LONG $0x014a8d48             // lea    rcx, [rdx + 1]
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	WORD $0xc031                 // xor    eax, eax
	LONG $0xc86ffdc5             // vmovdqa    ymm1, ymm0
	LONG $0xd06ffdc5             // vmovdqa    ymm2, ymm0
	LONG $0xd86ffdc5             // vmovdqa    ymm3, ymm0

LBB36_4:
	LONG $0x44eafdc5; WORD $0x0247 // vpminsw    ymm0, ymm0, yword [rdi + 2*rax + 2]
	LONG $0x4ceaf5c5; WORD $0x2247 // vpminsw    ymm1, ymm1, yword [rdi + 2*rax + 34]
	LONG $0x54eaedc5; WORD $0x4247 // vpminsw    ymm2, ymm2, yword [rdi + 2*rax + 66]
	LONG $0x5ceae5c5; WORD $0x6247 // vpminsw    ymm3, ymm3, yword [rdi + 2*rax + 98]
	LONG $0x40c08348               // add    rax, 64
	WORD $0x3948; BYTE $0xc2       // cmp    rdx, rax
	JNE  LBB36_4
	LONG $0xc1eafdc5               // vpminsw    ymm0, ymm0, ymm1
	LONG $0xc2eafdc5               // vpminsw    ymm0, ymm0, ymm2
	LONG $0xc3eafdc5               // vpminsw    ymm0, ymm0, ymm3
	LONG $0x397de3c4; WORD $0x01c1 // vextracti128    xmm1, ymm0, 1
	LONG $0xc1eaf9c5               // vpminsw    xmm0, xmm0, xmm1
	LONG $0x45eff9c5; BYTE $0x00   // vpxor    xmm0, xmm0, oword 0[rbp] /* [rip + .LCPI36_0] */
	LONG $0x4179e2c4; BYTE $0xc0   // vphminposuw    xmm0, xmm0
	LONG $0xc07ef9c5               // vmovd    eax, xmm0
	LONG $0x00800035; BYTE $0x00   // xor    eax, 32768
	WORD $0x3949; BYTE $0xd0       // cmp    r8, rdx
	JE   LBB36_7

LBB36_6:
	LONG $0x4f14b70f         // movzx    edx, word [rdi + 2*rcx]
	WORD $0x3966; BYTE $0xc2 // cmp    dx, ax
	WORD $0x4e0f; BYTE $0xc2 // cmovle    eax, edx
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB36_6

LBB36_7:
	WORD $0x8966; BYTE $0x06 // mov    word [rsi], ax
	VZEROUPPER
	RET

DATA LCDATA9<>+0x000(SB)/8, $0x7fff7fff7fff7fff
DATA LCDATA9<>+0x008(SB)/8, $0x7fff7fff7fff7fff
GLOBL LCDATA9<>(SB), 8, $16

TEXT 路_int16_avx2_max(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX
	LEAQ LCDATA9<>(SB), BP

	WORD $0xb70f; BYTE $0x07     // movzx    eax, word [rdi]
	WORD $0xd285                 // test    edx, edx
	JLE  LBB37_7
	WORD $0x8941; BYTE $0xd1     // mov    r9d, edx
	LONG $0x01f98349             // cmp    r9, 1
	JE   LBB37_7
	LONG $0xff418d4d             // lea    r8, [r9 - 1]
	LONG $0x000001b9; BYTE $0x00 // mov    ecx, 1
	LONG $0x3ff88349             // cmp    r8, 63
	JBE  LBB37_6
	WORD $0x894c; BYTE $0xc2     // mov    rdx, r8
	LONG $0xc0e28348             // and    rdx, -64
	LONG $0x014a8d48             // lea    rcx, [rdx + 1]
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x797de2c4; BYTE $0xc0 // vpbroadcastw    ymm0, xmm0
	WORD $0xc031                 // xor    eax, eax
	LONG $0xc86ffdc5             // vmovdqa    ymm1, ymm0
	LONG $0xd06ffdc5             // vmovdqa    ymm2, ymm0
	LONG $0xd86ffdc5             // vmovdqa    ymm3, ymm0

LBB37_4:
	LONG $0x44eefdc5; WORD $0x0247 // vpmaxsw    ymm0, ymm0, yword [rdi + 2*rax + 2]
	LONG $0x4ceef5c5; WORD $0x2247 // vpmaxsw    ymm1, ymm1, yword [rdi + 2*rax + 34]
	LONG $0x54eeedc5; WORD $0x4247 // vpmaxsw    ymm2, ymm2, yword [rdi + 2*rax + 66]
	LONG $0x5ceee5c5; WORD $0x6247 // vpmaxsw    ymm3, ymm3, yword [rdi + 2*rax + 98]
	LONG $0x40c08348               // add    rax, 64
	WORD $0x3948; BYTE $0xc2       // cmp    rdx, rax
	JNE  LBB37_4
	LONG $0xc1eefdc5               // vpmaxsw    ymm0, ymm0, ymm1
	LONG $0xc2eefdc5               // vpmaxsw    ymm0, ymm0, ymm2
	LONG $0xc3eefdc5               // vpmaxsw    ymm0, ymm0, ymm3
	LONG $0x397de3c4; WORD $0x01c1 // vextracti128    xmm1, ymm0, 1
	LONG $0xc1eef9c5               // vpmaxsw    xmm0, xmm0, xmm1
	LONG $0x45eff9c5; BYTE $0x00   // vpxor    xmm0, xmm0, oword 0[rbp] /* [rip + .LCPI37_0] */
	LONG $0x4179e2c4; BYTE $0xc0   // vphminposuw    xmm0, xmm0
	LONG $0xc07ef9c5               // vmovd    eax, xmm0
	LONG $0x007fff35; BYTE $0x00   // xor    eax, 32767
	WORD $0x3949; BYTE $0xd0       // cmp    r8, rdx
	JE   LBB37_7

LBB37_6:
	LONG $0x4f14b70f         // movzx    edx, word [rdi + 2*rcx]
	WORD $0x3966; BYTE $0xc2 // cmp    dx, ax
	WORD $0x4d0f; BYTE $0xc2 // cmovge    eax, edx
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB37_6

LBB37_7:
	WORD $0x8966; BYTE $0x06 // mov    word [rsi], ax
	VZEROUPPER
	RET

TEXT 路_int16_avx2_add(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB38_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x3ff88349         // cmp    r8, 63
	JA   LBB38_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB38_3

LBB38_7:
	LONG $0x42148d4e         // lea    r10, [rdx + 2*r8]
	LONG $0x47048d4a         // lea    rax, [rdi + 2*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd6970f41         // seta    r14b
	LONG $0x46048d4a         // lea    rax, [rsi + 2*r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB38_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB38_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x3fe18341         // and    r9d, 63
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x294d; BYTE $0xcb // sub    r11, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB38_10:
	LONG $0x6f7ea1c4; WORD $0x5604             // vmovdqu    ymm0, yword [rsi + 2*r10]
	LONG $0x6f7ea1c4; WORD $0x564c; BYTE $0x20 // vmovdqu    ymm1, yword [rsi + 2*r10 + 32]
	LONG $0x6f7ea1c4; WORD $0x5654; BYTE $0x40 // vmovdqu    ymm2, yword [rsi + 2*r10 + 64]
	LONG $0x6f7ea1c4; WORD $0x565c; BYTE $0x60 // vmovdqu    ymm3, yword [rsi + 2*r10 + 96]
	LONG $0xfd7da1c4; WORD $0x5704             // vpaddw    ymm0, ymm0, yword [rdi + 2*r10]
	LONG $0xfd75a1c4; WORD $0x574c; BYTE $0x20 // vpaddw    ymm1, ymm1, yword [rdi + 2*r10 + 32]
	LONG $0xfd6da1c4; WORD $0x5754; BYTE $0x40 // vpaddw    ymm2, ymm2, yword [rdi + 2*r10 + 64]
	LONG $0xfd65a1c4; WORD $0x575c; BYTE $0x60 // vpaddw    ymm3, ymm3, yword [rdi + 2*r10 + 96]
	LONG $0x7f7ea1c4; WORD $0x5204             // vmovdqu    yword [rdx + 2*r10], ymm0
	LONG $0x7f7ea1c4; WORD $0x524c; BYTE $0x20 // vmovdqu    yword [rdx + 2*r10 + 32], ymm1
	LONG $0x7f7ea1c4; WORD $0x5254; BYTE $0x40 // vmovdqu    yword [rdx + 2*r10 + 64], ymm2
	LONG $0x7f7ea1c4; WORD $0x525c; BYTE $0x60 // vmovdqu    yword [rdx + 2*r10 + 96], ymm3
	LONG $0x40c28349                           // add    r10, 64
	WORD $0x394d; BYTE $0xd3                   // cmp    r11, r10
	JNE  LBB38_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB38_12

LBB38_3:
	WORD $0x2944; BYTE $0xd9 // sub    ecx, r11d
	WORD $0x894d; BYTE $0xd9 // mov    r9, r11
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB38_5

LBB38_4:
	LONG $0x04b70f42; BYTE $0x5e // movzx    eax, word [rsi + 2*r11]
	LONG $0x04034266; BYTE $0x5f // add    ax, word [rdi + 2*r11]
	LONG $0x04894266; BYTE $0x5a // mov    word [rdx + 2*r11], ax
	LONG $0x01c38349             // add    r11, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB38_4

LBB38_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB38_12

LBB38_6:
	LONG $0x04b70f42; BYTE $0x5e   // movzx    eax, word [rsi + 2*r11]
	LONG $0x04034266; BYTE $0x5f   // add    ax, word [rdi + 2*r11]
	LONG $0x04894266; BYTE $0x5a   // mov    word [rdx + 2*r11], ax
	LONG $0x44b70f42; WORD $0x025e // movzx    eax, word [rsi + 2*r11 + 2]
	LONG $0x44034266; WORD $0x025f // add    ax, word [rdi + 2*r11 + 2]
	LONG $0x44894266; WORD $0x025a // mov    word [rdx + 2*r11 + 2], ax
	LONG $0x44b70f42; WORD $0x045e // movzx    eax, word [rsi + 2*r11 + 4]
	LONG $0x44034266; WORD $0x045f // add    ax, word [rdi + 2*r11 + 4]
	LONG $0x44894266; WORD $0x045a // mov    word [rdx + 2*r11 + 4], ax
	LONG $0x44b70f42; WORD $0x065e // movzx    eax, word [rsi + 2*r11 + 6]
	LONG $0x44034266; WORD $0x065f // add    ax, word [rdi + 2*r11 + 6]
	LONG $0x44894266; WORD $0x065a // mov    word [rdx + 2*r11 + 6], ax
	LONG $0x04c38349               // add    r11, 4
	WORD $0x394d; BYTE $0xd8       // cmp    r8, r11
	JNE  LBB38_6

LBB38_12:
	VZEROUPPER
	RET

TEXT 路_int16_avx2_sub(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB39_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x3ff88349         // cmp    r8, 63
	JA   LBB39_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB39_3

LBB39_7:
	LONG $0x42148d4e         // lea    r10, [rdx + 2*r8]
	LONG $0x47048d4a         // lea    rax, [rdi + 2*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd6970f41         // seta    r14b
	LONG $0x46048d4a         // lea    rax, [rsi + 2*r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB39_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB39_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x3fe18341         // and    r9d, 63
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x294d; BYTE $0xcb // sub    r11, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB39_10:
	LONG $0x6f7ea1c4; WORD $0x5704             // vmovdqu    ymm0, yword [rdi + 2*r10]
	LONG $0x6f7ea1c4; WORD $0x574c; BYTE $0x20 // vmovdqu    ymm1, yword [rdi + 2*r10 + 32]
	LONG $0x6f7ea1c4; WORD $0x5754; BYTE $0x40 // vmovdqu    ymm2, yword [rdi + 2*r10 + 64]
	LONG $0x6f7ea1c4; WORD $0x575c; BYTE $0x60 // vmovdqu    ymm3, yword [rdi + 2*r10 + 96]
	LONG $0xf97da1c4; WORD $0x5604             // vpsubw    ymm0, ymm0, yword [rsi + 2*r10]
	LONG $0xf975a1c4; WORD $0x564c; BYTE $0x20 // vpsubw    ymm1, ymm1, yword [rsi + 2*r10 + 32]
	LONG $0xf96da1c4; WORD $0x5654; BYTE $0x40 // vpsubw    ymm2, ymm2, yword [rsi + 2*r10 + 64]
	LONG $0xf965a1c4; WORD $0x565c; BYTE $0x60 // vpsubw    ymm3, ymm3, yword [rsi + 2*r10 + 96]
	LONG $0x7f7ea1c4; WORD $0x5204             // vmovdqu    yword [rdx + 2*r10], ymm0
	LONG $0x7f7ea1c4; WORD $0x524c; BYTE $0x20 // vmovdqu    yword [rdx + 2*r10 + 32], ymm1
	LONG $0x7f7ea1c4; WORD $0x5254; BYTE $0x40 // vmovdqu    yword [rdx + 2*r10 + 64], ymm2
	LONG $0x7f7ea1c4; WORD $0x525c; BYTE $0x60 // vmovdqu    yword [rdx + 2*r10 + 96], ymm3
	LONG $0x40c28349                           // add    r10, 64
	WORD $0x394d; BYTE $0xd3                   // cmp    r11, r10
	JNE  LBB39_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB39_12

LBB39_3:
	WORD $0x2944; BYTE $0xd9 // sub    ecx, r11d
	WORD $0x894d; BYTE $0xd9 // mov    r9, r11
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB39_5

LBB39_4:
	LONG $0x04b70f42; BYTE $0x5f // movzx    eax, word [rdi + 2*r11]
	LONG $0x042b4266; BYTE $0x5e // sub    ax, word [rsi + 2*r11]
	LONG $0x04894266; BYTE $0x5a // mov    word [rdx + 2*r11], ax
	LONG $0x01c38349             // add    r11, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB39_4

LBB39_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB39_12

LBB39_6:
	LONG $0x04b70f42; BYTE $0x5f   // movzx    eax, word [rdi + 2*r11]
	LONG $0x042b4266; BYTE $0x5e   // sub    ax, word [rsi + 2*r11]
	LONG $0x04894266; BYTE $0x5a   // mov    word [rdx + 2*r11], ax
	LONG $0x44b70f42; WORD $0x025f // movzx    eax, word [rdi + 2*r11 + 2]
	LONG $0x442b4266; WORD $0x025e // sub    ax, word [rsi + 2*r11 + 2]
	LONG $0x44894266; WORD $0x025a // mov    word [rdx + 2*r11 + 2], ax
	LONG $0x44b70f42; WORD $0x045f // movzx    eax, word [rdi + 2*r11 + 4]
	LONG $0x442b4266; WORD $0x045e // sub    ax, word [rsi + 2*r11 + 4]
	LONG $0x44894266; WORD $0x045a // mov    word [rdx + 2*r11 + 4], ax
	LONG $0x44b70f42; WORD $0x065f // movzx    eax, word [rdi + 2*r11 + 6]
	LONG $0x442b4266; WORD $0x065e // sub    ax, word [rsi + 2*r11 + 6]
	LONG $0x44894266; WORD $0x065a // mov    word [rdx + 2*r11 + 6], ax
	LONG $0x04c38349               // add    r11, 4
	WORD $0x394d; BYTE $0xd8       // cmp    r8, r11
	JNE  LBB39_6

LBB39_12:
	VZEROUPPER
	RET

TEXT 路_int16_avx2_mul(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB40_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x3ff88349         // cmp    r8, 63
	JA   LBB40_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB40_3

LBB40_7:
	LONG $0x42148d4e         // lea    r10, [rdx + 2*r8]
	LONG $0x47048d4a         // lea    rax, [rdi + 2*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd6970f41         // seta    r14b
	LONG $0x46048d4a         // lea    rax, [rsi + 2*r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB40_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB40_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x3fe18341         // and    r9d, 63
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x294d; BYTE $0xcb // sub    r11, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB40_10:
	LONG $0x6f7ea1c4; WORD $0x5604             // vmovdqu    ymm0, yword [rsi + 2*r10]
	LONG $0x6f7ea1c4; WORD $0x564c; BYTE $0x20 // vmovdqu    ymm1, yword [rsi + 2*r10 + 32]
	LONG $0x6f7ea1c4; WORD $0x5654; BYTE $0x40 // vmovdqu    ymm2, yword [rsi + 2*r10 + 64]
	LONG $0x6f7ea1c4; WORD $0x565c; BYTE $0x60 // vmovdqu    ymm3, yword [rsi + 2*r10 + 96]
	LONG $0xd57da1c4; WORD $0x5704             // vpmullw    ymm0, ymm0, yword [rdi + 2*r10]
	LONG $0xd575a1c4; WORD $0x574c; BYTE $0x20 // vpmullw    ymm1, ymm1, yword [rdi + 2*r10 + 32]
	LONG $0xd56da1c4; WORD $0x5754; BYTE $0x40 // vpmullw    ymm2, ymm2, yword [rdi + 2*r10 + 64]
	LONG $0xd565a1c4; WORD $0x575c; BYTE $0x60 // vpmullw    ymm3, ymm3, yword [rdi + 2*r10 + 96]
	LONG $0x7f7ea1c4; WORD $0x5204             // vmovdqu    yword [rdx + 2*r10], ymm0
	LONG $0x7f7ea1c4; WORD $0x524c; BYTE $0x20 // vmovdqu    yword [rdx + 2*r10 + 32], ymm1
	LONG $0x7f7ea1c4; WORD $0x5254; BYTE $0x40 // vmovdqu    yword [rdx + 2*r10 + 64], ymm2
	LONG $0x7f7ea1c4; WORD $0x525c; BYTE $0x60 // vmovdqu    yword [rdx + 2*r10 + 96], ymm3
	LONG $0x40c28349                           // add    r10, 64
	WORD $0x394d; BYTE $0xd3                   // cmp    r11, r10
	JNE  LBB40_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB40_12

LBB40_3:
	WORD $0x2944; BYTE $0xd9 // sub    ecx, r11d
	WORD $0x894d; BYTE $0xd9 // mov    r9, r11
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB40_5

LBB40_4:
	LONG $0x04b70f42; BYTE $0x5e   // movzx    eax, word [rsi + 2*r11]
	LONG $0xaf0f4266; WORD $0x5f04 // imul    ax, word [rdi + 2*r11]
	LONG $0x04894266; BYTE $0x5a   // mov    word [rdx + 2*r11], ax
	LONG $0x01c38349               // add    r11, 1
	LONG $0xffc18348               // add    rcx, -1
	JNE  LBB40_4

LBB40_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB40_12

LBB40_6:
	LONG $0x04b70f42; BYTE $0x5e               // movzx    eax, word [rsi + 2*r11]
	LONG $0xaf0f4266; WORD $0x5f04             // imul    ax, word [rdi + 2*r11]
	LONG $0x04894266; BYTE $0x5a               // mov    word [rdx + 2*r11], ax
	LONG $0x44b70f42; WORD $0x025e             // movzx    eax, word [rsi + 2*r11 + 2]
	LONG $0xaf0f4266; WORD $0x5f44; BYTE $0x02 // imul    ax, word [rdi + 2*r11 + 2]
	LONG $0x44894266; WORD $0x025a             // mov    word [rdx + 2*r11 + 2], ax
	LONG $0x44b70f42; WORD $0x045e             // movzx    eax, word [rsi + 2*r11 + 4]
	LONG $0xaf0f4266; WORD $0x5f44; BYTE $0x04 // imul    ax, word [rdi + 2*r11 + 4]
	LONG $0x44894266; WORD $0x045a             // mov    word [rdx + 2*r11 + 4], ax
	LONG $0x44b70f42; WORD $0x065e             // movzx    eax, word [rsi + 2*r11 + 6]
	LONG $0xaf0f4266; WORD $0x5f44; BYTE $0x06 // imul    ax, word [rdi + 2*r11 + 6]
	LONG $0x44894266; WORD $0x065a             // mov    word [rdx + 2*r11 + 6], ax
	LONG $0x04c38349                           // add    r11, 4
	WORD $0x394d; BYTE $0xd8                   // cmp    r8, r11
	JNE  LBB40_6

LBB40_12:
	VZEROUPPER
	RET

DATA LCDATA10<>+0x000(SB)/8, $0x0d0c090805040100
DATA LCDATA10<>+0x008(SB)/8, $0x0f0e0d0c0d0c0908
DATA LCDATA10<>+0x010(SB)/8, $0x1d1c191815141110
DATA LCDATA10<>+0x018(SB)/8, $0x1f1e1d1c1d1c1918
GLOBL LCDATA10<>(SB), 8, $32

TEXT 路_int16_avx2_div(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX
	LEAQ LCDATA10<>(SB), BP

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB41_12
	WORD $0x8949; BYTE $0xd0 // mov    r8, rdx
	WORD $0x8941; BYTE $0xca // mov    r10d, ecx
	LONG $0x07fa8349         // cmp    r10, 7
	JA   LBB41_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB41_3

LBB41_7:
	LONG $0x50148d4b             // lea    rdx, [r8 + 2*r10]
	LONG $0x57048d4a             // lea    rax, [rdi + 2*r10]
	WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	LONG $0xd1970f41             // seta    r9b
	LONG $0x56048d4a             // lea    rax, [rsi + 2*r10]
	WORD $0x3948; BYTE $0xfa     // cmp    rdx, rdi
	WORD $0x970f; BYTE $0xd3     // seta    bl
	WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0     // seta    al
	WORD $0x3948; BYTE $0xf2     // cmp    rdx, rsi
	WORD $0x970f; BYTE $0xd2     // seta    dl
	WORD $0x3145; BYTE $0xdb     // xor    r11d, r11d
	WORD $0x8441; BYTE $0xd9     // test    r9b, bl
	JNE  LBB41_3
	WORD $0xd020                 // and    al, dl
	JNE  LBB41_3
	WORD $0x8941; BYTE $0xce     // mov    r14d, ecx
	LONG $0x07e68341             // and    r14d, 7
	WORD $0x894d; BYTE $0xd3     // mov    r11, r10
	WORD $0x294d; BYTE $0xf3     // sub    r11, r14
	WORD $0xdb31                 // xor    ebx, ebx
	LONG $0x456ffdc5; BYTE $0x00 // vmovdqa    ymm0, yword 0[rbp] /* [rip + .LCPI41_0] */

LBB41_10:
	LONG $0x237de2c4; WORD $0x5f0c // vpmovsxwd    ymm1, oword [rdi + 2*rbx]
	LONG $0x237de2c4; WORD $0x5e14 // vpmovsxwd    ymm2, oword [rsi + 2*rbx]
	LONG $0x397de3c4; WORD $0x01cb // vextracti128    xmm3, ymm1, 1
	LONG $0x1679e3c4; WORD $0x01d8 // vpextrd    eax, xmm3, 1
	LONG $0x397de3c4; WORD $0x01d4 // vextracti128    xmm4, ymm2, 1
	LONG $0x1679c3c4; WORD $0x01e1 // vpextrd    r9d, xmm4, 1
	BYTE $0x99                     // cdq
	WORD $0xf741; BYTE $0xf9       // idiv    r9d
	WORD $0x8941; BYTE $0xc1       // mov    r9d, eax
	LONG $0xd87ef9c5               // vmovd    eax, xmm3
	LONG $0x7e79c1c4; BYTE $0xe7   // vmovd    r15d, xmm4
	BYTE $0x99                     // cdq
	WORD $0xf741; BYTE $0xff       // idiv    r15d
	LONG $0xe86ef9c5               // vmovd    xmm5, eax
	LONG $0x2251c3c4; WORD $0x01e9 // vpinsrd    xmm5, xmm5, r9d, 1
	LONG $0x1679e3c4; WORD $0x02d8 // vpextrd    eax, xmm3, 2
	LONG $0x1679c3c4; WORD $0x02e1 // vpextrd    r9d, xmm4, 2
	BYTE $0x99                     // cdq
	WORD $0xf741; BYTE $0xf9       // idiv    r9d
	LONG $0x2251e3c4; WORD $0x02e8 // vpinsrd    xmm5, xmm5, eax, 2
	LONG $0x1679e3c4; WORD $0x03d8 // vpextrd    eax, xmm3, 3
	LONG $0x1679c3c4; WORD $0x03e1 // vpextrd    r9d, xmm4, 3
	BYTE $0x99                     // cdq
	WORD $0xf741; BYTE $0xf9       // idiv    r9d
	LONG $0x2251e3c4; WORD $0x03d8 // vpinsrd    xmm3, xmm5, eax, 3
	LONG $0x1679e3c4; WORD $0x01c8 // vpextrd    eax, xmm1, 1
	LONG $0x1679c3c4; WORD $0x01d1 // vpextrd    r9d, xmm2, 1
	BYTE $0x99                     // cdq
	WORD $0xf741; BYTE $0xf9       // idiv    r9d
	WORD $0x8941; BYTE $0xc1       // mov    r9d, eax
	LONG $0xc87ef9c5               // vmovd    eax, xmm1
	LONG $0x7e79c1c4; BYTE $0xd7   // vmovd    r15d, xmm2
	BYTE $0x99                     // cdq
	WORD $0xf741; BYTE $0xff       // idiv    r15d
	LONG $0xe06ef9c5               // vmovd    xmm4, eax
	LONG $0x2259c3c4; WORD $0x01e1 // vpinsrd    xmm4, xmm4, r9d, 1
	LONG $0x1679e3c4; WORD $0x02c8 // vpextrd    eax, xmm1, 2
	LONG $0x1679c3c4; WORD $0x02d1 // vpextrd    r9d, xmm2, 2
	BYTE $0x99                     // cdq
	WORD $0xf741; BYTE $0xf9       // idiv    r9d
	LONG $0x2259e3c4; WORD $0x02e0 // vpinsrd    xmm4, xmm4, eax, 2
	LONG $0x1679e3c4; WORD $0x03c8 // vpextrd    eax, xmm1, 3
	LONG $0x1679c3c4; WORD $0x03d1 // vpextrd    r9d, xmm2, 3
	BYTE $0x99                     // cdq
	WORD $0xf741; BYTE $0xf9       // idiv    r9d
	LONG $0x2259e3c4; WORD $0x03c8 // vpinsrd    xmm1, xmm4, eax, 3
	LONG $0x3875e3c4; WORD $0x01cb // vinserti128    ymm1, ymm1, xmm3, 1
	LONG $0x0075e2c4; BYTE $0xc8   // vpshufb    ymm1, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9 // vpermq    ymm1, ymm1, 232
	LONG $0x7f7ac1c4; WORD $0x580c // vmovdqu    oword [r8 + 2*rbx], xmm1
	LONG $0x08c38348               // add    rbx, 8
	WORD $0x3949; BYTE $0xdb       // cmp    r11, rbx
	JNE  LBB41_10
	WORD $0x854d; BYTE $0xf6       // test    r14, r14
	JE   LBB41_12

LBB41_3:
	WORD $0x2944; BYTE $0xd9     // sub    ecx, r11d
	WORD $0x894c; BYTE $0xdb     // mov    rbx, r11
	WORD $0xc1f6; BYTE $0x01     // test    cl, 1
	JE   LBB41_5
	LONG $0x04bf0f42; BYTE $0x5f // movsx    eax, word [rdi + 2*r11]
	LONG $0x0cbf0f42; BYTE $0x5e // movsx    ecx, word [rsi + 2*r11]
	BYTE $0x99                   // cdq
	WORD $0xf9f7                 // idiv    ecx
	LONG $0x04894366; BYTE $0x58 // mov    word [r8 + 2*r11], ax
	LONG $0x015b8d49             // lea    rbx, [r11 + 1]

LBB41_5:
	LONG $0x01c38349         // add    r11, 1
	WORD $0x394d; BYTE $0xda // cmp    r10, r11
	JE   LBB41_12

LBB41_6:
	LONG $0x5f04bf0f               // movsx    eax, word [rdi + 2*rbx]
	LONG $0x5e0cbf0f               // movsx    ecx, word [rsi + 2*rbx]
	BYTE $0x99                     // cdq
	WORD $0xf9f7                   // idiv    ecx
	LONG $0x04894166; BYTE $0x58   // mov    word [r8 + 2*rbx], ax
	LONG $0x5f44bf0f; BYTE $0x02   // movsx    eax, word [rdi + 2*rbx + 2]
	LONG $0x5e4cbf0f; BYTE $0x02   // movsx    ecx, word [rsi + 2*rbx + 2]
	BYTE $0x99                     // cdq
	WORD $0xf9f7                   // idiv    ecx
	LONG $0x44894166; WORD $0x0258 // mov    word [r8 + 2*rbx + 2], ax
	LONG $0x02c38348               // add    rbx, 2
	WORD $0x3949; BYTE $0xda       // cmp    r10, rbx
	JNE  LBB41_6

LBB41_12:
	VZEROUPPER
	RET

TEXT 路_int32_avx2_sum(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB42_1
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0x1ff88349         // cmp    r8, 31
	JA   LBB42_4
	WORD $0xc931             // xor    ecx, ecx
	WORD $0xc031             // xor    eax, eax
	JMP  LBB42_7

LBB42_1:
	WORD $0xc031 // xor    eax, eax
	JMP  LBB42_8

LBB42_4:
	WORD $0xe283; BYTE $0x1f // and    edx, 31
	WORD $0x894c; BYTE $0xc1 // mov    rcx, r8
	WORD $0x2948; BYTE $0xd1 // sub    rcx, rdx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0
	WORD $0xc031             // xor    eax, eax
	LONG $0xc9eff1c5         // vpxor    xmm1, xmm1, xmm1
	LONG $0xd2efe9c5         // vpxor    xmm2, xmm2, xmm2
	LONG $0xdbefe1c5         // vpxor    xmm3, xmm3, xmm3

LBB42_5:
	LONG $0x04fefdc5; BYTE $0x87   // vpaddd    ymm0, ymm0, yword [rdi + 4*rax]
	LONG $0x4cfef5c5; WORD $0x2087 // vpaddd    ymm1, ymm1, yword [rdi + 4*rax + 32]
	LONG $0x54feedc5; WORD $0x4087 // vpaddd    ymm2, ymm2, yword [rdi + 4*rax + 64]
	LONG $0x5cfee5c5; WORD $0x6087 // vpaddd    ymm3, ymm3, yword [rdi + 4*rax + 96]
	LONG $0x20c08348               // add    rax, 32
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JNE  LBB42_5
	LONG $0xc0fef5c5               // vpaddd    ymm0, ymm1, ymm0
	LONG $0xc0feedc5               // vpaddd    ymm0, ymm2, ymm0
	LONG $0xc0fee5c5               // vpaddd    ymm0, ymm3, ymm0
	LONG $0x397de3c4; WORD $0x01c1 // vextracti128    xmm1, ymm0, 1
	LONG $0xc1fef9c5               // vpaddd    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0x4e   // vpshufd    xmm1, xmm0, 78
	LONG $0xc1fef9c5               // vpaddd    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0xe5   // vpshufd    xmm1, xmm0, 229
	LONG $0xc1fef9c5               // vpaddd    xmm0, xmm0, xmm1
	LONG $0xc07ef9c5               // vmovd    eax, xmm0
	WORD $0x8548; BYTE $0xd2       // test    rdx, rdx
	JE   LBB42_8

LBB42_7:
	WORD $0x0403; BYTE $0x8f // add    eax, dword [rdi + 4*rcx]
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc8 // cmp    r8, rcx
	JNE  LBB42_7

LBB42_8:
	WORD $0x0689 // mov    dword [rsi], eax
	VZEROUPPER
	RET

TEXT 路_int32_avx2_min(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	WORD $0x078b                 // mov    eax, dword [rdi]
	WORD $0xd285                 // test    edx, edx
	JLE  LBB43_7
	WORD $0x8941; BYTE $0xd1     // mov    r9d, edx
	LONG $0x01f98349             // cmp    r9, 1
	JE   LBB43_7
	LONG $0xff418d4d             // lea    r8, [r9 - 1]
	LONG $0x000001b9; BYTE $0x00 // mov    ecx, 1
	LONG $0x1ff88349             // cmp    r8, 31
	JBE  LBB43_6
	WORD $0x894c; BYTE $0xc2     // mov    rdx, r8
	LONG $0xe0e28348             // and    rdx, -32
	LONG $0x014a8d48             // lea    rcx, [rdx + 1]
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	WORD $0xc031                 // xor    eax, eax
	LONG $0xc86ffdc5             // vmovdqa    ymm1, ymm0
	LONG $0xd06ffdc5             // vmovdqa    ymm2, ymm0
	LONG $0xd86ffdc5             // vmovdqa    ymm3, ymm0

LBB43_4:
	LONG $0x397de2c4; WORD $0x8744; BYTE $0x04 // vpminsd    ymm0, ymm0, yword [rdi + 4*rax + 4]
	LONG $0x3975e2c4; WORD $0x874c; BYTE $0x24 // vpminsd    ymm1, ymm1, yword [rdi + 4*rax + 36]
	LONG $0x396de2c4; WORD $0x8754; BYTE $0x44 // vpminsd    ymm2, ymm2, yword [rdi + 4*rax + 68]
	LONG $0x3965e2c4; WORD $0x875c; BYTE $0x64 // vpminsd    ymm3, ymm3, yword [rdi + 4*rax + 100]
	LONG $0x20c08348                           // add    rax, 32
	WORD $0x3948; BYTE $0xc2                   // cmp    rdx, rax
	JNE  LBB43_4
	LONG $0x397de2c4; BYTE $0xc1               // vpminsd    ymm0, ymm0, ymm1
	LONG $0x397de2c4; BYTE $0xc2               // vpminsd    ymm0, ymm0, ymm2
	LONG $0x397de2c4; BYTE $0xc3               // vpminsd    ymm0, ymm0, ymm3
	LONG $0x397de3c4; WORD $0x01c1             // vextracti128    xmm1, ymm0, 1
	LONG $0x3979e2c4; BYTE $0xc1               // vpminsd    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0x4e               // vpshufd    xmm1, xmm0, 78
	LONG $0x3979e2c4; BYTE $0xc1               // vpminsd    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0xe5               // vpshufd    xmm1, xmm0, 229
	LONG $0x3979e2c4; BYTE $0xc1               // vpminsd    xmm0, xmm0, xmm1
	LONG $0xc07ef9c5                           // vmovd    eax, xmm0
	WORD $0x3949; BYTE $0xd0                   // cmp    r8, rdx
	JE   LBB43_7

LBB43_6:
	WORD $0x148b; BYTE $0x8f // mov    edx, dword [rdi + 4*rcx]
	WORD $0xc239             // cmp    edx, eax
	WORD $0x4e0f; BYTE $0xc2 // cmovle    eax, edx
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB43_6

LBB43_7:
	WORD $0x0689 // mov    dword [rsi], eax
	VZEROUPPER
	RET

TEXT 路_int32_avx2_max(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	WORD $0x078b                 // mov    eax, dword [rdi]
	WORD $0xd285                 // test    edx, edx
	JLE  LBB44_7
	WORD $0x8941; BYTE $0xd1     // mov    r9d, edx
	LONG $0x01f98349             // cmp    r9, 1
	JE   LBB44_7
	LONG $0xff418d4d             // lea    r8, [r9 - 1]
	LONG $0x000001b9; BYTE $0x00 // mov    ecx, 1
	LONG $0x1ff88349             // cmp    r8, 31
	JBE  LBB44_6
	WORD $0x894c; BYTE $0xc2     // mov    rdx, r8
	LONG $0xe0e28348             // and    rdx, -32
	LONG $0x014a8d48             // lea    rcx, [rdx + 1]
	LONG $0xc06ef9c5             // vmovd    xmm0, eax
	LONG $0x587de2c4; BYTE $0xc0 // vpbroadcastd    ymm0, xmm0
	WORD $0xc031                 // xor    eax, eax
	LONG $0xc86ffdc5             // vmovdqa    ymm1, ymm0
	LONG $0xd06ffdc5             // vmovdqa    ymm2, ymm0
	LONG $0xd86ffdc5             // vmovdqa    ymm3, ymm0

LBB44_4:
	LONG $0x3d7de2c4; WORD $0x8744; BYTE $0x04 // vpmaxsd    ymm0, ymm0, yword [rdi + 4*rax + 4]
	LONG $0x3d75e2c4; WORD $0x874c; BYTE $0x24 // vpmaxsd    ymm1, ymm1, yword [rdi + 4*rax + 36]
	LONG $0x3d6de2c4; WORD $0x8754; BYTE $0x44 // vpmaxsd    ymm2, ymm2, yword [rdi + 4*rax + 68]
	LONG $0x3d65e2c4; WORD $0x875c; BYTE $0x64 // vpmaxsd    ymm3, ymm3, yword [rdi + 4*rax + 100]
	LONG $0x20c08348                           // add    rax, 32
	WORD $0x3948; BYTE $0xc2                   // cmp    rdx, rax
	JNE  LBB44_4
	LONG $0x3d7de2c4; BYTE $0xc1               // vpmaxsd    ymm0, ymm0, ymm1
	LONG $0x3d7de2c4; BYTE $0xc2               // vpmaxsd    ymm0, ymm0, ymm2
	LONG $0x3d7de2c4; BYTE $0xc3               // vpmaxsd    ymm0, ymm0, ymm3
	LONG $0x397de3c4; WORD $0x01c1             // vextracti128    xmm1, ymm0, 1
	LONG $0x3d79e2c4; BYTE $0xc1               // vpmaxsd    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0x4e               // vpshufd    xmm1, xmm0, 78
	LONG $0x3d79e2c4; BYTE $0xc1               // vpmaxsd    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0xe5               // vpshufd    xmm1, xmm0, 229
	LONG $0x3d79e2c4; BYTE $0xc1               // vpmaxsd    xmm0, xmm0, xmm1
	LONG $0xc07ef9c5                           // vmovd    eax, xmm0
	WORD $0x3949; BYTE $0xd0                   // cmp    r8, rdx
	JE   LBB44_7

LBB44_6:
	WORD $0x148b; BYTE $0x8f // mov    edx, dword [rdi + 4*rcx]
	WORD $0xc239             // cmp    edx, eax
	WORD $0x4d0f; BYTE $0xc2 // cmovge    eax, edx
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	JNE  LBB44_6

LBB44_7:
	WORD $0x0689 // mov    dword [rsi], eax
	VZEROUPPER
	RET

TEXT 路_int32_avx2_add(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB45_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x1ff88349         // cmp    r8, 31
	JA   LBB45_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB45_3

LBB45_7:
	LONG $0x82148d4e         // lea    r10, [rdx + 4*r8]
	LONG $0x87048d4a         // lea    rax, [rdi + 4*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd6970f41         // seta    r14b
	LONG $0x86048d4a         // lea    rax, [rsi + 4*r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB45_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB45_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x1fe18341         // and    r9d, 31
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x294d; BYTE $0xcb // sub    r11, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB45_10:
	LONG $0x6f7ea1c4; WORD $0x9604             // vmovdqu    ymm0, yword [rsi + 4*r10]
	LONG $0x6f7ea1c4; WORD $0x964c; BYTE $0x20 // vmovdqu    ymm1, yword [rsi + 4*r10 + 32]
	LONG $0x6f7ea1c4; WORD $0x9654; BYTE $0x40 // vmovdqu    ymm2, yword [rsi + 4*r10 + 64]
	LONG $0x6f7ea1c4; WORD $0x965c; BYTE $0x60 // vmovdqu    ymm3, yword [rsi + 4*r10 + 96]
	LONG $0xfe7da1c4; WORD $0x9704             // vpaddd    ymm0, ymm0, yword [rdi + 4*r10]
	LONG $0xfe75a1c4; WORD $0x974c; BYTE $0x20 // vpaddd    ymm1, ymm1, yword [rdi + 4*r10 + 32]
	LONG $0xfe6da1c4; WORD $0x9754; BYTE $0x40 // vpaddd    ymm2, ymm2, yword [rdi + 4*r10 + 64]
	LONG $0xfe65a1c4; WORD $0x975c; BYTE $0x60 // vpaddd    ymm3, ymm3, yword [rdi + 4*r10 + 96]
	LONG $0x7f7ea1c4; WORD $0x9204             // vmovdqu    yword [rdx + 4*r10], ymm0
	LONG $0x7f7ea1c4; WORD $0x924c; BYTE $0x20 // vmovdqu    yword [rdx + 4*r10 + 32], ymm1
	LONG $0x7f7ea1c4; WORD $0x9254; BYTE $0x40 // vmovdqu    yword [rdx + 4*r10 + 64], ymm2
	LONG $0x7f7ea1c4; WORD $0x925c; BYTE $0x60 // vmovdqu    yword [rdx + 4*r10 + 96], ymm3
	LONG $0x20c28349                           // add    r10, 32
	WORD $0x394d; BYTE $0xd3                   // cmp    r11, r10
	JNE  LBB45_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB45_12

LBB45_3:
	WORD $0x2944; BYTE $0xd9 // sub    ecx, r11d
	WORD $0x894d; BYTE $0xd9 // mov    r9, r11
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB45_5

LBB45_4:
	LONG $0x9e048b42 // mov    eax, dword [rsi + 4*r11]
	LONG $0x9f040342 // add    eax, dword [rdi + 4*r11]
	LONG $0x9a048942 // mov    dword [rdx + 4*r11], eax
	LONG $0x01c38349 // add    r11, 1
	LONG $0xffc18348 // add    rcx, -1
	JNE  LBB45_4

LBB45_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB45_12

LBB45_6:
	LONG $0x9e048b42             // mov    eax, dword [rsi + 4*r11]
	LONG $0x9f040342             // add    eax, dword [rdi + 4*r11]
	LONG $0x9a048942             // mov    dword [rdx + 4*r11], eax
	LONG $0x9e448b42; BYTE $0x04 // mov    eax, dword [rsi + 4*r11 + 4]
	LONG $0x9f440342; BYTE $0x04 // add    eax, dword [rdi + 4*r11 + 4]
	LONG $0x9a448942; BYTE $0x04 // mov    dword [rdx + 4*r11 + 4], eax
	LONG $0x9e448b42; BYTE $0x08 // mov    eax, dword [rsi + 4*r11 + 8]
	LONG $0x9f440342; BYTE $0x08 // add    eax, dword [rdi + 4*r11 + 8]
	LONG $0x9a448942; BYTE $0x08 // mov    dword [rdx + 4*r11 + 8], eax
	LONG $0x9e448b42; BYTE $0x0c // mov    eax, dword [rsi + 4*r11 + 12]
	LONG $0x9f440342; BYTE $0x0c // add    eax, dword [rdi + 4*r11 + 12]
	LONG $0x9a448942; BYTE $0x0c // mov    dword [rdx + 4*r11 + 12], eax
	LONG $0x04c38349             // add    r11, 4
	WORD $0x394d; BYTE $0xd8     // cmp    r8, r11
	JNE  LBB45_6

LBB45_12:
	VZEROUPPER
	RET

TEXT 路_int32_avx2_sub(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB46_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x1ff88349         // cmp    r8, 31
	JA   LBB46_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB46_3

LBB46_7:
	LONG $0x82148d4e         // lea    r10, [rdx + 4*r8]
	LONG $0x87048d4a         // lea    rax, [rdi + 4*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd6970f41         // seta    r14b
	LONG $0x86048d4a         // lea    rax, [rsi + 4*r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB46_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB46_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x1fe18341         // and    r9d, 31
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x294d; BYTE $0xcb // sub    r11, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB46_10:
	LONG $0x6f7ea1c4; WORD $0x9704             // vmovdqu    ymm0, yword [rdi + 4*r10]
	LONG $0x6f7ea1c4; WORD $0x974c; BYTE $0x20 // vmovdqu    ymm1, yword [rdi + 4*r10 + 32]
	LONG $0x6f7ea1c4; WORD $0x9754; BYTE $0x40 // vmovdqu    ymm2, yword [rdi + 4*r10 + 64]
	LONG $0x6f7ea1c4; WORD $0x975c; BYTE $0x60 // vmovdqu    ymm3, yword [rdi + 4*r10 + 96]
	LONG $0xfa7da1c4; WORD $0x9604             // vpsubd    ymm0, ymm0, yword [rsi + 4*r10]
	LONG $0xfa75a1c4; WORD $0x964c; BYTE $0x20 // vpsubd    ymm1, ymm1, yword [rsi + 4*r10 + 32]
	LONG $0xfa6da1c4; WORD $0x9654; BYTE $0x40 // vpsubd    ymm2, ymm2, yword [rsi + 4*r10 + 64]
	LONG $0xfa65a1c4; WORD $0x965c; BYTE $0x60 // vpsubd    ymm3, ymm3, yword [rsi + 4*r10 + 96]
	LONG $0x7f7ea1c4; WORD $0x9204             // vmovdqu    yword [rdx + 4*r10], ymm0
	LONG $0x7f7ea1c4; WORD $0x924c; BYTE $0x20 // vmovdqu    yword [rdx + 4*r10 + 32], ymm1
	LONG $0x7f7ea1c4; WORD $0x9254; BYTE $0x40 // vmovdqu    yword [rdx + 4*r10 + 64], ymm2
	LONG $0x7f7ea1c4; WORD $0x925c; BYTE $0x60 // vmovdqu    yword [rdx + 4*r10 + 96], ymm3
	LONG $0x20c28349                           // add    r10, 32
	WORD $0x394d; BYTE $0xd3                   // cmp    r11, r10
	JNE  LBB46_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB46_12

LBB46_3:
	WORD $0x2944; BYTE $0xd9 // sub    ecx, r11d
	WORD $0x894d; BYTE $0xd9 // mov    r9, r11
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB46_5

LBB46_4:
	LONG $0x9f048b42 // mov    eax, dword [rdi + 4*r11]
	LONG $0x9e042b42 // sub    eax, dword [rsi + 4*r11]
	LONG $0x9a048942 // mov    dword [rdx + 4*r11], eax
	LONG $0x01c38349 // add    r11, 1
	LONG $0xffc18348 // add    rcx, -1
	JNE  LBB46_4

LBB46_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB46_12

LBB46_6:
	LONG $0x9f048b42             // mov    eax, dword [rdi + 4*r11]
	LONG $0x9e042b42             // sub    eax, dword [rsi + 4*r11]
	LONG $0x9a048942             // mov    dword [rdx + 4*r11], eax
	LONG $0x9f448b42; BYTE $0x04 // mov    eax, dword [rdi + 4*r11 + 4]
	LONG $0x9e442b42; BYTE $0x04 // sub    eax, dword [rsi + 4*r11 + 4]
	LONG $0x9a448942; BYTE $0x04 // mov    dword [rdx + 4*r11 + 4], eax
	LONG $0x9f448b42; BYTE $0x08 // mov    eax, dword [rdi + 4*r11 + 8]
	LONG $0x9e442b42; BYTE $0x08 // sub    eax, dword [rsi + 4*r11 + 8]
	LONG $0x9a448942; BYTE $0x08 // mov    dword [rdx + 4*r11 + 8], eax
	LONG $0x9f448b42; BYTE $0x0c // mov    eax, dword [rdi + 4*r11 + 12]
	LONG $0x9e442b42; BYTE $0x0c // sub    eax, dword [rsi + 4*r11 + 12]
	LONG $0x9a448942; BYTE $0x0c // mov    dword [rdx + 4*r11 + 12], eax
	LONG $0x04c38349             // add    r11, 4
	WORD $0x394d; BYTE $0xd8     // cmp    r8, r11
	JNE  LBB46_6

LBB46_12:
	VZEROUPPER
	RET

TEXT 路_int32_avx2_mul(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB47_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x1ff88349         // cmp    r8, 31
	JA   LBB47_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB47_3

LBB47_7:
	LONG $0x82148d4e         // lea    r10, [rdx + 4*r8]
	LONG $0x87048d4a         // lea    rax, [rdi + 4*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd6970f41         // seta    r14b
	LONG $0x86048d4a         // lea    rax, [rsi + 4*r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB47_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB47_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x1fe18341         // and    r9d, 31
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x294d; BYTE $0xcb // sub    r11, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB47_10:
	LONG $0x6f7ea1c4; WORD $0x9604             // vmovdqu    ymm0, yword [rsi + 4*r10]
	LONG $0x6f7ea1c4; WORD $0x964c; BYTE $0x20 // vmovdqu    ymm1, yword [rsi + 4*r10 + 32]
	LONG $0x6f7ea1c4; WORD $0x9654; BYTE $0x40 // vmovdqu    ymm2, yword [rsi + 4*r10 + 64]
	LONG $0x6f7ea1c4; WORD $0x965c; BYTE $0x60 // vmovdqu    ymm3, yword [rsi + 4*r10 + 96]
	LONG $0x407da2c4; WORD $0x9704             // vpmulld    ymm0, ymm0, yword [rdi + 4*r10]
	LONG $0x4075a2c4; WORD $0x974c; BYTE $0x20 // vpmulld    ymm1, ymm1, yword [rdi + 4*r10 + 32]
	LONG $0x406da2c4; WORD $0x9754; BYTE $0x40 // vpmulld    ymm2, ymm2, yword [rdi + 4*r10 + 64]
	LONG $0x4065a2c4; WORD $0x975c; BYTE $0x60 // vpmulld    ymm3, ymm3, yword [rdi + 4*r10 + 96]
	LONG $0x7f7ea1c4; WORD $0x9204             // vmovdqu    yword [rdx + 4*r10], ymm0
	LONG $0x7f7ea1c4; WORD $0x924c; BYTE $0x20 // vmovdqu    yword [rdx + 4*r10 + 32], ymm1
	LONG $0x7f7ea1c4; WORD $0x9254; BYTE $0x40 // vmovdqu    yword [rdx + 4*r10 + 64], ymm2
	LONG $0x7f7ea1c4; WORD $0x925c; BYTE $0x60 // vmovdqu    yword [rdx + 4*r10 + 96], ymm3
	LONG $0x20c28349                           // add    r10, 32
	WORD $0x394d; BYTE $0xd3                   // cmp    r11, r10
	JNE  LBB47_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB47_12

LBB47_3:
	WORD $0x2944; BYTE $0xd9 // sub    ecx, r11d
	WORD $0x894d; BYTE $0xd9 // mov    r9, r11
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB47_5

LBB47_4:
	LONG $0x9e048b42             // mov    eax, dword [rsi + 4*r11]
	LONG $0x04af0f42; BYTE $0x9f // imul    eax, dword [rdi + 4*r11]
	LONG $0x9a048942             // mov    dword [rdx + 4*r11], eax
	LONG $0x01c38349             // add    r11, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB47_4

LBB47_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB47_12

LBB47_6:
	LONG $0x9e048b42               // mov    eax, dword [rsi + 4*r11]
	LONG $0x04af0f42; BYTE $0x9f   // imul    eax, dword [rdi + 4*r11]
	LONG $0x9a048942               // mov    dword [rdx + 4*r11], eax
	LONG $0x9e448b42; BYTE $0x04   // mov    eax, dword [rsi + 4*r11 + 4]
	LONG $0x44af0f42; WORD $0x049f // imul    eax, dword [rdi + 4*r11 + 4]
	LONG $0x9a448942; BYTE $0x04   // mov    dword [rdx + 4*r11 + 4], eax
	LONG $0x9e448b42; BYTE $0x08   // mov    eax, dword [rsi + 4*r11 + 8]
	LONG $0x44af0f42; WORD $0x089f // imul    eax, dword [rdi + 4*r11 + 8]
	LONG $0x9a448942; BYTE $0x08   // mov    dword [rdx + 4*r11 + 8], eax
	LONG $0x9e448b42; BYTE $0x0c   // mov    eax, dword [rsi + 4*r11 + 12]
	LONG $0x44af0f42; WORD $0x0c9f // imul    eax, dword [rdi + 4*r11 + 12]
	LONG $0x9a448942; BYTE $0x0c   // mov    dword [rdx + 4*r11 + 12], eax
	LONG $0x04c38349               // add    r11, 4
	WORD $0x394d; BYTE $0xd8       // cmp    r8, r11
	JNE  LBB47_6

LBB47_12:
	VZEROUPPER
	RET

TEXT 路_int32_avx2_div(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB48_12
	WORD $0x8949; BYTE $0xd0 // mov    r8, rdx
	WORD $0x8941; BYTE $0xca // mov    r10d, ecx
	LONG $0x07fa8349         // cmp    r10, 7
	JA   LBB48_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB48_3

LBB48_7:
	LONG $0x90148d4b         // lea    rdx, [r8 + 4*r10]
	LONG $0x97048d4a         // lea    rax, [rdi + 4*r10]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd1970f41         // seta    r9b
	LONG $0x96048d4a         // lea    rax, [rsi + 4*r10]
	WORD $0x3948; BYTE $0xfa // cmp    rdx, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xf2 // cmp    rdx, rsi
	WORD $0x970f; BYTE $0xd2 // seta    dl
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	WORD $0x8441; BYTE $0xd9 // test    r9b, bl
	JNE  LBB48_3
	WORD $0xd020             // and    al, dl
	JNE  LBB48_3
	WORD $0x8941; BYTE $0xce // mov    r14d, ecx
	LONG $0x07e68341         // and    r14d, 7
	WORD $0x894d; BYTE $0xd3 // mov    r11, r10
	WORD $0x294d; BYTE $0xf3 // sub    r11, r14
	WORD $0xdb31             // xor    ebx, ebx

LBB48_10:
	LONG $0x146ffac5; BYTE $0x9f               // vmovdqu    xmm2, oword [rdi + 4*rbx]
	LONG $0x1679e3c4; WORD $0x01d0             // vpextrd    eax, xmm2, 1
	LONG $0x446ffac5; WORD $0x109f             // vmovdqu    xmm0, oword [rdi + 4*rbx + 16]
	LONG $0x1c6ffac5; BYTE $0x9e               // vmovdqu    xmm3, oword [rsi + 4*rbx]
	LONG $0x1679c3c4; WORD $0x01d9             // vpextrd    r9d, xmm3, 1
	LONG $0x4c6ffac5; WORD $0x109e             // vmovdqu    xmm1, oword [rsi + 4*rbx + 16]
	BYTE $0x99                                 // cdq
	WORD $0xf741; BYTE $0xf9                   // idiv    r9d
	WORD $0x8941; BYTE $0xc1                   // mov    r9d, eax
	LONG $0xd07ef9c5                           // vmovd    eax, xmm2
	LONG $0x7e79c1c4; BYTE $0xdf               // vmovd    r15d, xmm3
	BYTE $0x99                                 // cdq
	WORD $0xf741; BYTE $0xff                   // idiv    r15d
	LONG $0xe06ef9c5                           // vmovd    xmm4, eax
	LONG $0x2259c3c4; WORD $0x01e1             // vpinsrd    xmm4, xmm4, r9d, 1
	LONG $0x1679e3c4; WORD $0x02d0             // vpextrd    eax, xmm2, 2
	LONG $0x1679c3c4; WORD $0x02d9             // vpextrd    r9d, xmm3, 2
	BYTE $0x99                                 // cdq
	WORD $0xf741; BYTE $0xf9                   // idiv    r9d
	LONG $0x2259e3c4; WORD $0x02e0             // vpinsrd    xmm4, xmm4, eax, 2
	LONG $0x1679e3c4; WORD $0x03d0             // vpextrd    eax, xmm2, 3
	LONG $0x1679c3c4; WORD $0x03d9             // vpextrd    r9d, xmm3, 3
	BYTE $0x99                                 // cdq
	WORD $0xf741; BYTE $0xf9                   // idiv    r9d
	LONG $0x2259e3c4; WORD $0x03d0             // vpinsrd    xmm2, xmm4, eax, 3
	LONG $0x1679e3c4; WORD $0x01c0             // vpextrd    eax, xmm0, 1
	LONG $0x1679c3c4; WORD $0x01c9             // vpextrd    r9d, xmm1, 1
	BYTE $0x99                                 // cdq
	WORD $0xf741; BYTE $0xf9                   // idiv    r9d
	WORD $0x8941; BYTE $0xc1                   // mov    r9d, eax
	LONG $0xc07ef9c5                           // vmovd    eax, xmm0
	LONG $0x7e79c1c4; BYTE $0xcf               // vmovd    r15d, xmm1
	BYTE $0x99                                 // cdq
	WORD $0xf741; BYTE $0xff                   // idiv    r15d
	LONG $0xd86ef9c5                           // vmovd    xmm3, eax
	LONG $0x2261c3c4; WORD $0x01d9             // vpinsrd    xmm3, xmm3, r9d, 1
	LONG $0x1679e3c4; WORD $0x02c0             // vpextrd    eax, xmm0, 2
	LONG $0x1679c3c4; WORD $0x02c9             // vpextrd    r9d, xmm1, 2
	BYTE $0x99                                 // cdq
	WORD $0xf741; BYTE $0xf9                   // idiv    r9d
	LONG $0x2261e3c4; WORD $0x02d8             // vpinsrd    xmm3, xmm3, eax, 2
	LONG $0x1679e3c4; WORD $0x03c0             // vpextrd    eax, xmm0, 3
	LONG $0x1679c3c4; WORD $0x03c9             // vpextrd    r9d, xmm1, 3
	BYTE $0x99                                 // cdq
	WORD $0xf741; BYTE $0xf9                   // idiv    r9d
	LONG $0x2261e3c4; WORD $0x03c0             // vpinsrd    xmm0, xmm3, eax, 3
	LONG $0x7f7ac1c4; WORD $0x9844; BYTE $0x10 // vmovdqu    oword [r8 + 4*rbx + 16], xmm0
	LONG $0x7f7ac1c4; WORD $0x9814             // vmovdqu    oword [r8 + 4*rbx], xmm2
	LONG $0x08c38348                           // add    rbx, 8
	WORD $0x3949; BYTE $0xdb                   // cmp    r11, rbx
	JNE  LBB48_10
	WORD $0x854d; BYTE $0xf6                   // test    r14, r14
	JE   LBB48_12

LBB48_3:
	WORD $0x2944; BYTE $0xd9 // sub    ecx, r11d
	WORD $0x894c; BYTE $0xdb // mov    rbx, r11
	WORD $0xc1f6; BYTE $0x01 // test    cl, 1
	JE   LBB48_5
	LONG $0x9f048b42         // mov    eax, dword [rdi + 4*r11]
	BYTE $0x99               // cdq
	LONG $0x9e3cf742         // idiv    dword [rsi + 4*r11]
	LONG $0x98048943         // mov    dword [r8 + 4*r11], eax
	LONG $0x015b8d49         // lea    rbx, [r11 + 1]

LBB48_5:
	LONG $0x01c38349         // add    r11, 1
	WORD $0x394d; BYTE $0xda // cmp    r10, r11
	JE   LBB48_12

LBB48_6:
	WORD $0x048b; BYTE $0x9f     // mov    eax, dword [rdi + 4*rbx]
	BYTE $0x99                   // cdq
	WORD $0x3cf7; BYTE $0x9e     // idiv    dword [rsi + 4*rbx]
	LONG $0x98048941             // mov    dword [r8 + 4*rbx], eax
	LONG $0x049f448b             // mov    eax, dword [rdi + 4*rbx + 4]
	BYTE $0x99                   // cdq
	LONG $0x049e7cf7             // idiv    dword [rsi + 4*rbx + 4]
	LONG $0x98448941; BYTE $0x04 // mov    dword [r8 + 4*rbx + 4], eax
	LONG $0x02c38348             // add    rbx, 2
	WORD $0x3949; BYTE $0xda     // cmp    r10, rbx
	JNE  LBB48_6

LBB48_12:
	RET

TEXT 路_int64_avx2_sum(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB49_1
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0x0ff88349         // cmp    r8, 15
	JA   LBB49_4
	WORD $0xc931             // xor    ecx, ecx
	WORD $0xc031             // xor    eax, eax
	JMP  LBB49_7

LBB49_1:
	WORD $0xc031 // xor    eax, eax
	JMP  LBB49_8

LBB49_4:
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x894c; BYTE $0xc1 // mov    rcx, r8
	WORD $0x2948; BYTE $0xd1 // sub    rcx, rdx
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0
	WORD $0xc031             // xor    eax, eax
	LONG $0xc9eff1c5         // vpxor    xmm1, xmm1, xmm1
	LONG $0xd2efe9c5         // vpxor    xmm2, xmm2, xmm2
	LONG $0xdbefe1c5         // vpxor    xmm3, xmm3, xmm3

LBB49_5:
	LONG $0x04d4fdc5; BYTE $0xc7   // vpaddq    ymm0, ymm0, yword [rdi + 8*rax]
	LONG $0x4cd4f5c5; WORD $0x20c7 // vpaddq    ymm1, ymm1, yword [rdi + 8*rax + 32]
	LONG $0x54d4edc5; WORD $0x40c7 // vpaddq    ymm2, ymm2, yword [rdi + 8*rax + 64]
	LONG $0x5cd4e5c5; WORD $0x60c7 // vpaddq    ymm3, ymm3, yword [rdi + 8*rax + 96]
	LONG $0x10c08348               // add    rax, 16
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JNE  LBB49_5
	LONG $0xc0d4f5c5               // vpaddq    ymm0, ymm1, ymm0
	LONG $0xc0d4edc5               // vpaddq    ymm0, ymm2, ymm0
	LONG $0xc0d4e5c5               // vpaddq    ymm0, ymm3, ymm0
	LONG $0x397de3c4; WORD $0x01c1 // vextracti128    xmm1, ymm0, 1
	LONG $0xc1d4f9c5               // vpaddq    xmm0, xmm0, xmm1
	LONG $0xc870f9c5; BYTE $0x4e   // vpshufd    xmm1, xmm0, 78
	LONG $0xc1d4f9c5               // vpaddq    xmm0, xmm0, xmm1
	LONG $0x7ef9e1c4; BYTE $0xc0   // vmovq    rax, xmm0
	WORD $0x8548; BYTE $0xd2       // test    rdx, rdx
	JE   LBB49_8

LBB49_7:
	LONG $0xcf040348         // add    rax, qword [rdi + 8*rcx]
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xc8 // cmp    r8, rcx
	JNE  LBB49_7

LBB49_8:
	WORD $0x8948; BYTE $0x06 // mov    qword [rsi], rax
	VZEROUPPER
	RET

TEXT 路_int64_avx2_min(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	WORD $0x8b48; BYTE $0x07     // mov    rax, qword [rdi]
	WORD $0xd285                 // test    edx, edx
	JLE  LBB50_7
	WORD $0x8941; BYTE $0xd2     // mov    r10d, edx
	LONG $0x01fa8349             // cmp    r10, 1
	JE   LBB50_7
	LONG $0xff428d4d             // lea    r8, [r10 - 1]
	LONG $0x000001b9; BYTE $0x00 // mov    ecx, 1
	LONG $0x0ff88349             // cmp    r8, 15
	JBE  LBB50_6
	WORD $0x894d; BYTE $0xc1     // mov    r9, r8
	LONG $0xf0e18349             // and    r9, -16
	LONG $0x01498d49             // lea    rcx, [r9 + 1]
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	WORD $0xc031                 // xor    eax, eax
	LONG $0xd86ffdc5             // vmovdqa    ymm3, ymm0
	LONG $0xd06ffdc5             // vmovdqa    ymm2, ymm0
	LONG $0xc86ffdc5             // vmovdqa    ymm1, ymm0

LBB50_4:
	LONG $0x646ffec5; WORD $0x08c7 // vmovdqu    ymm4, yword [rdi + 8*rax + 8]
	LONG $0x6c6ffec5; WORD $0x28c7 // vmovdqu    ymm5, yword [rdi + 8*rax + 40]
	LONG $0x746ffec5; WORD $0x48c7 // vmovdqu    ymm6, yword [rdi + 8*rax + 72]
	LONG $0x377de2c4; BYTE $0xfc   // vpcmpgtq    ymm7, ymm0, ymm4
	LONG $0x4b7de3c4; WORD $0x70c4 // vblendvpd    ymm0, ymm0, ymm4, ymm7
	LONG $0x646ffec5; WORD $0x68c7 // vmovdqu    ymm4, yword [rdi + 8*rax + 104]
	LONG $0x3765e2c4; BYTE $0xfd   // vpcmpgtq    ymm7, ymm3, ymm5
	LONG $0x4b65e3c4; WORD $0x70dd // vblendvpd    ymm3, ymm3, ymm5, ymm7
	LONG $0x376de2c4; BYTE $0xee   // vpcmpgtq    ymm5, ymm2, ymm6
	LONG $0x4b6de3c4; WORD $0x50d6 // vblendvpd    ymm2, ymm2, ymm6, ymm5
	LONG $0x3775e2c4; BYTE $0xec   // vpcmpgtq    ymm5, ymm1, ymm4
	LONG $0x4b75e3c4; WORD $0x50cc // vblendvpd    ymm1, ymm1, ymm4, ymm5
	LONG $0x10c08348               // add    rax, 16
	WORD $0x3949; BYTE $0xc1       // cmp    r9, rax
	JNE  LBB50_4
	LONG $0x3765e2c4; BYTE $0xe0   // vpcmpgtq    ymm4, ymm3, ymm0
	LONG $0x4b65e3c4; WORD $0x40c0 // vblendvpd    ymm0, ymm3, ymm0, ymm4
	LONG $0x376de2c4; BYTE $0xd8   // vpcmpgtq    ymm3, ymm2, ymm0
	LONG $0x4b6de3c4; WORD $0x30c0 // vblendvpd    ymm0, ymm2, ymm0, ymm3
	LONG $0x3775e2c4; BYTE $0xd0   // vpcmpgtq    ymm2, ymm1, ymm0
	LONG $0x4b75e3c4; WORD $0x20c0 // vblendvpd    ymm0, ymm1, ymm0, ymm2
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128    xmm1, ymm0, 1
	LONG $0x3771e2c4; BYTE $0xd0   // vpcmpgtq    xmm2, xmm1, xmm0
	LONG $0x4b71e3c4; WORD $0x20c0 // vblendvpd    xmm0, xmm1, xmm0, xmm2
	LONG $0x0479e3c4; WORD $0x4ec8 // vpermilps    xmm1, xmm0, 78
	LONG $0x3771e2c4; BYTE $0xd0   // vpcmpgtq    xmm2, xmm1, xmm0
	LONG $0x4b71e3c4; WORD $0x20c0 // vblendvpd    xmm0, xmm1, xmm0, xmm2
	LONG $0x7ef9e1c4; BYTE $0xc0   // vmovq    rax, xmm0
	WORD $0x394d; BYTE $0xc8       // cmp    r8, r9
	JE   LBB50_7

LBB50_6:
	LONG $0xcf148b48         // mov    rdx, qword [rdi + 8*rcx]
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	LONG $0xc24e0f48         // cmovle    rax, rdx
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xca // cmp    r10, rcx
	JNE  LBB50_6

LBB50_7:
	WORD $0x8948; BYTE $0x06 // mov    qword [rsi], rax
	VZEROUPPER
	RET

TEXT 路_int64_avx2_max(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	WORD $0x8b48; BYTE $0x07     // mov    rax, qword [rdi]
	WORD $0xd285                 // test    edx, edx
	JLE  LBB51_7
	WORD $0x8941; BYTE $0xd2     // mov    r10d, edx
	LONG $0x01fa8349             // cmp    r10, 1
	JE   LBB51_7
	LONG $0xff428d4d             // lea    r8, [r10 - 1]
	LONG $0x000001b9; BYTE $0x00 // mov    ecx, 1
	LONG $0x0ff88349             // cmp    r8, 15
	JBE  LBB51_6
	WORD $0x894d; BYTE $0xc1     // mov    r9, r8
	LONG $0xf0e18349             // and    r9, -16
	LONG $0x01498d49             // lea    rcx, [r9 + 1]
	LONG $0x6ef9e1c4; BYTE $0xc0 // vmovq    xmm0, rax
	LONG $0x597de2c4; BYTE $0xc0 // vpbroadcastq    ymm0, xmm0
	WORD $0xc031                 // xor    eax, eax
	LONG $0xd86ffdc5             // vmovdqa    ymm3, ymm0
	LONG $0xd06ffdc5             // vmovdqa    ymm2, ymm0
	LONG $0xc86ffdc5             // vmovdqa    ymm1, ymm0

LBB51_4:
	LONG $0x646ffec5; WORD $0x08c7 // vmovdqu    ymm4, yword [rdi + 8*rax + 8]
	LONG $0x6c6ffec5; WORD $0x28c7 // vmovdqu    ymm5, yword [rdi + 8*rax + 40]
	LONG $0x746ffec5; WORD $0x48c7 // vmovdqu    ymm6, yword [rdi + 8*rax + 72]
	LONG $0x375de2c4; BYTE $0xf8   // vpcmpgtq    ymm7, ymm4, ymm0
	LONG $0x4b7de3c4; WORD $0x70c4 // vblendvpd    ymm0, ymm0, ymm4, ymm7
	LONG $0x646ffec5; WORD $0x68c7 // vmovdqu    ymm4, yword [rdi + 8*rax + 104]
	LONG $0x3755e2c4; BYTE $0xfb   // vpcmpgtq    ymm7, ymm5, ymm3
	LONG $0x4b65e3c4; WORD $0x70dd // vblendvpd    ymm3, ymm3, ymm5, ymm7
	LONG $0x374de2c4; BYTE $0xea   // vpcmpgtq    ymm5, ymm6, ymm2
	LONG $0x4b6de3c4; WORD $0x50d6 // vblendvpd    ymm2, ymm2, ymm6, ymm5
	LONG $0x375de2c4; BYTE $0xe9   // vpcmpgtq    ymm5, ymm4, ymm1
	LONG $0x4b75e3c4; WORD $0x50cc // vblendvpd    ymm1, ymm1, ymm4, ymm5
	LONG $0x10c08348               // add    rax, 16
	WORD $0x3949; BYTE $0xc1       // cmp    r9, rax
	JNE  LBB51_4
	LONG $0x377de2c4; BYTE $0xe3   // vpcmpgtq    ymm4, ymm0, ymm3
	LONG $0x4b65e3c4; WORD $0x40c0 // vblendvpd    ymm0, ymm3, ymm0, ymm4
	LONG $0x377de2c4; BYTE $0xda   // vpcmpgtq    ymm3, ymm0, ymm2
	LONG $0x4b6de3c4; WORD $0x30c0 // vblendvpd    ymm0, ymm2, ymm0, ymm3
	LONG $0x377de2c4; BYTE $0xd1   // vpcmpgtq    ymm2, ymm0, ymm1
	LONG $0x4b75e3c4; WORD $0x20c0 // vblendvpd    ymm0, ymm1, ymm0, ymm2
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128    xmm1, ymm0, 1
	LONG $0x3779e2c4; BYTE $0xd1   // vpcmpgtq    xmm2, xmm0, xmm1
	LONG $0x4b71e3c4; WORD $0x20c0 // vblendvpd    xmm0, xmm1, xmm0, xmm2
	LONG $0x0479e3c4; WORD $0x4ec8 // vpermilps    xmm1, xmm0, 78
	LONG $0x3779e2c4; BYTE $0xd1   // vpcmpgtq    xmm2, xmm0, xmm1
	LONG $0x4b71e3c4; WORD $0x20c0 // vblendvpd    xmm0, xmm1, xmm0, xmm2
	LONG $0x7ef9e1c4; BYTE $0xc0   // vmovq    rax, xmm0
	WORD $0x394d; BYTE $0xc8       // cmp    r8, r9
	JE   LBB51_7

LBB51_6:
	LONG $0xcf148b48         // mov    rdx, qword [rdi + 8*rcx]
	WORD $0x3948; BYTE $0xc2 // cmp    rdx, rax
	LONG $0xc24d0f48         // cmovge    rax, rdx
	LONG $0x01c18348         // add    rcx, 1
	WORD $0x3949; BYTE $0xca // cmp    r10, rcx
	JNE  LBB51_6

LBB51_7:
	WORD $0x8948; BYTE $0x06 // mov    qword [rsi], rax
	VZEROUPPER
	RET

TEXT 路_int64_avx2_add(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB52_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x0ff88349         // cmp    r8, 15
	JA   LBB52_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB52_3

LBB52_7:
	LONG $0xc2148d4e         // lea    r10, [rdx + 8*r8]
	LONG $0xc7048d4a         // lea    rax, [rdi + 8*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd6970f41         // seta    r14b
	LONG $0xc6048d4a         // lea    rax, [rsi + 8*r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB52_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB52_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x0fe18341         // and    r9d, 15
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x294d; BYTE $0xcb // sub    r11, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB52_10:
	LONG $0x6f7ea1c4; WORD $0xd604             // vmovdqu    ymm0, yword [rsi + 8*r10]
	LONG $0x6f7ea1c4; WORD $0xd64c; BYTE $0x20 // vmovdqu    ymm1, yword [rsi + 8*r10 + 32]
	LONG $0x6f7ea1c4; WORD $0xd654; BYTE $0x40 // vmovdqu    ymm2, yword [rsi + 8*r10 + 64]
	LONG $0x6f7ea1c4; WORD $0xd65c; BYTE $0x60 // vmovdqu    ymm3, yword [rsi + 8*r10 + 96]
	LONG $0xd47da1c4; WORD $0xd704             // vpaddq    ymm0, ymm0, yword [rdi + 8*r10]
	LONG $0xd475a1c4; WORD $0xd74c; BYTE $0x20 // vpaddq    ymm1, ymm1, yword [rdi + 8*r10 + 32]
	LONG $0xd46da1c4; WORD $0xd754; BYTE $0x40 // vpaddq    ymm2, ymm2, yword [rdi + 8*r10 + 64]
	LONG $0xd465a1c4; WORD $0xd75c; BYTE $0x60 // vpaddq    ymm3, ymm3, yword [rdi + 8*r10 + 96]
	LONG $0x7f7ea1c4; WORD $0xd204             // vmovdqu    yword [rdx + 8*r10], ymm0
	LONG $0x7f7ea1c4; WORD $0xd24c; BYTE $0x20 // vmovdqu    yword [rdx + 8*r10 + 32], ymm1
	LONG $0x7f7ea1c4; WORD $0xd254; BYTE $0x40 // vmovdqu    yword [rdx + 8*r10 + 64], ymm2
	LONG $0x7f7ea1c4; WORD $0xd25c; BYTE $0x60 // vmovdqu    yword [rdx + 8*r10 + 96], ymm3
	LONG $0x10c28349                           // add    r10, 16
	WORD $0x394d; BYTE $0xd3                   // cmp    r11, r10
	JNE  LBB52_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB52_12

LBB52_3:
	WORD $0x2944; BYTE $0xd9 // sub    ecx, r11d
	WORD $0x894d; BYTE $0xd9 // mov    r9, r11
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB52_5

LBB52_4:
	LONG $0xde048b4a // mov    rax, qword [rsi + 8*r11]
	LONG $0xdf04034a // add    rax, qword [rdi + 8*r11]
	LONG $0xda04894a // mov    qword [rdx + 8*r11], rax
	LONG $0x01c38349 // add    r11, 1
	LONG $0xffc18348 // add    rcx, -1
	JNE  LBB52_4

LBB52_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB52_12

LBB52_6:
	LONG $0xde048b4a             // mov    rax, qword [rsi + 8*r11]
	LONG $0xdf04034a             // add    rax, qword [rdi + 8*r11]
	LONG $0xda04894a             // mov    qword [rdx + 8*r11], rax
	LONG $0xde448b4a; BYTE $0x08 // mov    rax, qword [rsi + 8*r11 + 8]
	LONG $0xdf44034a; BYTE $0x08 // add    rax, qword [rdi + 8*r11 + 8]
	LONG $0xda44894a; BYTE $0x08 // mov    qword [rdx + 8*r11 + 8], rax
	LONG $0xde448b4a; BYTE $0x10 // mov    rax, qword [rsi + 8*r11 + 16]
	LONG $0xdf44034a; BYTE $0x10 // add    rax, qword [rdi + 8*r11 + 16]
	LONG $0xda44894a; BYTE $0x10 // mov    qword [rdx + 8*r11 + 16], rax
	LONG $0xde448b4a; BYTE $0x18 // mov    rax, qword [rsi + 8*r11 + 24]
	LONG $0xdf44034a; BYTE $0x18 // add    rax, qword [rdi + 8*r11 + 24]
	LONG $0xda44894a; BYTE $0x18 // mov    qword [rdx + 8*r11 + 24], rax
	LONG $0x04c38349             // add    r11, 4
	WORD $0x394d; BYTE $0xd8     // cmp    r8, r11
	JNE  LBB52_6

LBB52_12:
	VZEROUPPER
	RET

TEXT 路_int64_avx2_sub(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB53_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x0ff88349         // cmp    r8, 15
	JA   LBB53_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB53_3

LBB53_7:
	LONG $0xc2148d4e         // lea    r10, [rdx + 8*r8]
	LONG $0xc7048d4a         // lea    rax, [rdi + 8*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd6970f41         // seta    r14b
	LONG $0xc6048d4a         // lea    rax, [rsi + 8*r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB53_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB53_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x0fe18341         // and    r9d, 15
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x294d; BYTE $0xcb // sub    r11, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB53_10:
	LONG $0x6f7ea1c4; WORD $0xd704             // vmovdqu    ymm0, yword [rdi + 8*r10]
	LONG $0x6f7ea1c4; WORD $0xd74c; BYTE $0x20 // vmovdqu    ymm1, yword [rdi + 8*r10 + 32]
	LONG $0x6f7ea1c4; WORD $0xd754; BYTE $0x40 // vmovdqu    ymm2, yword [rdi + 8*r10 + 64]
	LONG $0x6f7ea1c4; WORD $0xd75c; BYTE $0x60 // vmovdqu    ymm3, yword [rdi + 8*r10 + 96]
	LONG $0xfb7da1c4; WORD $0xd604             // vpsubq    ymm0, ymm0, yword [rsi + 8*r10]
	LONG $0xfb75a1c4; WORD $0xd64c; BYTE $0x20 // vpsubq    ymm1, ymm1, yword [rsi + 8*r10 + 32]
	LONG $0xfb6da1c4; WORD $0xd654; BYTE $0x40 // vpsubq    ymm2, ymm2, yword [rsi + 8*r10 + 64]
	LONG $0xfb65a1c4; WORD $0xd65c; BYTE $0x60 // vpsubq    ymm3, ymm3, yword [rsi + 8*r10 + 96]
	LONG $0x7f7ea1c4; WORD $0xd204             // vmovdqu    yword [rdx + 8*r10], ymm0
	LONG $0x7f7ea1c4; WORD $0xd24c; BYTE $0x20 // vmovdqu    yword [rdx + 8*r10 + 32], ymm1
	LONG $0x7f7ea1c4; WORD $0xd254; BYTE $0x40 // vmovdqu    yword [rdx + 8*r10 + 64], ymm2
	LONG $0x7f7ea1c4; WORD $0xd25c; BYTE $0x60 // vmovdqu    yword [rdx + 8*r10 + 96], ymm3
	LONG $0x10c28349                           // add    r10, 16
	WORD $0x394d; BYTE $0xd3                   // cmp    r11, r10
	JNE  LBB53_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB53_12

LBB53_3:
	WORD $0x2944; BYTE $0xd9 // sub    ecx, r11d
	WORD $0x894d; BYTE $0xd9 // mov    r9, r11
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB53_5

LBB53_4:
	LONG $0xdf048b4a // mov    rax, qword [rdi + 8*r11]
	LONG $0xde042b4a // sub    rax, qword [rsi + 8*r11]
	LONG $0xda04894a // mov    qword [rdx + 8*r11], rax
	LONG $0x01c38349 // add    r11, 1
	LONG $0xffc18348 // add    rcx, -1
	JNE  LBB53_4

LBB53_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB53_12

LBB53_6:
	LONG $0xdf048b4a             // mov    rax, qword [rdi + 8*r11]
	LONG $0xde042b4a             // sub    rax, qword [rsi + 8*r11]
	LONG $0xda04894a             // mov    qword [rdx + 8*r11], rax
	LONG $0xdf448b4a; BYTE $0x08 // mov    rax, qword [rdi + 8*r11 + 8]
	LONG $0xde442b4a; BYTE $0x08 // sub    rax, qword [rsi + 8*r11 + 8]
	LONG $0xda44894a; BYTE $0x08 // mov    qword [rdx + 8*r11 + 8], rax
	LONG $0xdf448b4a; BYTE $0x10 // mov    rax, qword [rdi + 8*r11 + 16]
	LONG $0xde442b4a; BYTE $0x10 // sub    rax, qword [rsi + 8*r11 + 16]
	LONG $0xda44894a; BYTE $0x10 // mov    qword [rdx + 8*r11 + 16], rax
	LONG $0xdf448b4a; BYTE $0x18 // mov    rax, qword [rdi + 8*r11 + 24]
	LONG $0xde442b4a; BYTE $0x18 // sub    rax, qword [rsi + 8*r11 + 24]
	LONG $0xda44894a; BYTE $0x18 // mov    qword [rdx + 8*r11 + 24], rax
	LONG $0x04c38349             // add    r11, 4
	WORD $0x394d; BYTE $0xd8     // cmp    r8, r11
	JNE  LBB53_6

LBB53_12:
	VZEROUPPER
	RET

TEXT 路_int64_avx2_mul(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB54_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x0ff88349         // cmp    r8, 15
	JA   LBB54_7
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	JMP  LBB54_3

LBB54_7:
	LONG $0xc2148d4e         // lea    r10, [rdx + 8*r8]
	LONG $0xc7048d4a         // lea    rax, [rdi + 8*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd6970f41         // seta    r14b
	LONG $0xc6048d4a         // lea    rax, [rsi + 8*r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB54_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB54_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x0fe18341         // and    r9d, 15
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0x294d; BYTE $0xcb // sub    r11, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB54_10:
	LONG $0x6f7ea1c4; WORD $0xd70c             // vmovdqu    ymm1, yword [rdi + 8*r10]
	LONG $0x6f7ea1c4; WORD $0xd754; BYTE $0x20 // vmovdqu    ymm2, yword [rdi + 8*r10 + 32]
	LONG $0x6f7ea1c4; WORD $0xd75c; BYTE $0x40 // vmovdqu    ymm3, yword [rdi + 8*r10 + 64]
	LONG $0x6f7ea1c4; WORD $0xd744; BYTE $0x60 // vmovdqu    ymm0, yword [rdi + 8*r10 + 96]
	LONG $0x6f7ea1c4; WORD $0xd624             // vmovdqu    ymm4, yword [rsi + 8*r10]
	LONG $0x6f7ea1c4; WORD $0xd66c; BYTE $0x20 // vmovdqu    ymm5, yword [rsi + 8*r10 + 32]
	LONG $0x6f7ea1c4; WORD $0xd674; BYTE $0x40 // vmovdqu    ymm6, yword [rsi + 8*r10 + 64]
	LONG $0x6f7ea1c4; WORD $0xd67c; BYTE $0x60 // vmovdqu    ymm7, yword [rsi + 8*r10 + 96]
	LONG $0xd473bdc5; BYTE $0x20               // vpsrlq    ymm8, ymm4, 32
	LONG $0xc1f43dc5                           // vpmuludq    ymm8, ymm8, ymm1
	LONG $0xd173b5c5; BYTE $0x20               // vpsrlq    ymm9, ymm1, 32
	LONG $0xccf435c5                           // vpmuludq    ymm9, ymm9, ymm4
	LONG $0xd43541c4; BYTE $0xc0               // vpaddq    ymm8, ymm9, ymm8
	LONG $0x733dc1c4; WORD $0x20f0             // vpsllq    ymm8, ymm8, 32
	LONG $0xc9f4ddc5                           // vpmuludq    ymm1, ymm4, ymm1
	LONG $0xc9d4bdc5                           // vpaddq    ymm1, ymm8, ymm1
	LONG $0xd573ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm5, 32
	LONG $0xe2f4ddc5                           // vpmuludq    ymm4, ymm4, ymm2
	LONG $0xd273bdc5; BYTE $0x20               // vpsrlq    ymm8, ymm2, 32
	LONG $0xc5f43dc5                           // vpmuludq    ymm8, ymm8, ymm5
	LONG $0xe4d4bdc5                           // vpaddq    ymm4, ymm8, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xd2f4d5c5                           // vpmuludq    ymm2, ymm5, ymm2
	LONG $0xd4d4edc5                           // vpaddq    ymm2, ymm2, ymm4
	LONG $0xd673ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm6, 32
	LONG $0xe3f4ddc5                           // vpmuludq    ymm4, ymm4, ymm3
	LONG $0xd373d5c5; BYTE $0x20               // vpsrlq    ymm5, ymm3, 32
	LONG $0xedf4cdc5                           // vpmuludq    ymm5, ymm6, ymm5
	LONG $0xe4d4d5c5                           // vpaddq    ymm4, ymm5, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xdbf4cdc5                           // vpmuludq    ymm3, ymm6, ymm3
	LONG $0xdcd4e5c5                           // vpaddq    ymm3, ymm3, ymm4
	LONG $0xd773ddc5; BYTE $0x20               // vpsrlq    ymm4, ymm7, 32
	LONG $0xe0f4ddc5                           // vpmuludq    ymm4, ymm4, ymm0
	LONG $0xd073d5c5; BYTE $0x20               // vpsrlq    ymm5, ymm0, 32
	LONG $0xedf4c5c5                           // vpmuludq    ymm5, ymm7, ymm5
	LONG $0xe4d4d5c5                           // vpaddq    ymm4, ymm5, ymm4
	LONG $0xf473ddc5; BYTE $0x20               // vpsllq    ymm4, ymm4, 32
	LONG $0xc0f4c5c5                           // vpmuludq    ymm0, ymm7, ymm0
	LONG $0xc4d4fdc5                           // vpaddq    ymm0, ymm0, ymm4
	LONG $0x7f7ea1c4; WORD $0xd20c             // vmovdqu    yword [rdx + 8*r10], ymm1
	LONG $0x7f7ea1c4; WORD $0xd254; BYTE $0x20 // vmovdqu    yword [rdx + 8*r10 + 32], ymm2
	LONG $0x7f7ea1c4; WORD $0xd25c; BYTE $0x40 // vmovdqu    yword [rdx + 8*r10 + 64], ymm3
	LONG $0x7f7ea1c4; WORD $0xd244; BYTE $0x60 // vmovdqu    yword [rdx + 8*r10 + 96], ymm0
	LONG $0x10c28349                           // add    r10, 16
	WORD $0x394d; BYTE $0xd3                   // cmp    r11, r10
	JNE  LBB54_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB54_12

LBB54_3:
	WORD $0x2944; BYTE $0xd9 // sub    ecx, r11d
	WORD $0x894d; BYTE $0xd9 // mov    r9, r11
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB54_5

LBB54_4:
	LONG $0xde048b4a             // mov    rax, qword [rsi + 8*r11]
	LONG $0x04af0f4a; BYTE $0xdf // imul    rax, qword [rdi + 8*r11]
	LONG $0xda04894a             // mov    qword [rdx + 8*r11], rax
	LONG $0x01c38349             // add    r11, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB54_4

LBB54_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB54_12

LBB54_6:
	LONG $0xde048b4a               // mov    rax, qword [rsi + 8*r11]
	LONG $0x04af0f4a; BYTE $0xdf   // imul    rax, qword [rdi + 8*r11]
	LONG $0xda04894a               // mov    qword [rdx + 8*r11], rax
	LONG $0xde448b4a; BYTE $0x08   // mov    rax, qword [rsi + 8*r11 + 8]
	LONG $0x44af0f4a; WORD $0x08df // imul    rax, qword [rdi + 8*r11 + 8]
	LONG $0xda44894a; BYTE $0x08   // mov    qword [rdx + 8*r11 + 8], rax
	LONG $0xde448b4a; BYTE $0x10   // mov    rax, qword [rsi + 8*r11 + 16]
	LONG $0x44af0f4a; WORD $0x10df // imul    rax, qword [rdi + 8*r11 + 16]
	LONG $0xda44894a; BYTE $0x10   // mov    qword [rdx + 8*r11 + 16], rax
	LONG $0xde448b4a; BYTE $0x18   // mov    rax, qword [rsi + 8*r11 + 24]
	LONG $0x44af0f4a; WORD $0x18df // imul    rax, qword [rdi + 8*r11 + 24]
	LONG $0xda44894a; BYTE $0x18   // mov    qword [rdx + 8*r11 + 24], rax
	LONG $0x04c38349               // add    r11, 4
	WORD $0x394d; BYTE $0xd8       // cmp    r8, r11
	JNE  LBB54_6

LBB54_12:
	VZEROUPPER
	RET

TEXT 路_int64_avx2_div(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB55_12
	WORD $0x8949; BYTE $0xd0 // mov    r8, rdx
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x03f98349         // cmp    r9, 3
	JA   LBB55_7
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d
	JMP  LBB55_3

LBB55_7:
	LONG $0xc8148d4b         // lea    rdx, [r8 + 8*r9]
	LONG $0xcf048d4a         // lea    rax, [rdi + 8*r9]
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	LONG $0xd3970f41         // seta    r11b
	LONG $0xce048d4a         // lea    rax, [rsi + 8*r9]
	WORD $0x3948; BYTE $0xfa // cmp    rdx, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x394c; BYTE $0xc0 // cmp    rax, r8
	WORD $0x970f; BYTE $0xd0 // seta    al
	WORD $0x3948; BYTE $0xf2 // cmp    rdx, rsi
	WORD $0x970f; BYTE $0xd2 // seta    dl
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d
	WORD $0x8441; BYTE $0xdb // test    r11b, bl
	JNE  LBB55_3
	WORD $0xd020             // and    al, dl
	JNE  LBB55_3
	WORD $0x8941; BYTE $0xcb // mov    r11d, ecx
	LONG $0x03e38341         // and    r11d, 3
	WORD $0x894d; BYTE $0xca // mov    r10, r9
	WORD $0x294d; BYTE $0xda // sub    r10, r11
	WORD $0xdb31             // xor    ebx, ebx

LBB55_10:
	LONG $0x046ffac5; BYTE $0xdf               // vmovdqu    xmm0, oword [rdi + 8*rbx]
	LONG $0x4c6ffac5; WORD $0x10df             // vmovdqu    xmm1, oword [rdi + 8*rbx + 16]
	LONG $0x16f9e3c4; WORD $0x01c0             // vpextrq    rax, xmm0, 1
	LONG $0x146ffac5; BYTE $0xde               // vmovdqu    xmm2, oword [rsi + 8*rbx]
	LONG $0x5c6ffac5; WORD $0x10de             // vmovdqu    xmm3, oword [rsi + 8*rbx + 16]
	LONG $0x16f9c3c4; WORD $0x01d6             // vpextrq    r14, xmm2, 1
	WORD $0x9948                               // cqo
	WORD $0xf749; BYTE $0xfe                   // idiv    r14
	LONG $0x6ef9e1c4; BYTE $0xe0               // vmovq    xmm4, rax
	LONG $0x7ef9e1c4; BYTE $0xc0               // vmovq    rax, xmm0
	LONG $0x7ef9c1c4; BYTE $0xd6               // vmovq    r14, xmm2
	WORD $0x9948                               // cqo
	WORD $0xf749; BYTE $0xfe                   // idiv    r14
	LONG $0x6ef9e1c4; BYTE $0xc0               // vmovq    xmm0, rax
	LONG $0x16f9e3c4; WORD $0x01c8             // vpextrq    rax, xmm1, 1
	LONG $0xc46cf9c5                           // vpunpcklqdq    xmm0, xmm0, xmm4
	LONG $0x16f9c3c4; WORD $0x01de             // vpextrq    r14, xmm3, 1
	WORD $0x9948                               // cqo
	WORD $0xf749; BYTE $0xfe                   // idiv    r14
	LONG $0x6ef9e1c4; BYTE $0xd0               // vmovq    xmm2, rax
	LONG $0x7ef9e1c4; BYTE $0xc8               // vmovq    rax, xmm1
	LONG $0x7ef9c1c4; BYTE $0xde               // vmovq    r14, xmm3
	WORD $0x9948                               // cqo
	WORD $0xf749; BYTE $0xfe                   // idiv    r14
	LONG $0x6ef9e1c4; BYTE $0xc8               // vmovq    xmm1, rax
	LONG $0xca6cf1c5                           // vpunpcklqdq    xmm1, xmm1, xmm2
	LONG $0x7f7ac1c4; WORD $0xd84c; BYTE $0x10 // vmovdqu    oword [r8 + 8*rbx + 16], xmm1
	LONG $0x7f7ac1c4; WORD $0xd804             // vmovdqu    oword [r8 + 8*rbx], xmm0
	LONG $0x04c38348                           // add    rbx, 4
	WORD $0x3949; BYTE $0xda                   // cmp    r10, rbx
	JNE  LBB55_10
	WORD $0x854d; BYTE $0xdb                   // test    r11, r11
	JE   LBB55_12

LBB55_3:
	WORD $0x2944; BYTE $0xd1 // sub    ecx, r10d
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	WORD $0xc1f6; BYTE $0x01 // test    cl, 1
	JE   LBB55_5
	LONG $0xd7048b4a         // mov    rax, qword [rdi + 8*r10]
	WORD $0x9948             // cqo
	LONG $0xd63cf74a         // idiv    qword [rsi + 8*r10]
	LONG $0xd004894b         // mov    qword [r8 + 8*r10], rax
	LONG $0x015a8d49         // lea    rbx, [r10 + 1]

LBB55_5:
	LONG $0x01c28349         // add    r10, 1
	WORD $0x394d; BYTE $0xd1 // cmp    r9, r10
	JE   LBB55_12

LBB55_6:
	LONG $0xdf048b48             // mov    rax, qword [rdi + 8*rbx]
	WORD $0x9948                 // cqo
	LONG $0xde3cf748             // idiv    qword [rsi + 8*rbx]
	LONG $0xd8048949             // mov    qword [r8 + 8*rbx], rax
	LONG $0xdf448b48; BYTE $0x08 // mov    rax, qword [rdi + 8*rbx + 8]
	WORD $0x9948                 // cqo
	LONG $0xde7cf748; BYTE $0x08 // idiv    qword [rsi + 8*rbx + 8]
	LONG $0xd8448949; BYTE $0x08 // mov    qword [r8 + 8*rbx + 8], rax
	LONG $0x02c38348             // add    rbx, 2
	WORD $0x3949; BYTE $0xd9     // cmp    r9, rbx
	JNE  LBB55_6

LBB55_12:
	RET

TEXT 路_float32_avx2_sum(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB56_1
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0x1ff88349         // cmp    r8, 31
	JA   LBB56_4
	LONG $0xc057f8c5         // vxorps    xmm0, xmm0, xmm0
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB56_7

LBB56_1:
	LONG $0xc057f8c5 // vxorps    xmm0, xmm0, xmm0
	JMP  LBB56_8

LBB56_4:
	WORD $0xe283; BYTE $0x1f // and    edx, 31
	WORD $0x894c; BYTE $0xc1 // mov    rcx, r8
	WORD $0x2948; BYTE $0xd1 // sub    rcx, rdx
	LONG $0xc057f8c5         // vxorps    xmm0, xmm0, xmm0
	WORD $0xc031             // xor    eax, eax
	LONG $0xc957f0c5         // vxorps    xmm1, xmm1, xmm1
	LONG $0xd257e8c5         // vxorps    xmm2, xmm2, xmm2
	LONG $0xdb57e0c5         // vxorps    xmm3, xmm3, xmm3

LBB56_5:
	LONG $0x0458fcc5; BYTE $0x87   // vaddps    ymm0, ymm0, yword [rdi + 4*rax]
	LONG $0x4c58f4c5; WORD $0x2087 // vaddps    ymm1, ymm1, yword [rdi + 4*rax + 32]
	LONG $0x5458ecc5; WORD $0x4087 // vaddps    ymm2, ymm2, yword [rdi + 4*rax + 64]
	LONG $0x5c58e4c5; WORD $0x6087 // vaddps    ymm3, ymm3, yword [rdi + 4*rax + 96]
	LONG $0x20c08348               // add    rax, 32
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JNE  LBB56_5
	LONG $0xc058f4c5               // vaddps    ymm0, ymm1, ymm0
	LONG $0xc058ecc5               // vaddps    ymm0, ymm2, ymm0
	LONG $0xc058e4c5               // vaddps    ymm0, ymm3, ymm0
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128    xmm1, ymm0, 1
	LONG $0xc158f8c5               // vaddps    xmm0, xmm0, xmm1
	LONG $0x0579e3c4; WORD $0x01c8 // vpermilpd    xmm1, xmm0, 1
	LONG $0xc158f8c5               // vaddps    xmm0, xmm0, xmm1
	LONG $0xc816fac5               // vmovshdup    xmm1, xmm0
	LONG $0xc158fac5               // vaddss    xmm0, xmm0, xmm1
	WORD $0x8548; BYTE $0xd2       // test    rdx, rdx
	JE   LBB56_8

LBB56_7:
	LONG $0x0458fac5; BYTE $0x8f // vaddss    xmm0, xmm0, dword [rdi + 4*rcx]
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc8     // cmp    r8, rcx
	JNE  LBB56_7

LBB56_8:
	LONG $0x0611fac5 // vmovss    dword [rsi], xmm0
	VZEROUPPER
	RET

TEXT 路_float32_avx2_min(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	LONG $0x0710fac5             // vmovss    xmm0, dword [rdi]
	WORD $0xd285                 // test    edx, edx
	JLE  LBB57_7
	WORD $0x8941; BYTE $0xd1     // mov    r9d, edx
	LONG $0x01f98349             // cmp    r9, 1
	JE   LBB57_7
	LONG $0xff418d4d             // lea    r8, [r9 - 1]
	LONG $0x000001b9; BYTE $0x00 // mov    ecx, 1
	LONG $0x1ff88349             // cmp    r8, 31
	JBE  LBB57_6
	WORD $0x894c; BYTE $0xc2     // mov    rdx, r8
	LONG $0xe0e28348             // and    rdx, -32
	LONG $0x014a8d48             // lea    rcx, [rdx + 1]
	LONG $0x187de2c4; BYTE $0xc0 // vbroadcastss    ymm0, xmm0
	WORD $0xc031                 // xor    eax, eax
	LONG $0xc828fcc5             // vmovaps    ymm1, ymm0
	LONG $0xd028fcc5             // vmovaps    ymm2, ymm0
	LONG $0xd828fcc5             // vmovaps    ymm3, ymm0

LBB57_4:
	LONG $0x445dfcc5; WORD $0x0487 // vminps    ymm0, ymm0, yword [rdi + 4*rax + 4]
	LONG $0x4c5df4c5; WORD $0x2487 // vminps    ymm1, ymm1, yword [rdi + 4*rax + 36]
	LONG $0x545decc5; WORD $0x4487 // vminps    ymm2, ymm2, yword [rdi + 4*rax + 68]
	LONG $0x5c5de4c5; WORD $0x6487 // vminps    ymm3, ymm3, yword [rdi + 4*rax + 100]
	LONG $0x20c08348               // add    rax, 32
	WORD $0x3948; BYTE $0xc2       // cmp    rdx, rax
	JNE  LBB57_4
	LONG $0xc15dfcc5               // vminps    ymm0, ymm0, ymm1
	LONG $0xc25dfcc5               // vminps    ymm0, ymm0, ymm2
	LONG $0xc35dfcc5               // vminps    ymm0, ymm0, ymm3
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128    xmm1, ymm0, 1
	LONG $0xc15df8c5               // vminps    xmm0, xmm0, xmm1
	LONG $0x0579e3c4; WORD $0x01c8 // vpermilpd    xmm1, xmm0, 1
	LONG $0xc15df8c5               // vminps    xmm0, xmm0, xmm1
	LONG $0xc816fac5               // vmovshdup    xmm1, xmm0
	LONG $0xc15dfac5               // vminss    xmm0, xmm0, xmm1
	WORD $0x3949; BYTE $0xd0       // cmp    r8, rdx
	JE   LBB57_7

LBB57_6:
	LONG $0x045dfac5; BYTE $0x8f // vminss    xmm0, xmm0, dword [rdi + 4*rcx]
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB57_6

LBB57_7:
	LONG $0x0611fac5 // vmovss    dword [rsi], xmm0
	VZEROUPPER
	RET

TEXT 路_float32_avx2_max(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	LONG $0x0710fac5             // vmovss    xmm0, dword [rdi]
	WORD $0xd285                 // test    edx, edx
	JLE  LBB58_7
	WORD $0x8941; BYTE $0xd1     // mov    r9d, edx
	LONG $0x01f98349             // cmp    r9, 1
	JE   LBB58_7
	LONG $0xff418d4d             // lea    r8, [r9 - 1]
	LONG $0x000001b9; BYTE $0x00 // mov    ecx, 1
	LONG $0x1ff88349             // cmp    r8, 31
	JBE  LBB58_6
	WORD $0x894c; BYTE $0xc2     // mov    rdx, r8
	LONG $0xe0e28348             // and    rdx, -32
	LONG $0x014a8d48             // lea    rcx, [rdx + 1]
	LONG $0x187de2c4; BYTE $0xc0 // vbroadcastss    ymm0, xmm0
	WORD $0xc031                 // xor    eax, eax
	LONG $0xc828fcc5             // vmovaps    ymm1, ymm0
	LONG $0xd028fcc5             // vmovaps    ymm2, ymm0
	LONG $0xd828fcc5             // vmovaps    ymm3, ymm0

LBB58_4:
	LONG $0x445ffcc5; WORD $0x0487 // vmaxps    ymm0, ymm0, yword [rdi + 4*rax + 4]
	LONG $0x4c5ff4c5; WORD $0x2487 // vmaxps    ymm1, ymm1, yword [rdi + 4*rax + 36]
	LONG $0x545fecc5; WORD $0x4487 // vmaxps    ymm2, ymm2, yword [rdi + 4*rax + 68]
	LONG $0x5c5fe4c5; WORD $0x6487 // vmaxps    ymm3, ymm3, yword [rdi + 4*rax + 100]
	LONG $0x20c08348               // add    rax, 32
	WORD $0x3948; BYTE $0xc2       // cmp    rdx, rax
	JNE  LBB58_4
	LONG $0xc15ffcc5               // vmaxps    ymm0, ymm0, ymm1
	LONG $0xc25ffcc5               // vmaxps    ymm0, ymm0, ymm2
	LONG $0xc35ffcc5               // vmaxps    ymm0, ymm0, ymm3
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128    xmm1, ymm0, 1
	LONG $0xc15ff8c5               // vmaxps    xmm0, xmm0, xmm1
	LONG $0x0579e3c4; WORD $0x01c8 // vpermilpd    xmm1, xmm0, 1
	LONG $0xc15ff8c5               // vmaxps    xmm0, xmm0, xmm1
	LONG $0xc816fac5               // vmovshdup    xmm1, xmm0
	LONG $0xc15ffac5               // vmaxss    xmm0, xmm0, xmm1
	WORD $0x3949; BYTE $0xd0       // cmp    r8, rdx
	JE   LBB58_7

LBB58_6:
	LONG $0x045ffac5; BYTE $0x8f // vmaxss    xmm0, xmm0, dword [rdi + 4*rcx]
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB58_6

LBB58_7:
	LONG $0x0611fac5 // vmovss    dword [rsi], xmm0
	VZEROUPPER
	RET

TEXT 路_float32_avx2_add(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB59_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x1ff88349         // cmp    r8, 31
	JA   LBB59_7
	WORD $0xc031             // xor    eax, eax
	JMP  LBB59_3

LBB59_7:
	LONG $0x82148d4e         // lea    r10, [rdx + 4*r8]
	LONG $0x87048d4a         // lea    rax, [rdi + 4*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd3970f41         // seta    r11b
	LONG $0x86048d4a         // lea    rax, [rsi + 4*r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0xc031             // xor    eax, eax
	WORD $0x8441; BYTE $0xdb // test    r11b, bl
	JNE  LBB59_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB59_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x1fe18341         // and    r9d, 31
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	WORD $0x294c; BYTE $0xc8 // sub    rax, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB59_10:
	LONG $0x107ca1c4; WORD $0x9604             // vmovups    ymm0, yword [rsi + 4*r10]
	LONG $0x107ca1c4; WORD $0x964c; BYTE $0x20 // vmovups    ymm1, yword [rsi + 4*r10 + 32]
	LONG $0x107ca1c4; WORD $0x9654; BYTE $0x40 // vmovups    ymm2, yword [rsi + 4*r10 + 64]
	LONG $0x107ca1c4; WORD $0x965c; BYTE $0x60 // vmovups    ymm3, yword [rsi + 4*r10 + 96]
	LONG $0x587ca1c4; WORD $0x9704             // vaddps    ymm0, ymm0, yword [rdi + 4*r10]
	LONG $0x5874a1c4; WORD $0x974c; BYTE $0x20 // vaddps    ymm1, ymm1, yword [rdi + 4*r10 + 32]
	LONG $0x586ca1c4; WORD $0x9754; BYTE $0x40 // vaddps    ymm2, ymm2, yword [rdi + 4*r10 + 64]
	LONG $0x5864a1c4; WORD $0x975c; BYTE $0x60 // vaddps    ymm3, ymm3, yword [rdi + 4*r10 + 96]
	LONG $0x117ca1c4; WORD $0x9204             // vmovups    yword [rdx + 4*r10], ymm0
	LONG $0x117ca1c4; WORD $0x924c; BYTE $0x20 // vmovups    yword [rdx + 4*r10 + 32], ymm1
	LONG $0x117ca1c4; WORD $0x9254; BYTE $0x40 // vmovups    yword [rdx + 4*r10 + 64], ymm2
	LONG $0x117ca1c4; WORD $0x925c; BYTE $0x60 // vmovups    yword [rdx + 4*r10 + 96], ymm3
	LONG $0x20c28349                           // add    r10, 32
	WORD $0x394c; BYTE $0xd0                   // cmp    rax, r10
	JNE  LBB59_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB59_12

LBB59_3:
	WORD $0xc129             // sub    ecx, eax
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB59_5

LBB59_4:
	LONG $0x0410fac5; BYTE $0x86 // vmovss    xmm0, dword [rsi + 4*rax]
	LONG $0x0458fac5; BYTE $0x87 // vaddss    xmm0, xmm0, dword [rdi + 4*rax]
	LONG $0x0411fac5; BYTE $0x82 // vmovss    dword [rdx + 4*rax], xmm0
	LONG $0x01c08348             // add    rax, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB59_4

LBB59_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB59_12

LBB59_6:
	LONG $0x0410fac5; BYTE $0x86   // vmovss    xmm0, dword [rsi + 4*rax]
	LONG $0x0458fac5; BYTE $0x87   // vaddss    xmm0, xmm0, dword [rdi + 4*rax]
	LONG $0x0411fac5; BYTE $0x82   // vmovss    dword [rdx + 4*rax], xmm0
	LONG $0x4410fac5; WORD $0x0486 // vmovss    xmm0, dword [rsi + 4*rax + 4]
	LONG $0x4458fac5; WORD $0x0487 // vaddss    xmm0, xmm0, dword [rdi + 4*rax + 4]
	LONG $0x4411fac5; WORD $0x0482 // vmovss    dword [rdx + 4*rax + 4], xmm0
	LONG $0x4410fac5; WORD $0x0886 // vmovss    xmm0, dword [rsi + 4*rax + 8]
	LONG $0x4458fac5; WORD $0x0887 // vaddss    xmm0, xmm0, dword [rdi + 4*rax + 8]
	LONG $0x4411fac5; WORD $0x0882 // vmovss    dword [rdx + 4*rax + 8], xmm0
	LONG $0x4410fac5; WORD $0x0c86 // vmovss    xmm0, dword [rsi + 4*rax + 12]
	LONG $0x4458fac5; WORD $0x0c87 // vaddss    xmm0, xmm0, dword [rdi + 4*rax + 12]
	LONG $0x4411fac5; WORD $0x0c82 // vmovss    dword [rdx + 4*rax + 12], xmm0
	LONG $0x04c08348               // add    rax, 4
	WORD $0x3949; BYTE $0xc0       // cmp    r8, rax
	JNE  LBB59_6

LBB59_12:
	VZEROUPPER
	RET

TEXT 路_float32_avx2_sub(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB60_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x1ff88349         // cmp    r8, 31
	JA   LBB60_7
	WORD $0xc031             // xor    eax, eax
	JMP  LBB60_3

LBB60_7:
	LONG $0x82148d4e         // lea    r10, [rdx + 4*r8]
	LONG $0x87048d4a         // lea    rax, [rdi + 4*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd3970f41         // seta    r11b
	LONG $0x86048d4a         // lea    rax, [rsi + 4*r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0xc031             // xor    eax, eax
	WORD $0x8441; BYTE $0xdb // test    r11b, bl
	JNE  LBB60_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB60_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x1fe18341         // and    r9d, 31
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	WORD $0x294c; BYTE $0xc8 // sub    rax, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB60_10:
	LONG $0x107ca1c4; WORD $0x9704             // vmovups    ymm0, yword [rdi + 4*r10]
	LONG $0x107ca1c4; WORD $0x974c; BYTE $0x20 // vmovups    ymm1, yword [rdi + 4*r10 + 32]
	LONG $0x107ca1c4; WORD $0x9754; BYTE $0x40 // vmovups    ymm2, yword [rdi + 4*r10 + 64]
	LONG $0x107ca1c4; WORD $0x975c; BYTE $0x60 // vmovups    ymm3, yword [rdi + 4*r10 + 96]
	LONG $0x5c7ca1c4; WORD $0x9604             // vsubps    ymm0, ymm0, yword [rsi + 4*r10]
	LONG $0x5c74a1c4; WORD $0x964c; BYTE $0x20 // vsubps    ymm1, ymm1, yword [rsi + 4*r10 + 32]
	LONG $0x5c6ca1c4; WORD $0x9654; BYTE $0x40 // vsubps    ymm2, ymm2, yword [rsi + 4*r10 + 64]
	LONG $0x5c64a1c4; WORD $0x965c; BYTE $0x60 // vsubps    ymm3, ymm3, yword [rsi + 4*r10 + 96]
	LONG $0x117ca1c4; WORD $0x9204             // vmovups    yword [rdx + 4*r10], ymm0
	LONG $0x117ca1c4; WORD $0x924c; BYTE $0x20 // vmovups    yword [rdx + 4*r10 + 32], ymm1
	LONG $0x117ca1c4; WORD $0x9254; BYTE $0x40 // vmovups    yword [rdx + 4*r10 + 64], ymm2
	LONG $0x117ca1c4; WORD $0x925c; BYTE $0x60 // vmovups    yword [rdx + 4*r10 + 96], ymm3
	LONG $0x20c28349                           // add    r10, 32
	WORD $0x394c; BYTE $0xd0                   // cmp    rax, r10
	JNE  LBB60_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB60_12

LBB60_3:
	WORD $0xc129             // sub    ecx, eax
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB60_5

LBB60_4:
	LONG $0x0410fac5; BYTE $0x87 // vmovss    xmm0, dword [rdi + 4*rax]
	LONG $0x045cfac5; BYTE $0x86 // vsubss    xmm0, xmm0, dword [rsi + 4*rax]
	LONG $0x0411fac5; BYTE $0x82 // vmovss    dword [rdx + 4*rax], xmm0
	LONG $0x01c08348             // add    rax, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB60_4

LBB60_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB60_12

LBB60_6:
	LONG $0x0410fac5; BYTE $0x87   // vmovss    xmm0, dword [rdi + 4*rax]
	LONG $0x045cfac5; BYTE $0x86   // vsubss    xmm0, xmm0, dword [rsi + 4*rax]
	LONG $0x0411fac5; BYTE $0x82   // vmovss    dword [rdx + 4*rax], xmm0
	LONG $0x4410fac5; WORD $0x0487 // vmovss    xmm0, dword [rdi + 4*rax + 4]
	LONG $0x445cfac5; WORD $0x0486 // vsubss    xmm0, xmm0, dword [rsi + 4*rax + 4]
	LONG $0x4411fac5; WORD $0x0482 // vmovss    dword [rdx + 4*rax + 4], xmm0
	LONG $0x4410fac5; WORD $0x0887 // vmovss    xmm0, dword [rdi + 4*rax + 8]
	LONG $0x445cfac5; WORD $0x0886 // vsubss    xmm0, xmm0, dword [rsi + 4*rax + 8]
	LONG $0x4411fac5; WORD $0x0882 // vmovss    dword [rdx + 4*rax + 8], xmm0
	LONG $0x4410fac5; WORD $0x0c87 // vmovss    xmm0, dword [rdi + 4*rax + 12]
	LONG $0x445cfac5; WORD $0x0c86 // vsubss    xmm0, xmm0, dword [rsi + 4*rax + 12]
	LONG $0x4411fac5; WORD $0x0c82 // vmovss    dword [rdx + 4*rax + 12], xmm0
	LONG $0x04c08348               // add    rax, 4
	WORD $0x3949; BYTE $0xc0       // cmp    r8, rax
	JNE  LBB60_6

LBB60_12:
	VZEROUPPER
	RET

TEXT 路_float32_avx2_mul(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB61_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x1ff88349         // cmp    r8, 31
	JA   LBB61_7
	WORD $0xc031             // xor    eax, eax
	JMP  LBB61_3

LBB61_7:
	LONG $0x82148d4e         // lea    r10, [rdx + 4*r8]
	LONG $0x87048d4a         // lea    rax, [rdi + 4*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd3970f41         // seta    r11b
	LONG $0x86048d4a         // lea    rax, [rsi + 4*r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0xc031             // xor    eax, eax
	WORD $0x8441; BYTE $0xdb // test    r11b, bl
	JNE  LBB61_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB61_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x1fe18341         // and    r9d, 31
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	WORD $0x294c; BYTE $0xc8 // sub    rax, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB61_10:
	LONG $0x107ca1c4; WORD $0x9604             // vmovups    ymm0, yword [rsi + 4*r10]
	LONG $0x107ca1c4; WORD $0x964c; BYTE $0x20 // vmovups    ymm1, yword [rsi + 4*r10 + 32]
	LONG $0x107ca1c4; WORD $0x9654; BYTE $0x40 // vmovups    ymm2, yword [rsi + 4*r10 + 64]
	LONG $0x107ca1c4; WORD $0x965c; BYTE $0x60 // vmovups    ymm3, yword [rsi + 4*r10 + 96]
	LONG $0x597ca1c4; WORD $0x9704             // vmulps    ymm0, ymm0, yword [rdi + 4*r10]
	LONG $0x5974a1c4; WORD $0x974c; BYTE $0x20 // vmulps    ymm1, ymm1, yword [rdi + 4*r10 + 32]
	LONG $0x596ca1c4; WORD $0x9754; BYTE $0x40 // vmulps    ymm2, ymm2, yword [rdi + 4*r10 + 64]
	LONG $0x5964a1c4; WORD $0x975c; BYTE $0x60 // vmulps    ymm3, ymm3, yword [rdi + 4*r10 + 96]
	LONG $0x117ca1c4; WORD $0x9204             // vmovups    yword [rdx + 4*r10], ymm0
	LONG $0x117ca1c4; WORD $0x924c; BYTE $0x20 // vmovups    yword [rdx + 4*r10 + 32], ymm1
	LONG $0x117ca1c4; WORD $0x9254; BYTE $0x40 // vmovups    yword [rdx + 4*r10 + 64], ymm2
	LONG $0x117ca1c4; WORD $0x925c; BYTE $0x60 // vmovups    yword [rdx + 4*r10 + 96], ymm3
	LONG $0x20c28349                           // add    r10, 32
	WORD $0x394c; BYTE $0xd0                   // cmp    rax, r10
	JNE  LBB61_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB61_12

LBB61_3:
	WORD $0xc129             // sub    ecx, eax
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB61_5

LBB61_4:
	LONG $0x0410fac5; BYTE $0x86 // vmovss    xmm0, dword [rsi + 4*rax]
	LONG $0x0459fac5; BYTE $0x87 // vmulss    xmm0, xmm0, dword [rdi + 4*rax]
	LONG $0x0411fac5; BYTE $0x82 // vmovss    dword [rdx + 4*rax], xmm0
	LONG $0x01c08348             // add    rax, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB61_4

LBB61_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB61_12

LBB61_6:
	LONG $0x0410fac5; BYTE $0x86   // vmovss    xmm0, dword [rsi + 4*rax]
	LONG $0x0459fac5; BYTE $0x87   // vmulss    xmm0, xmm0, dword [rdi + 4*rax]
	LONG $0x0411fac5; BYTE $0x82   // vmovss    dword [rdx + 4*rax], xmm0
	LONG $0x4410fac5; WORD $0x0486 // vmovss    xmm0, dword [rsi + 4*rax + 4]
	LONG $0x4459fac5; WORD $0x0487 // vmulss    xmm0, xmm0, dword [rdi + 4*rax + 4]
	LONG $0x4411fac5; WORD $0x0482 // vmovss    dword [rdx + 4*rax + 4], xmm0
	LONG $0x4410fac5; WORD $0x0886 // vmovss    xmm0, dword [rsi + 4*rax + 8]
	LONG $0x4459fac5; WORD $0x0887 // vmulss    xmm0, xmm0, dword [rdi + 4*rax + 8]
	LONG $0x4411fac5; WORD $0x0882 // vmovss    dword [rdx + 4*rax + 8], xmm0
	LONG $0x4410fac5; WORD $0x0c86 // vmovss    xmm0, dword [rsi + 4*rax + 12]
	LONG $0x4459fac5; WORD $0x0c87 // vmulss    xmm0, xmm0, dword [rdi + 4*rax + 12]
	LONG $0x4411fac5; WORD $0x0c82 // vmovss    dword [rdx + 4*rax + 12], xmm0
	LONG $0x04c08348               // add    rax, 4
	WORD $0x3949; BYTE $0xc0       // cmp    r8, rax
	JNE  LBB61_6

LBB61_12:
	VZEROUPPER
	RET

TEXT 路_float32_avx2_div(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB62_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x1ff88349         // cmp    r8, 31
	JA   LBB62_7
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d
	JMP  LBB62_3

LBB62_7:
	LONG $0x820c8d4e         // lea    r9, [rdx + 4*r8]
	LONG $0x87048d4a         // lea    rax, [rdi + 4*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd6970f41         // seta    r14b
	LONG $0x86048d4a         // lea    rax, [rsi + 4*r8]
	WORD $0x3949; BYTE $0xf9 // cmp    r9, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x3949; BYTE $0xf1 // cmp    r9, rsi
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB62_3
	WORD $0x2045; BYTE $0xcb // and    r11b, r9b
	JNE  LBB62_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x1fe18341         // and    r9d, 31
	WORD $0x894d; BYTE $0xc2 // mov    r10, r8
	WORD $0x294d; BYTE $0xca // sub    r10, r9
	WORD $0xc031             // xor    eax, eax

LBB62_10:
	LONG $0x0410fcc5; BYTE $0x87   // vmovups    ymm0, yword [rdi + 4*rax]
	LONG $0x4c10fcc5; WORD $0x2087 // vmovups    ymm1, yword [rdi + 4*rax + 32]
	LONG $0x5410fcc5; WORD $0x4087 // vmovups    ymm2, yword [rdi + 4*rax + 64]
	LONG $0x5c10fcc5; WORD $0x6087 // vmovups    ymm3, yword [rdi + 4*rax + 96]
	LONG $0x2410fcc5; BYTE $0x86   // vmovups    ymm4, yword [rsi + 4*rax]
	LONG $0x6c10fcc5; WORD $0x2086 // vmovups    ymm5, yword [rsi + 4*rax + 32]
	LONG $0x7410fcc5; WORD $0x4086 // vmovups    ymm6, yword [rsi + 4*rax + 64]
	LONG $0xfc53fcc5               // vrcpps    ymm7, ymm4
	LONG $0x44107cc5; WORD $0x6086 // vmovups    ymm8, yword [rsi + 4*rax + 96]
	LONG $0xcf597cc5               // vmulps    ymm9, ymm0, ymm7
	LONG $0xe459b4c5               // vmulps    ymm4, ymm9, ymm4
	LONG $0xc45cfcc5               // vsubps    ymm0, ymm0, ymm4
	LONG $0xc059c4c5               // vmulps    ymm0, ymm7, ymm0
	LONG $0xe553fcc5               // vrcpps    ymm4, ymm5
	LONG $0xc058b4c5               // vaddps    ymm0, ymm9, ymm0
	LONG $0xfc59f4c5               // vmulps    ymm7, ymm1, ymm4
	LONG $0xef59d4c5               // vmulps    ymm5, ymm5, ymm7
	LONG $0xcd5cf4c5               // vsubps    ymm1, ymm1, ymm5
	LONG $0xc959dcc5               // vmulps    ymm1, ymm4, ymm1
	LONG $0xe653fcc5               // vrcpps    ymm4, ymm6
	LONG $0xc958c4c5               // vaddps    ymm1, ymm7, ymm1
	LONG $0xec59ecc5               // vmulps    ymm5, ymm2, ymm4
	LONG $0xf559ccc5               // vmulps    ymm6, ymm6, ymm5
	LONG $0xd65cecc5               // vsubps    ymm2, ymm2, ymm6
	LONG $0xd259dcc5               // vmulps    ymm2, ymm4, ymm2
	LONG $0x537cc1c4; BYTE $0xe0   // vrcpps    ymm4, ymm8
	LONG $0xd258d4c5               // vaddps    ymm2, ymm5, ymm2
	LONG $0xec59e4c5               // vmulps    ymm5, ymm3, ymm4
	LONG $0xf559bcc5               // vmulps    ymm6, ymm8, ymm5
	LONG $0xde5ce4c5               // vsubps    ymm3, ymm3, ymm6
	LONG $0xdb59dcc5               // vmulps    ymm3, ymm4, ymm3
	LONG $0xdb58d4c5               // vaddps    ymm3, ymm5, ymm3
	LONG $0x0411fcc5; BYTE $0x82   // vmovups    yword [rdx + 4*rax], ymm0
	LONG $0x4c11fcc5; WORD $0x2082 // vmovups    yword [rdx + 4*rax + 32], ymm1
	LONG $0x5411fcc5; WORD $0x4082 // vmovups    yword [rdx + 4*rax + 64], ymm2
	LONG $0x5c11fcc5; WORD $0x6082 // vmovups    yword [rdx + 4*rax + 96], ymm3
	LONG $0x20c08348               // add    rax, 32
	WORD $0x3949; BYTE $0xc2       // cmp    r10, rax
	JNE  LBB62_10
	WORD $0x854d; BYTE $0xc9       // test    r9, r9
	JE   LBB62_12

LBB62_3:
	WORD $0x2944; BYTE $0xd1       // sub    ecx, r10d
	WORD $0x894c; BYTE $0xd0       // mov    rax, r10
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB62_5
	LONG $0x107aa1c4; WORD $0x9704 // vmovss    xmm0, dword [rdi + 4*r10]
	LONG $0x5e7aa1c4; WORD $0x9604 // vdivss    xmm0, xmm0, dword [rsi + 4*r10]
	LONG $0x117aa1c4; WORD $0x9204 // vmovss    dword [rdx + 4*r10], xmm0
	LONG $0x01428d49               // lea    rax, [r10 + 1]

LBB62_5:
	LONG $0x01c28349         // add    r10, 1
	WORD $0x394d; BYTE $0xd0 // cmp    r8, r10
	JE   LBB62_12

LBB62_6:
	LONG $0x0410fac5; BYTE $0x87   // vmovss    xmm0, dword [rdi + 4*rax]
	LONG $0x045efac5; BYTE $0x86   // vdivss    xmm0, xmm0, dword [rsi + 4*rax]
	LONG $0x0411fac5; BYTE $0x82   // vmovss    dword [rdx + 4*rax], xmm0
	LONG $0x4410fac5; WORD $0x0487 // vmovss    xmm0, dword [rdi + 4*rax + 4]
	LONG $0x445efac5; WORD $0x0486 // vdivss    xmm0, xmm0, dword [rsi + 4*rax + 4]
	LONG $0x4411fac5; WORD $0x0482 // vmovss    dword [rdx + 4*rax + 4], xmm0
	LONG $0x02c08348               // add    rax, 2
	WORD $0x3949; BYTE $0xc0       // cmp    r8, rax
	JNE  LBB62_6

LBB62_12:
	VZEROUPPER
	RET

TEXT 路_float64_avx2_sum(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	WORD $0xd285             // test    edx, edx
	JLE  LBB63_1
	WORD $0x8941; BYTE $0xd0 // mov    r8d, edx
	LONG $0x0ff88349         // cmp    r8, 15
	JA   LBB63_4
	LONG $0xc057f9c5         // vxorpd    xmm0, xmm0, xmm0
	WORD $0xc931             // xor    ecx, ecx
	JMP  LBB63_7

LBB63_1:
	LONG $0xc057f9c5 // vxorpd    xmm0, xmm0, xmm0
	JMP  LBB63_8

LBB63_4:
	WORD $0xe283; BYTE $0x0f // and    edx, 15
	WORD $0x894c; BYTE $0xc1 // mov    rcx, r8
	WORD $0x2948; BYTE $0xd1 // sub    rcx, rdx
	LONG $0xc057f9c5         // vxorpd    xmm0, xmm0, xmm0
	WORD $0xc031             // xor    eax, eax
	LONG $0xc957f1c5         // vxorpd    xmm1, xmm1, xmm1
	LONG $0xd257e9c5         // vxorpd    xmm2, xmm2, xmm2
	LONG $0xdb57e1c5         // vxorpd    xmm3, xmm3, xmm3

LBB63_5:
	LONG $0x0458fdc5; BYTE $0xc7   // vaddpd    ymm0, ymm0, yword [rdi + 8*rax]
	LONG $0x4c58f5c5; WORD $0x20c7 // vaddpd    ymm1, ymm1, yword [rdi + 8*rax + 32]
	LONG $0x5458edc5; WORD $0x40c7 // vaddpd    ymm2, ymm2, yword [rdi + 8*rax + 64]
	LONG $0x5c58e5c5; WORD $0x60c7 // vaddpd    ymm3, ymm3, yword [rdi + 8*rax + 96]
	LONG $0x10c08348               // add    rax, 16
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JNE  LBB63_5
	LONG $0xc058f5c5               // vaddpd    ymm0, ymm1, ymm0
	LONG $0xc058edc5               // vaddpd    ymm0, ymm2, ymm0
	LONG $0xc058e5c5               // vaddpd    ymm0, ymm3, ymm0
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128    xmm1, ymm0, 1
	LONG $0xc158f9c5               // vaddpd    xmm0, xmm0, xmm1
	LONG $0x0579e3c4; WORD $0x01c8 // vpermilpd    xmm1, xmm0, 1
	LONG $0xc158fbc5               // vaddsd    xmm0, xmm0, xmm1
	WORD $0x8548; BYTE $0xd2       // test    rdx, rdx
	JE   LBB63_8

LBB63_7:
	LONG $0x0458fbc5; BYTE $0xcf // vaddsd    xmm0, xmm0, qword [rdi + 8*rcx]
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc8     // cmp    r8, rcx
	JNE  LBB63_7

LBB63_8:
	LONG $0x0611fbc5 // vmovsd    qword [rsi], xmm0
	VZEROUPPER
	RET

TEXT 路_float64_avx2_min(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	LONG $0x0710fbc5             // vmovsd    xmm0, qword [rdi]
	WORD $0xd285                 // test    edx, edx
	JLE  LBB64_7
	WORD $0x8941; BYTE $0xd1     // mov    r9d, edx
	LONG $0x01f98349             // cmp    r9, 1
	JE   LBB64_7
	LONG $0xff418d4d             // lea    r8, [r9 - 1]
	LONG $0x000001b9; BYTE $0x00 // mov    ecx, 1
	LONG $0x0ff88349             // cmp    r8, 15
	JBE  LBB64_6
	WORD $0x894c; BYTE $0xc2     // mov    rdx, r8
	LONG $0xf0e28348             // and    rdx, -16
	LONG $0x014a8d48             // lea    rcx, [rdx + 1]
	LONG $0x197de2c4; BYTE $0xc0 // vbroadcastsd    ymm0, xmm0
	WORD $0xc031                 // xor    eax, eax
	LONG $0xc828fdc5             // vmovapd    ymm1, ymm0
	LONG $0xd028fdc5             // vmovapd    ymm2, ymm0
	LONG $0xd828fdc5             // vmovapd    ymm3, ymm0

LBB64_4:
	LONG $0x445dfdc5; WORD $0x08c7 // vminpd    ymm0, ymm0, yword [rdi + 8*rax + 8]
	LONG $0x4c5df5c5; WORD $0x28c7 // vminpd    ymm1, ymm1, yword [rdi + 8*rax + 40]
	LONG $0x545dedc5; WORD $0x48c7 // vminpd    ymm2, ymm2, yword [rdi + 8*rax + 72]
	LONG $0x5c5de5c5; WORD $0x68c7 // vminpd    ymm3, ymm3, yword [rdi + 8*rax + 104]
	LONG $0x10c08348               // add    rax, 16
	WORD $0x3948; BYTE $0xc2       // cmp    rdx, rax
	JNE  LBB64_4
	LONG $0xc15dfdc5               // vminpd    ymm0, ymm0, ymm1
	LONG $0xc25dfdc5               // vminpd    ymm0, ymm0, ymm2
	LONG $0xc35dfdc5               // vminpd    ymm0, ymm0, ymm3
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128    xmm1, ymm0, 1
	LONG $0xc15df9c5               // vminpd    xmm0, xmm0, xmm1
	LONG $0x0579e3c4; WORD $0x01c8 // vpermilpd    xmm1, xmm0, 1
	LONG $0xc15dfbc5               // vminsd    xmm0, xmm0, xmm1
	WORD $0x3949; BYTE $0xd0       // cmp    r8, rdx
	JE   LBB64_7

LBB64_6:
	LONG $0x045dfbc5; BYTE $0xcf // vminsd    xmm0, xmm0, qword [rdi + 8*rcx]
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB64_6

LBB64_7:
	LONG $0x0611fbc5 // vmovsd    qword [rsi], xmm0
	VZEROUPPER
	RET

TEXT 路_float64_avx2_max(SB), $0-24

	MOVQ input+0(FP), DI
	MOVQ result+8(FP), SI
	MOVQ info+16(FP), DX

	LONG $0x0710fbc5             // vmovsd    xmm0, qword [rdi]
	WORD $0xd285                 // test    edx, edx
	JLE  LBB65_7
	WORD $0x8941; BYTE $0xd1     // mov    r9d, edx
	LONG $0x01f98349             // cmp    r9, 1
	JE   LBB65_7
	LONG $0xff418d4d             // lea    r8, [r9 - 1]
	LONG $0x000001b9; BYTE $0x00 // mov    ecx, 1
	LONG $0x0ff88349             // cmp    r8, 15
	JBE  LBB65_6
	WORD $0x894c; BYTE $0xc2     // mov    rdx, r8
	LONG $0xf0e28348             // and    rdx, -16
	LONG $0x014a8d48             // lea    rcx, [rdx + 1]
	LONG $0x197de2c4; BYTE $0xc0 // vbroadcastsd    ymm0, xmm0
	WORD $0xc031                 // xor    eax, eax
	LONG $0xc828fdc5             // vmovapd    ymm1, ymm0
	LONG $0xd028fdc5             // vmovapd    ymm2, ymm0
	LONG $0xd828fdc5             // vmovapd    ymm3, ymm0

LBB65_4:
	LONG $0x445ffdc5; WORD $0x08c7 // vmaxpd    ymm0, ymm0, yword [rdi + 8*rax + 8]
	LONG $0x4c5ff5c5; WORD $0x28c7 // vmaxpd    ymm1, ymm1, yword [rdi + 8*rax + 40]
	LONG $0x545fedc5; WORD $0x48c7 // vmaxpd    ymm2, ymm2, yword [rdi + 8*rax + 72]
	LONG $0x5c5fe5c5; WORD $0x68c7 // vmaxpd    ymm3, ymm3, yword [rdi + 8*rax + 104]
	LONG $0x10c08348               // add    rax, 16
	WORD $0x3948; BYTE $0xc2       // cmp    rdx, rax
	JNE  LBB65_4
	LONG $0xc15ffdc5               // vmaxpd    ymm0, ymm0, ymm1
	LONG $0xc25ffdc5               // vmaxpd    ymm0, ymm0, ymm2
	LONG $0xc35ffdc5               // vmaxpd    ymm0, ymm0, ymm3
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128    xmm1, ymm0, 1
	LONG $0xc15ff9c5               // vmaxpd    xmm0, xmm0, xmm1
	LONG $0x0579e3c4; WORD $0x01c8 // vpermilpd    xmm1, xmm0, 1
	LONG $0xc15ffbc5               // vmaxsd    xmm0, xmm0, xmm1
	WORD $0x3949; BYTE $0xd0       // cmp    r8, rdx
	JE   LBB65_7

LBB65_6:
	LONG $0x045ffbc5; BYTE $0xcf // vmaxsd    xmm0, xmm0, qword [rdi + 8*rcx]
	LONG $0x01c18348             // add    rcx, 1
	WORD $0x3949; BYTE $0xc9     // cmp    r9, rcx
	JNE  LBB65_6

LBB65_7:
	LONG $0x0611fbc5 // vmovsd    qword [rsi], xmm0
	VZEROUPPER
	RET

TEXT 路_float64_avx2_add(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB66_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x0ff88349         // cmp    r8, 15
	JA   LBB66_7
	WORD $0xc031             // xor    eax, eax
	JMP  LBB66_3

LBB66_7:
	LONG $0xc2148d4e         // lea    r10, [rdx + 8*r8]
	LONG $0xc7048d4a         // lea    rax, [rdi + 8*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd3970f41         // seta    r11b
	LONG $0xc6048d4a         // lea    rax, [rsi + 8*r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0xc031             // xor    eax, eax
	WORD $0x8441; BYTE $0xdb // test    r11b, bl
	JNE  LBB66_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB66_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x0fe18341         // and    r9d, 15
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	WORD $0x294c; BYTE $0xc8 // sub    rax, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB66_10:
	LONG $0x107da1c4; WORD $0xd604             // vmovupd    ymm0, yword [rsi + 8*r10]
	LONG $0x107da1c4; WORD $0xd64c; BYTE $0x20 // vmovupd    ymm1, yword [rsi + 8*r10 + 32]
	LONG $0x107da1c4; WORD $0xd654; BYTE $0x40 // vmovupd    ymm2, yword [rsi + 8*r10 + 64]
	LONG $0x107da1c4; WORD $0xd65c; BYTE $0x60 // vmovupd    ymm3, yword [rsi + 8*r10 + 96]
	LONG $0x587da1c4; WORD $0xd704             // vaddpd    ymm0, ymm0, yword [rdi + 8*r10]
	LONG $0x5875a1c4; WORD $0xd74c; BYTE $0x20 // vaddpd    ymm1, ymm1, yword [rdi + 8*r10 + 32]
	LONG $0x586da1c4; WORD $0xd754; BYTE $0x40 // vaddpd    ymm2, ymm2, yword [rdi + 8*r10 + 64]
	LONG $0x5865a1c4; WORD $0xd75c; BYTE $0x60 // vaddpd    ymm3, ymm3, yword [rdi + 8*r10 + 96]
	LONG $0x117da1c4; WORD $0xd204             // vmovupd    yword [rdx + 8*r10], ymm0
	LONG $0x117da1c4; WORD $0xd24c; BYTE $0x20 // vmovupd    yword [rdx + 8*r10 + 32], ymm1
	LONG $0x117da1c4; WORD $0xd254; BYTE $0x40 // vmovupd    yword [rdx + 8*r10 + 64], ymm2
	LONG $0x117da1c4; WORD $0xd25c; BYTE $0x60 // vmovupd    yword [rdx + 8*r10 + 96], ymm3
	LONG $0x10c28349                           // add    r10, 16
	WORD $0x394c; BYTE $0xd0                   // cmp    rax, r10
	JNE  LBB66_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB66_12

LBB66_3:
	WORD $0xc129             // sub    ecx, eax
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB66_5

LBB66_4:
	LONG $0x0410fbc5; BYTE $0xc6 // vmovsd    xmm0, qword [rsi + 8*rax]
	LONG $0x0458fbc5; BYTE $0xc7 // vaddsd    xmm0, xmm0, qword [rdi + 8*rax]
	LONG $0x0411fbc5; BYTE $0xc2 // vmovsd    qword [rdx + 8*rax], xmm0
	LONG $0x01c08348             // add    rax, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB66_4

LBB66_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB66_12

LBB66_6:
	LONG $0x0410fbc5; BYTE $0xc6   // vmovsd    xmm0, qword [rsi + 8*rax]
	LONG $0x0458fbc5; BYTE $0xc7   // vaddsd    xmm0, xmm0, qword [rdi + 8*rax]
	LONG $0x0411fbc5; BYTE $0xc2   // vmovsd    qword [rdx + 8*rax], xmm0
	LONG $0x4410fbc5; WORD $0x08c6 // vmovsd    xmm0, qword [rsi + 8*rax + 8]
	LONG $0x4458fbc5; WORD $0x08c7 // vaddsd    xmm0, xmm0, qword [rdi + 8*rax + 8]
	LONG $0x4411fbc5; WORD $0x08c2 // vmovsd    qword [rdx + 8*rax + 8], xmm0
	LONG $0x4410fbc5; WORD $0x10c6 // vmovsd    xmm0, qword [rsi + 8*rax + 16]
	LONG $0x4458fbc5; WORD $0x10c7 // vaddsd    xmm0, xmm0, qword [rdi + 8*rax + 16]
	LONG $0x4411fbc5; WORD $0x10c2 // vmovsd    qword [rdx + 8*rax + 16], xmm0
	LONG $0x4410fbc5; WORD $0x18c6 // vmovsd    xmm0, qword [rsi + 8*rax + 24]
	LONG $0x4458fbc5; WORD $0x18c7 // vaddsd    xmm0, xmm0, qword [rdi + 8*rax + 24]
	LONG $0x4411fbc5; WORD $0x18c2 // vmovsd    qword [rdx + 8*rax + 24], xmm0
	LONG $0x04c08348               // add    rax, 4
	WORD $0x3949; BYTE $0xc0       // cmp    r8, rax
	JNE  LBB66_6

LBB66_12:
	VZEROUPPER
	RET

TEXT 路_float64_avx2_sub(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB67_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x0ff88349         // cmp    r8, 15
	JA   LBB67_7
	WORD $0xc031             // xor    eax, eax
	JMP  LBB67_3

LBB67_7:
	LONG $0xc2148d4e         // lea    r10, [rdx + 8*r8]
	LONG $0xc7048d4a         // lea    rax, [rdi + 8*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd3970f41         // seta    r11b
	LONG $0xc6048d4a         // lea    rax, [rsi + 8*r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0xc031             // xor    eax, eax
	WORD $0x8441; BYTE $0xdb // test    r11b, bl
	JNE  LBB67_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB67_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x0fe18341         // and    r9d, 15
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	WORD $0x294c; BYTE $0xc8 // sub    rax, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB67_10:
	LONG $0x107da1c4; WORD $0xd704             // vmovupd    ymm0, yword [rdi + 8*r10]
	LONG $0x107da1c4; WORD $0xd74c; BYTE $0x20 // vmovupd    ymm1, yword [rdi + 8*r10 + 32]
	LONG $0x107da1c4; WORD $0xd754; BYTE $0x40 // vmovupd    ymm2, yword [rdi + 8*r10 + 64]
	LONG $0x107da1c4; WORD $0xd75c; BYTE $0x60 // vmovupd    ymm3, yword [rdi + 8*r10 + 96]
	LONG $0x5c7da1c4; WORD $0xd604             // vsubpd    ymm0, ymm0, yword [rsi + 8*r10]
	LONG $0x5c75a1c4; WORD $0xd64c; BYTE $0x20 // vsubpd    ymm1, ymm1, yword [rsi + 8*r10 + 32]
	LONG $0x5c6da1c4; WORD $0xd654; BYTE $0x40 // vsubpd    ymm2, ymm2, yword [rsi + 8*r10 + 64]
	LONG $0x5c65a1c4; WORD $0xd65c; BYTE $0x60 // vsubpd    ymm3, ymm3, yword [rsi + 8*r10 + 96]
	LONG $0x117da1c4; WORD $0xd204             // vmovupd    yword [rdx + 8*r10], ymm0
	LONG $0x117da1c4; WORD $0xd24c; BYTE $0x20 // vmovupd    yword [rdx + 8*r10 + 32], ymm1
	LONG $0x117da1c4; WORD $0xd254; BYTE $0x40 // vmovupd    yword [rdx + 8*r10 + 64], ymm2
	LONG $0x117da1c4; WORD $0xd25c; BYTE $0x60 // vmovupd    yword [rdx + 8*r10 + 96], ymm3
	LONG $0x10c28349                           // add    r10, 16
	WORD $0x394c; BYTE $0xd0                   // cmp    rax, r10
	JNE  LBB67_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB67_12

LBB67_3:
	WORD $0xc129             // sub    ecx, eax
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB67_5

LBB67_4:
	LONG $0x0410fbc5; BYTE $0xc7 // vmovsd    xmm0, qword [rdi + 8*rax]
	LONG $0x045cfbc5; BYTE $0xc6 // vsubsd    xmm0, xmm0, qword [rsi + 8*rax]
	LONG $0x0411fbc5; BYTE $0xc2 // vmovsd    qword [rdx + 8*rax], xmm0
	LONG $0x01c08348             // add    rax, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB67_4

LBB67_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB67_12

LBB67_6:
	LONG $0x0410fbc5; BYTE $0xc7   // vmovsd    xmm0, qword [rdi + 8*rax]
	LONG $0x045cfbc5; BYTE $0xc6   // vsubsd    xmm0, xmm0, qword [rsi + 8*rax]
	LONG $0x0411fbc5; BYTE $0xc2   // vmovsd    qword [rdx + 8*rax], xmm0
	LONG $0x4410fbc5; WORD $0x08c7 // vmovsd    xmm0, qword [rdi + 8*rax + 8]
	LONG $0x445cfbc5; WORD $0x08c6 // vsubsd    xmm0, xmm0, qword [rsi + 8*rax + 8]
	LONG $0x4411fbc5; WORD $0x08c2 // vmovsd    qword [rdx + 8*rax + 8], xmm0
	LONG $0x4410fbc5; WORD $0x10c7 // vmovsd    xmm0, qword [rdi + 8*rax + 16]
	LONG $0x445cfbc5; WORD $0x10c6 // vsubsd    xmm0, xmm0, qword [rsi + 8*rax + 16]
	LONG $0x4411fbc5; WORD $0x10c2 // vmovsd    qword [rdx + 8*rax + 16], xmm0
	LONG $0x4410fbc5; WORD $0x18c7 // vmovsd    xmm0, qword [rdi + 8*rax + 24]
	LONG $0x445cfbc5; WORD $0x18c6 // vsubsd    xmm0, xmm0, qword [rsi + 8*rax + 24]
	LONG $0x4411fbc5; WORD $0x18c2 // vmovsd    qword [rdx + 8*rax + 24], xmm0
	LONG $0x04c08348               // add    rax, 4
	WORD $0x3949; BYTE $0xc0       // cmp    r8, rax
	JNE  LBB67_6

LBB67_12:
	VZEROUPPER
	RET

TEXT 路_float64_avx2_mul(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB68_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x0ff88349         // cmp    r8, 15
	JA   LBB68_7
	WORD $0xc031             // xor    eax, eax
	JMP  LBB68_3

LBB68_7:
	LONG $0xc2148d4e         // lea    r10, [rdx + 8*r8]
	LONG $0xc7048d4a         // lea    rax, [rdi + 8*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd3970f41         // seta    r11b
	LONG $0xc6048d4a         // lea    rax, [rsi + 8*r8]
	WORD $0x3949; BYTE $0xfa // cmp    r10, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd1970f41         // seta    r9b
	WORD $0x3949; BYTE $0xf2 // cmp    r10, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0xc031             // xor    eax, eax
	WORD $0x8441; BYTE $0xdb // test    r11b, bl
	JNE  LBB68_3
	WORD $0x2045; BYTE $0xd1 // and    r9b, r10b
	JNE  LBB68_3
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	LONG $0x0fe18341         // and    r9d, 15
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	WORD $0x294c; BYTE $0xc8 // sub    rax, r9
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB68_10:
	LONG $0x107da1c4; WORD $0xd604             // vmovupd    ymm0, yword [rsi + 8*r10]
	LONG $0x107da1c4; WORD $0xd64c; BYTE $0x20 // vmovupd    ymm1, yword [rsi + 8*r10 + 32]
	LONG $0x107da1c4; WORD $0xd654; BYTE $0x40 // vmovupd    ymm2, yword [rsi + 8*r10 + 64]
	LONG $0x107da1c4; WORD $0xd65c; BYTE $0x60 // vmovupd    ymm3, yword [rsi + 8*r10 + 96]
	LONG $0x597da1c4; WORD $0xd704             // vmulpd    ymm0, ymm0, yword [rdi + 8*r10]
	LONG $0x5975a1c4; WORD $0xd74c; BYTE $0x20 // vmulpd    ymm1, ymm1, yword [rdi + 8*r10 + 32]
	LONG $0x596da1c4; WORD $0xd754; BYTE $0x40 // vmulpd    ymm2, ymm2, yword [rdi + 8*r10 + 64]
	LONG $0x5965a1c4; WORD $0xd75c; BYTE $0x60 // vmulpd    ymm3, ymm3, yword [rdi + 8*r10 + 96]
	LONG $0x117da1c4; WORD $0xd204             // vmovupd    yword [rdx + 8*r10], ymm0
	LONG $0x117da1c4; WORD $0xd24c; BYTE $0x20 // vmovupd    yword [rdx + 8*r10 + 32], ymm1
	LONG $0x117da1c4; WORD $0xd254; BYTE $0x40 // vmovupd    yword [rdx + 8*r10 + 64], ymm2
	LONG $0x117da1c4; WORD $0xd25c; BYTE $0x60 // vmovupd    yword [rdx + 8*r10 + 96], ymm3
	LONG $0x10c28349                           // add    r10, 16
	WORD $0x394c; BYTE $0xd0                   // cmp    rax, r10
	JNE  LBB68_10
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JE   LBB68_12

LBB68_3:
	WORD $0xc129             // sub    ecx, eax
	WORD $0x8949; BYTE $0xc1 // mov    r9, rax
	WORD $0xf749; BYTE $0xd1 // not    r9
	WORD $0x014d; BYTE $0xc1 // add    r9, r8
	LONG $0x03e18348         // and    rcx, 3
	JE   LBB68_5

LBB68_4:
	LONG $0x0410fbc5; BYTE $0xc6 // vmovsd    xmm0, qword [rsi + 8*rax]
	LONG $0x0459fbc5; BYTE $0xc7 // vmulsd    xmm0, xmm0, qword [rdi + 8*rax]
	LONG $0x0411fbc5; BYTE $0xc2 // vmovsd    qword [rdx + 8*rax], xmm0
	LONG $0x01c08348             // add    rax, 1
	LONG $0xffc18348             // add    rcx, -1
	JNE  LBB68_4

LBB68_5:
	LONG $0x03f98349 // cmp    r9, 3
	JB   LBB68_12

LBB68_6:
	LONG $0x0410fbc5; BYTE $0xc6   // vmovsd    xmm0, qword [rsi + 8*rax]
	LONG $0x0459fbc5; BYTE $0xc7   // vmulsd    xmm0, xmm0, qword [rdi + 8*rax]
	LONG $0x0411fbc5; BYTE $0xc2   // vmovsd    qword [rdx + 8*rax], xmm0
	LONG $0x4410fbc5; WORD $0x08c6 // vmovsd    xmm0, qword [rsi + 8*rax + 8]
	LONG $0x4459fbc5; WORD $0x08c7 // vmulsd    xmm0, xmm0, qword [rdi + 8*rax + 8]
	LONG $0x4411fbc5; WORD $0x08c2 // vmovsd    qword [rdx + 8*rax + 8], xmm0
	LONG $0x4410fbc5; WORD $0x10c6 // vmovsd    xmm0, qword [rsi + 8*rax + 16]
	LONG $0x4459fbc5; WORD $0x10c7 // vmulsd    xmm0, xmm0, qword [rdi + 8*rax + 16]
	LONG $0x4411fbc5; WORD $0x10c2 // vmovsd    qword [rdx + 8*rax + 16], xmm0
	LONG $0x4410fbc5; WORD $0x18c6 // vmovsd    xmm0, qword [rsi + 8*rax + 24]
	LONG $0x4459fbc5; WORD $0x18c7 // vmulsd    xmm0, xmm0, qword [rdi + 8*rax + 24]
	LONG $0x4411fbc5; WORD $0x18c2 // vmovsd    qword [rdx + 8*rax + 24], xmm0
	LONG $0x04c08348               // add    rax, 4
	WORD $0x3949; BYTE $0xc0       // cmp    r8, rax
	JNE  LBB68_6

LBB68_12:
	VZEROUPPER
	RET

TEXT 路_float64_avx2_div(SB), $0-32

	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ info+24(FP), CX

	WORD $0xc985             // test    ecx, ecx
	JLE  LBB69_12
	WORD $0x8941; BYTE $0xc8 // mov    r8d, ecx
	LONG $0x03f88349         // cmp    r8, 3
	JA   LBB69_7
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d
	JMP  LBB69_3

LBB69_7:
	LONG $0xc20c8d4e         // lea    r9, [rdx + 8*r8]
	LONG $0xc7048d4a         // lea    rax, [rdi + 8*r8]
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd6970f41         // seta    r14b
	LONG $0xc6048d4a         // lea    rax, [rsi + 8*r8]
	WORD $0x3949; BYTE $0xf9 // cmp    r9, rdi
	WORD $0x970f; BYTE $0xd3 // seta    bl
	WORD $0x3948; BYTE $0xd0 // cmp    rax, rdx
	LONG $0xd3970f41         // seta    r11b
	WORD $0x3949; BYTE $0xf1 // cmp    r9, rsi
	LONG $0xd2970f41         // seta    r10b
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d
	WORD $0x8441; BYTE $0xde // test    r14b, bl
	JNE  LBB69_3
	WORD $0x2045; BYTE $0xd3 // and    r11b, r10b
	JNE  LBB69_3
	WORD $0x8941; BYTE $0xca // mov    r10d, ecx
	LONG $0x03e28341         // and    r10d, 3
	WORD $0x894d; BYTE $0xc1 // mov    r9, r8
	WORD $0x294d; BYTE $0xd1 // sub    r9, r10
	WORD $0xc031             // xor    eax, eax

LBB69_10:
	LONG $0x0410fdc5; BYTE $0xc7 // vmovupd    ymm0, yword [rdi + 8*rax]
	LONG $0x045efdc5; BYTE $0xc6 // vdivpd    ymm0, ymm0, yword [rsi + 8*rax]
	LONG $0x0411fdc5; BYTE $0xc2 // vmovupd    yword [rdx + 8*rax], ymm0
	LONG $0x04c08348             // add    rax, 4
	WORD $0x3949; BYTE $0xc1     // cmp    r9, rax
	JNE  LBB69_10
	WORD $0x854d; BYTE $0xd2     // test    r10, r10
	JE   LBB69_12

LBB69_3:
	WORD $0x2944; BYTE $0xc9       // sub    ecx, r9d
	WORD $0x894c; BYTE $0xc8       // mov    rax, r9
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB69_5
	LONG $0x107ba1c4; WORD $0xcf04 // vmovsd    xmm0, qword [rdi + 8*r9]
	LONG $0x5e7ba1c4; WORD $0xce04 // vdivsd    xmm0, xmm0, qword [rsi + 8*r9]
	LONG $0x117ba1c4; WORD $0xca04 // vmovsd    qword [rdx + 8*r9], xmm0
	LONG $0x01418d49               // lea    rax, [r9 + 1]

LBB69_5:
	LONG $0x01c18349         // add    r9, 1
	WORD $0x394d; BYTE $0xc8 // cmp    r8, r9
	JE   LBB69_12

LBB69_6:
	LONG $0x0410fbc5; BYTE $0xc7   // vmovsd    xmm0, qword [rdi + 8*rax]
	LONG $0x045efbc5; BYTE $0xc6   // vdivsd    xmm0, xmm0, qword [rsi + 8*rax]
	LONG $0x0411fbc5; BYTE $0xc2   // vmovsd    qword [rdx + 8*rax], xmm0
	LONG $0x4410fbc5; WORD $0x08c7 // vmovsd    xmm0, qword [rdi + 8*rax + 8]
	LONG $0x445efbc5; WORD $0x08c6 // vdivsd    xmm0, xmm0, qword [rsi + 8*rax + 8]
	LONG $0x4411fbc5; WORD $0x08c2 // vmovsd    qword [rdx + 8*rax + 8], xmm0
	LONG $0x02c08348               // add    rax, 2
	WORD $0x3949; BYTE $0xc0       // cmp    r8, rax
	JNE  LBB69_6

LBB69_12:
	VZEROUPPER
	RET
